%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Logotransparentblack.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sue Fairhurst
%%CreationDate: 10/8/09
%%BoundingBox: 0 0 215 89
%%HiResBoundingBox: 0 0 214.7822 88.1519
%%CropBox: 0 0 214.7822 88.1519
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-10-08T14:03:06+01:00</xap:CreateDate>
         <xap:ModifyDate>2009-10-08T14:03:06+01:00</xap:ModifyDate>
         <xap:MetadataDate>2009-10-08T14:03:06+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>108</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAbAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgtZ1vSN&#xA;E06XUtXvIrGxhFZLidgijwG/UnsBucVeRX3/ADkDq+uTTWv5a+WZ9bjhJWXW76trp8dO5LlNv9d0&#xA;PtiqQRaj+bGv+YW0HWfzJ03y3qfrfV/0Zp9qzET8VkMKzSJCskgV1qqTt1piqAis9QPnCHyjP+a3&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:9CFFC19594B5DE11971CBF4EA6F41C96</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:10FF72A1A5B5DE11971CBF4EA6F41C96</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9BFFC19594B5DE11971CBF4EA6F41C96</stRef:instanceID>
            <stRef:documentID>uuid:9AFFC19594B5DE11971CBF4EA6F41C96</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.038889</stDim:w>
            <stDim:h>209.902778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>New Color Swatch 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>85.098000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>100c,75m,15k</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>14.999999</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 280 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>72.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>18.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=80 G=86 B=97</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.411804</xapG:cyan>
                           <xapG:magenta>58.823502</xapG:magenta>
                           <xapG:yellow>47.058796</xapG:yellow>
                           <xapG:black>25.882399</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -88.1519 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 88.1519 li
214.782 88.1519 li
214.782 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2 lw
0 lc
0 lj
3.86369 ml
[] 0 dsh
true sadj
79.3779 44.0767 mo
79.3779 63.5942 63.5557 79.4165 44.0381 79.4165 cv
24.5195 79.4165 8.69727 63.5942 8.69727 44.0767 cv
8.69727 24.5581 24.5195 8.73584 44.0381 8.73584 cv
63.5557 8.73584 79.3779 24.5581 79.3779 44.0767 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
50.6143 70.9429 mo
51.144 70.731 52.0273 70.0244 52.1333 69.7065 cv
52.2393 69.3887 52.5571 69.4595 52.6279 69.7065 cv
52.6982 69.9541 52.9106 70.5898 53.0518 70.8022 cv
53.1934 71.0132 53.1934 71.1553 52.9814 71.2612 cv
52.7695 71.3667 52.231 71.2905 51.877 71.5024 cv
51.5244 71.7144 51.082 71.7876 50.7988 71.9648 cv
50.5166 72.1411 50.3052 72.1577 49.9517 72.1577 cv
49.5986 72.1577 49.3584 72.3145 49.1816 72.3501 cv
49.0049 72.3853 48.3857 72.3115 48.1035 72.3115 cv
47.8203 72.3115 47.3877 72.4268 47.1401 72.4268 cv
46.8931 72.4268 46.6621 72.2183 46.9092 72.0415 cv
47.1567 71.8647 47.3994 71.7905 47.6821 71.7554 cv
47.9648 71.7202 48.353 71.6143 48.5654 71.438 cv
48.7773 71.2612 48.8828 71.1196 48.8828 71.1196 cv
48.8828 71.1196 49.5898 71.0845 49.9429 71.0488 cv
50.2959 71.0132 50.084 71.1553 50.6143 70.9429 cv
cp
ef
44.249 57.7417 mo
44.5615 57.9219 45.2617 58.2124 45.2969 58.4956 cv
45.332 58.7773 44.957 59.6372 44.5332 59.6372 cv
44.1094 59.6372 42.1494 58.5474 42.4639 58.0098 cv
43.001 57.0942 43.7275 57.4414 44.249 57.7417 cv
cp
ef
58.1499 31.2129 mo
57.6045 31.144 57.0381 30.9351 57.4595 30.5322 cv
57.9233 30.0898 57.8071 29.7026 58.0615 29.397 cv
58.2925 29.1201 58.5498 28.8286 58.4819 28.5562 cv
58.4136 28.2837 57.8682 27.9429 58.1411 27.6699 cv
58.4136 27.3975 58.8911 26.6479 59.0957 26.0342 cv
59.2993 25.4209 60.3901 22.8989 60.5947 22.3535 cv
60.7988 21.8081 60.7988 21.2632 61.0718 20.9224 cv
61.3442 20.5815 62.6221 18.6768 63.4507 18.5298 cv
64.1714 18.4028 64.7197 18.5459 64.7197 18.5459 cv
64.7197 18.5459 66.561 19.9668 66.9492 20.3667 cv
67.4673 20.8999 71.1309 25.4258 71.5928 26.1646 cv
71.8354 26.5532 74.6714 32.0142 75.0718 33.3994 cv
75.2241 33.9277 75.7798 35.4009 75.9961 36.2012 cv
76.0747 36.4961 76.7041 40.481 76.7041 40.481 cv
76.7041 40.481 75.3262 41.1348 75.0947 40.2109 cv
74.9673 39.7007 74.5923 37.7036 74.4561 37.2944 cv
74.3198 36.8853 73.8633 36.0454 73.7637 35.6777 cv
73.6611 35.3027 73.3916 34.2861 73.2554 33.877 cv
73.1191 33.4683 72.2588 31.4204 72.0542 30.875 cv
71.8496 30.3296 71.6719 29.6416 71.5869 29.4438 cv
71.4487 29.1201 70.5566 27.5947 71.5103 27.3359 cv
72.4189 27.0894 70.5752 25.1084 70.1865 25.0264 cv
69.3091 24.8418 67.252 23.9941 66.5132 24.2251 cv
66.2368 24.311 65.9854 24.8296 66.1899 25.1025 cv
66.394 25.375 68.0122 25.7266 68.4063 25.9341 cv
68.7437 26.1113 69.4902 26.4043 69.4224 26.9497 cv
69.3867 27.2363 69.0688 27.6831 69.478 27.9565 cv
69.8867 28.229 70.4985 28.2373 70.4014 29.1201 cv
70.3047 30.001 70.5518 30.3345 70.9463 30.875 cv
71.2896 31.3452 71.3882 32.1406 71.5928 32.5835 cv
71.7593 32.9448 70.5645 32.7075 70.3921 32.3066 cv
70.188 31.8296 69.5659 30.4307 69.1909 30.0898 cv
68.8687 29.7964 68.3647 30.0557 68.4331 30.3965 cv
68.501 30.7368 69.2026 32.189 69.5576 32.646 cv
69.9761 33.1841 71.0894 33.6084 71.3618 34.1543 cv
71.6348 34.6987 72.1733 35.3833 72.3779 35.7241 cv
72.582 36.0649 73.3843 36.833 73.4863 38.2642 cv
73.5542 39.2158 73.9966 40.186 74.1328 40.5269 cv
74.2686 40.8677 73.5044 40.9902 73.2554 40.7583 cv
72.8477 40.3774 72.5903 39.938 72.5566 39.3252 cv
72.5166 38.5869 72.082 36.7563 71.4111 35.7944 cv
70.627 34.6699 70.2393 34.2476 69.8984 33.9746 cv
69.5576 33.7021 68.5205 32.7349 68.1753 32.2915 cv
67.7813 31.7847 67.1787 30.7871 66.9746 30.105 cv
66.77 29.4238 66.0649 29.5938 65.9585 30.1973 cv
65.8569 30.7769 65.8555 31.2817 66.6055 32.168 cv
67.355 33.0542 67.6152 33.7363 68.228 33.8726 cv
68.8418 34.0083 69.1826 33.8726 69.6597 34.6904 cv
70.1367 35.5083 71.3398 37.5562 71.4082 38.0327 cv
71.4756 38.5103 70.2104 38.394 70.0229 37.7559 cv
69.8579 37.1973 69.334 35.8335 69.1299 35.4932 cv
68.9258 35.1523 68.769 34.728 68.3604 35.0005 cv
67.9512 35.2729 68.5146 36.0679 68.6372 36.3862 cv
68.7915 36.7861 68.0234 37.0723 67.6826 36.6631 cv
67.3423 36.2544 67.1221 35.4146 66.9131 35.0317 cv
66.7285 34.6929 66.2739 34.2407 66.0469 34.3496 cv
65.5894 34.5693 65.8843 35.3481 66.0205 35.8936 cv
66.1563 36.439 65.7173 36.6841 65.3315 36.395 cv
64.7861 35.9858 64.8892 34.9629 64.5479 34.4863 cv
64.207 34.0083 63.6621 33.7363 63.5938 33.2593 cv
63.5254 32.7817 63.6167 32.1284 63.8662 31.896 cv
64.3438 31.4526 64.1392 31.0439 64.0713 30.7368 cv
64.0098 30.4629 63.8276 30.209 63.8042 29.8281 cv
63.7695 29.2827 64.1392 29.2715 64.2754 28.9995 cv
64.4116 28.7261 64.3789 28.2583 64.2959 27.981 cv
64.2036 27.6729 63.9043 27.2549 64.4502 27.1191 cv
64.9956 26.9824 65.2173 27.0752 65.5591 27.2114 cv
65.8989 27.3477 66.7295 27.8403 67.0015 27.8403 cv
67.2744 27.8403 68.2612 27.8633 68.0923 27.042 cv
68.043 26.8013 67.3423 26.375 67.0698 26.5107 cv
66.7969 26.6479 66.2646 26.6768 65.9585 26.4414 cv
65.5591 26.1338 64.4453 25.0459 64.3779 24.9097 cv
64.3096 24.7734 64.8892 23.5127 65.4341 23.3081 cv
65.9795 23.1035 66.7246 22.9541 66.52 22.4766 cv
66.3159 21.9995 65.5161 21.8921 65.3115 21.5513 cv
65.1069 21.21 64.5415 20.645 64.1323 20.9175 cv
63.7241 21.1899 63.2529 21.2632 62.98 21.3315 cv
62.708 21.3989 62.2305 21.8081 62.0942 22.3535 cv
61.958 22.8989 60.7866 25.0562 60.731 25.7612 cv
60.709 26.042 59.8447 26.7153 59.9814 27.0566 cv
60.1177 27.3975 60.3901 27.2607 60.6631 27.3296 cv
60.9351 27.3975 60.7988 27.9429 60.4585 28.3516 cv
60.1177 28.7607 60.0786 29.2495 59.9814 29.4419 cv
59.8169 29.7661 59.2148 29.6543 59.1143 29.9795 cv
58.9189 30.6147 58.5786 30.9541 58.1499 31.2129 cv
cp
ef
62.4492 17.1748 mo
62.4492 17.1748 60.2349 18.335 59.8291 18.8354 cv
59.5127 19.2266 59.0791 21.2373 58.9292 21.4629 cv
58.7788 21.688 58.6382 22.0557 58.6382 22.4312 cv
58.6382 22.8066 58.7036 23.0386 58.3286 24.0146 cv
57.9531 24.9902 57.6533 25.5156 57.5029 26.2666 cv
57.3525 27.0161 57.8032 27.4673 57.4277 28.1426 cv
57.0527 28.8179 56.6777 29.2305 56.6021 29.606 cv
56.5273 29.9814 56.1611 30.4619 56.0107 30.8369 cv
55.8604 31.2129 54.8096 31.5879 55.0347 30.9121 cv
55.2598 30.2363 55.8867 28.2134 56.3369 25.8867 cv
56.7876 23.5601 56.8164 22.3564 57.604 19.9917 cv
58.3467 17.7632 61.1865 16.1284 61.1865 16.1284 cv
62.4492 17.1748 li
cp
ef
13.1738 51.7959 mo
13.1587 52.1191 14.1875 52.5024 13.9131 52.9507 cv
13.3374 53.8901 14.7695 54.2593 14.4917 54.8135 cv
14.2148 55.3672 14.0322 56.0103 13.707 55.8296 cv
13.2915 55.5986 12.1118 51.7036 11.9272 50.7803 cv
11.833 50.3101 11.5117 47.4556 11.5576 46.8091 cv
11.604 46.1621 12.3193 45.9404 12.3887 45.8853 cv
12.6201 45.7007 14.5679 44.9009 14.8364 44.7769 cv
15.2842 44.5703 16.5918 43.3892 16.73 43.1138 cv
16.8682 42.8384 16.9243 42.1265 16.9609 41.5435 cv
16.9917 41.0503 17.084 40.5269 16.7764 40.4346 cv
16.4131 40.3257 16.0137 40.5518 15.9448 40.896 cv
15.876 41.2407 15.6621 42.0259 15.3447 41.9585 cv
14.7593 41.8354 14.4673 42.938 14.4673 43.2524 cv
14.4673 43.9297 13.1895 44.0376 13.2207 43.4834 cv
13.2388 43.1533 13.8203 41.2656 13.8364 40.5732 cv
13.8477 40.0586 13.2959 39.5903 13.5591 39.0645 cv
13.7695 38.6436 13.8726 37.0659 13.938 36.8027 cv
14.2148 36.2954 15.4614 35.9253 14.8618 37.542 cv
14.6841 38.0205 14.4424 38.6362 14.9751 38.8491 cv
15.2827 38.9722 15.4805 38.96 15.9697 37.9111 cv
16.2935 37.2188 17.4941 37.542 16.9399 38.6958 cv
16.4629 39.6895 17.5664 39.5464 17.8076 39.6494 cv
18.0483 39.7529 18.0918 40.2271 18.0537 40.542 cv
18.0005 40.9858 18.5088 41.0835 18.8853 41.0044 cv
19.2612 40.9248 20.8501 40.082 21.8003 40.2603 cv
22.9019 40.4668 23.3672 40.6353 23.7119 40.7734 cv
24.0562 40.9106 24.6074 40.9106 24.4692 40.4287 cv
24.3315 39.9463 24.8511 39.0698 24.9194 38.7261 cv
24.9878 38.3813 25.6572 38.0205 25.5352 37.6484 cv
25.4131 37.2764 24.2285 36.8145 23.9526 36.7798 cv
23.6382 36.7407 23.3672 37.8125 23.2988 38.4321 cv
23.23 39.0518 22.271 39.0586 22.0654 38.5112 cv
21.7886 37.7729 21.373 37.7266 21.1885 36.7568 cv
21.0615 36.0908 20.4497 36.064 19.9873 35.6948 cv
19.165 35.0361 19.8369 34.5405 19.8027 34.2632 cv
19.7041 33.4575 18.873 33.355 18.5933 33.6816 cv
18.3022 34.021 17.8247 33.6338 17.5151 33.5996 cv
17.0566 33.5488 15.9077 33.7354 15.416 33.8013 cv
14.7231 33.8936 14.6333 34.2339 14.5342 34.5107 cv
14.3037 35.1572 12.9751 34.2676 12.9751 34.2676 cv
12.9751 34.2676 14.6958 30.6177 15.0469 29.5991 cv
15.3472 28.7236 16.811 26.5347 16.8936 26.3198 cv
17.1245 25.7192 17.9556 26.6431 17.1704 27.752 cv
16.6738 28.4521 15.2788 30.7949 14.8618 32.0464 cv
14.6074 32.8076 15.8672 32.7134 16.1084 32.231 cv
16.2656 31.917 17.4512 29.5464 18.002 28.5825 cv
18.5527 27.6187 19.8389 25.3931 20.0801 24.8418 cv
20.3174 24.2993 20.8667 23.7764 21.1426 23.2256 cv
21.4175 22.6753 22.3169 22.6274 21.9731 23.7798 cv
21.624 24.9512 19.939 27.6279 19.5259 28.2134 cv
19.1328 28.77 17.8862 30.9634 17.8174 31.3076 cv
17.748 31.6519 17.6567 32.1626 17.8633 32.231 cv
18.0698 32.2993 19.0195 31.9517 19.2949 31.5381 cv
19.5703 31.125 20.5796 28.4644 20.9238 27.9819 cv
21.2681 27.5005 22.0225 25.9238 22.4351 25.4424 cv
22.8486 24.9604 23.7998 25.6245 23.3589 26.3662 cv
22.3423 28.0747 21.2891 30.188 20.8652 30.7529 cv
20.3701 31.4136 20.9121 32.3691 21.6963 31.585 cv
22.3848 30.896 22.6919 30.0801 23.0356 29.46 cv
23.3799 28.8403 23.8911 28.0029 24.0977 27.6592 cv
24.3047 27.3149 25.1499 27.6147 25.0117 28.166 cv
24.8735 28.7168 24.1875 29.9248 23.7744 30.3374 cv
23.3618 30.751 23.1245 31.2622 22.918 31.6758 cv
22.7119 32.0889 22.918 32.4453 23.3491 32.7222 cv
23.8955 33.0737 24.1675 33.0483 24.5806 33.4614 cv
24.9937 33.8745 25.3989 34.3623 25.8125 34.5693 cv
26.2251 34.7759 26.8101 34.9209 27.0859 35.4722 cv
27.3613 36.0225 27.7744 37.021 28.4971 37.2964 cv
29.084 37.52 29.2544 37.7437 29.6333 38.2261 cv
30.1738 38.915 30.3911 39.0806 30.8726 39.0518 cv
31.457 39.0171 31.4229 39.7402 31.5264 40.291 cv
31.5908 40.6362 31.0098 41.668 31.0098 42.2188 cv
31.0098 42.7705 31.1313 44.3193 30.6655 44.5605 cv
30.3379 44.73 29.6104 44.3198 29.3218 44.5762 cv
29.0449 44.8228 28.3652 44.6958 28.1826 44.4229 cv
27.937 44.0532 27.4438 44.022 27.2285 44.2065 cv
26.8589 44.5234 26.3848 44.4409 26.1201 44.1763 cv
25.9355 43.9917 25.4429 44.1455 25.1401 44.2764 cv
24.2666 44.6558 24.4009 43.8716 24.4009 43.8716 cv
24.4009 43.8716 24.6426 43.188 24.9526 43.188 cv
25.2012 43.188 25.5708 43.3901 25.7778 43.3213 cv
25.9731 43.2559 26.2324 42.6768 26.5205 42.4512 cv
26.812 42.2227 27.1909 42.1401 27.0127 41.6812 cv
26.9063 41.4063 27.1763 41.1655 27.3828 41.0962 cv
27.7798 40.9644 28.2759 41.0044 28.4604 40.7886 cv
28.6016 40.623 28.5728 39.8472 28.0908 39.4341 cv
27.6084 39.0205 26.3174 39.3813 26.1816 40.3574 cv
26.0098 41.5967 24.8599 42.0962 24.127 42.2866 cv
23.1978 42.5273 22.8857 42.2876 22.1284 41.8745 cv
21.3711 41.4614 19.7705 41.4473 19.1357 41.686 cv
18.5771 41.897 18.2388 42.7593 18.7314 42.7593 cv
19.2236 42.7593 20.4038 42.9751 20.9321 42.9751 cv
21.6895 42.9751 22.3179 43.2524 22.604 43.8501 cv
22.9326 44.5342 22.9106 44.5322 21.9502 44.4009 cv
19.9624 44.1299 18.0166 44.5132 16.9146 44.8228 cv
16.5161 44.9351 15.1353 46.1519 14.9287 46.2544 cv
14.7803 46.3291 13.7803 46.8789 13.0815 47.4087 cv
12.3833 47.9395 12.4966 48.5415 12.6201 49.2095 cv
12.6514 49.3789 12.8467 50.5049 12.897 50.688 cv
12.897 50.688 13.5127 50.0103 13.6821 49.8105 cv
13.8516 49.6108 15.1138 48.8867 15.7603 48.1016 cv
16.3477 47.3887 18.0566 46.4067 18.584 46.1587 cv
20.0854 45.4531 21.7949 45.5239 22.1978 45.6724 cv
22.6011 45.8213 23.4214 46.4092 22.9087 46.9292 cv
22.396 47.4487 21.5166 48.1177 21.1504 48.3403 cv
20.7837 48.563 20.4126 48.29 20.1563 48.5508 cv
19.8999 48.8105 19.2036 49.4092 18.9004 49.3945 cv
17.9312 49.3486 16.7148 49.6421 16.3608 49.7183 cv
15.7139 49.8564 14.5132 50.2876 14.0513 50.6108 cv
13.5898 50.9341 13.1895 51.4731 13.1738 51.7959 cv
cp
26.0586 16.374 mo
26.0586 16.374 27.2651 17.6958 27.4902 17.6211 cv
27.7153 17.5459 28.0122 16.7144 28.3071 16.7715 cv
28.8755 16.8818 29.0776 17.8926 29.1528 18.2676 cv
29.2275 18.6426 29.7573 19.0171 29.958 19.2861 cv
30.2959 19.7368 31.084 22.7007 31.2344 23.4517 cv
31.3843 24.2026 32.2026 29.9224 32.5854 30.4316 cv
33.2607 31.3325 33.9746 31.3203 33.5234 29.9063 cv
32.9604 28.1426 32.7783 24.3926 33.0781 23.1167 cv
33.3779 21.8403 32.8706 19.457 32.5703 19.0068 cv
32.27 18.5562 32.4834 17.8174 32.7085 17.667 cv
32.9336 17.5171 33.8052 18.0825 33.9556 18.6831 cv
34.106 19.2837 34.2393 22.7495 34.3862 23.3013 cv
34.5366 23.8647 34.9272 24.1064 35.064 24.502 cv
35.2329 24.9912 35.062 25.478 35.2871 25.9287 cv
35.5127 26.3789 36.4243 27.9014 36.8188 28.335 cv
37.2803 28.8433 37.7886 29.0278 37.9141 28.6304 cv
38.0483 28.2046 36.4126 26.604 36.0376 24.6523 cv
35.7988 23.4097 35.25 22.438 35.25 21.6504 cv
35.085 21.2236 35.0996 20.8853 35.0176 20.6533 cv
34.918 20.3706 35.0278 18.4253 34.8022 17.9751 cv
34.5771 17.5249 32.9946 16.2871 32.6689 16.4272 cv
31.8813 16.7642 30.9048 15.8994 30.5229 15.5737 cv
30.2607 15.3506 29.0576 14.7075 29.0576 14.7075 cv
29.0576 14.7075 31.4395 13.7837 31.9697 13.542 cv
32.4526 13.3218 33.4014 13.0957 33.4014 13.0957 cv
33.4014 13.0957 32.7461 14.0723 33.2627 14.9424 cv
33.6465 15.5889 33.8984 16.584 34.3862 15.646 cv
35.0874 14.2974 34.7358 12.1489 35.6855 11.8145 cv
36.1216 11.6606 38.0122 12.1523 38.4624 12.5273 cv
38.6602 12.6924 39.4385 13.8413 39.9258 13.9155 cv
40.5947 14.0186 41.4473 14.1216 41.9673 14.1821 cv
42.895 14.2896 43.5874 15.2554 43.8057 15.8711 cv
44.4063 17.5596 43.0996 19.6997 43.0996 19.6997 cv
43.0996 19.6997 42.8237 20.334 42.915 21.5005 cv
43.0044 22.6445 42.8672 23.3765 43.3926 23.3765 cv
43.918 23.3765 43.918 21.125 44.2935 20.2988 cv
44.6685 19.4741 44.7681 18.7231 44.854 18.0371 cv
44.9463 17.2979 44.8369 14.7637 44.7617 14.3887 cv
44.6865 14.0127 44.1436 13.1694 43.168 13.0195 cv
42.1924 12.8691 40.6157 12.2686 40.9912 11.668 cv
41.3667 11.0679 43.8433 11.3672 44.2183 11.4424 cv
44.5933 11.5176 45.4487 11.728 45.6392 12.772 cv
45.8237 13.7876 45.7144 16.2178 45.6851 16.6509 cv
45.6392 17.3438 46.3662 16.5254 46.5625 16.6973 cv
46.9326 17.021 46.1123 18.4692 45.9624 19.7451 cv
45.812 21.0215 45.269 22.1753 45.7192 22.2505 cv
46.1694 22.3257 46.9199 20.2241 47.6709 18.4229 cv
48.4214 16.6216 48.2964 16.8008 48.2964 16.5757 cv
48.2964 16.3506 48.0771 15.6289 48.5273 15.3291 cv
48.9775 15.0288 50.4673 14.9131 51.3452 14.8208 cv
51.9873 14.7529 52.3506 14.4175 52.2681 14.1279 cv
52.1851 13.8389 50.9917 13.6831 50.6978 13.7124 cv
50.2363 13.7588 49.2852 13.9897 49.0547 13.7588 cv
48.8955 13.5991 49.2202 11.6343 49.2202 11.6343 cv
49.2202 11.6343 51.4268 11.9097 52.3198 12.0942 cv
52.8374 12.2021 56.1294 13.4878 57.0303 13.7876 cv
57.9312 14.0879 59.8628 15.4199 59.8628 15.4199 cv
59.8628 15.4199 59.0195 15.2271 58.5293 15.6553 cv
57.75 16.3374 56.9722 16.3374 56.2397 16.3374 cv
55.46 16.3374 54.0503 15.9458 53.2998 17.5977 cv
52.5493 19.2485 51.9111 21.7627 51.7607 23.3394 cv
51.6108 24.915 50.873 26.4814 51.2354 26.604 cv
51.7085 26.7642 52.3423 25.4976 52.6104 24.4272 cv
52.8022 23.6631 53.1626 22.752 53.3652 22.3794 cv
53.5908 21.9663 54.3398 21.3062 54.3398 22.2817 cv
54.3398 23.2573 53.7666 24.1499 53.3169 25.3511 cv
52.8662 26.5518 52.8076 27.1646 52.3242 27.5796 cv
51.5361 28.2554 51.2783 28.9312 51.874 28.8555 cv
52.3354 28.7969 53.0278 28.8892 52.751 29.3047 cv
52.4155 29.8081 51.874 30.0566 52.1738 30.3564 cv
52.4746 30.6572 53.311 30.521 53.3975 29.9976 cv
53.4839 29.4741 53.4497 28.4805 53.75 28.1802 cv
54.0503 27.8799 54.4214 28.2759 54.2754 28.7808 cv
54.0439 29.5815 54.8755 29.2124 54.5981 30.1362 cv
54.4902 30.4951 53.9375 31.1821 54.0127 31.4072 cv
54.0874 31.6323 54.876 32.1206 53.1123 32.3081 cv
52.5898 32.3633 50.2866 31.5942 49.6567 31.2446 cv
48.8257 30.7827 48.1362 30.0059 47.4863 29.7661 cv
46.7734 29.5039 45.3032 29.0742 45.085 28.9814 cv
44.647 28.7959 44.3687 28.4058 44.3687 28.105 cv
44.3687 27.8047 43.6182 26.979 43.0928 26.1538 cv
42.5674 25.3281 41.8169 24.3521 42.0425 22.5508 cv
42.2666 20.7495 42.2666 17.7476 41.5913 16.8467 cv
40.9165 15.9458 38.8521 14.5952 38.4395 13.8442 cv
38.0264 13.0947 36.9189 12.5576 36.2432 12.5576 cv
35.7686 12.5576 36.0908 15.5571 36.0752 16.3965 cv
36.0605 17.1807 36.4111 17.7222 36.6611 17.8564 cv
36.9111 17.9902 37.3184 18.7241 37.2803 19.376 cv
37.2344 20.1611 36.5078 19.8384 36.6753 20.8994 cv
36.7881 21.6128 37.1636 21.4253 37.4639 21.4629 cv
37.7324 21.4961 37.8618 22.6597 37.689 22.814 cv
37.4863 22.9932 37.2388 23.1514 37.314 23.5269 cv
37.3887 23.9019 37.5386 25.0273 37.9888 25.0273 cv
38.4395 25.0273 38.6646 24.3521 38.6646 23.9771 cv
38.6646 23.6021 38.8145 19.6987 38.9648 19.0234 cv
39.1147 18.3477 38.6646 17.6348 38.2891 17.1094 cv
37.9141 16.584 36.8535 15.9419 37.0034 15.2661 cv
37.1538 14.5903 37.3403 13.8765 37.5576 13.9727 cv
37.9731 14.1572 37.915 14.9482 38.0654 15.1738 cv
38.2158 15.3984 40.605 17.1045 41.1035 17.7847 cv
41.5166 18.3477 41.5288 21.0498 41.5166 21.5 cv
41.5024 22.0225 40.8486 22.3975 40.7739 21.9844 cv
40.6328 21.2134 41.0645 20.0527 40.3154 19.9995 cv
39.7905 19.9614 39.6406 20.7495 39.7153 21.9512 cv
39.7905 23.1514 40.0527 25.7031 40.353 25.9287 cv
40.6533 26.1538 41.0288 26.2666 41.1787 26.7163 cv
41.3286 27.1665 41.5605 27.8237 42.1172 27.9551 cv
42.7549 28.105 43.3179 28.2925 42.9048 28.5181 cv
42.2563 28.8721 41.3286 29.2656 40.8784 29.3057 cv
39.6025 29.418 38.647 30.3296 38.0195 30.7827 cv
37.1885 31.3833 36.5879 32.6299 36.2188 33.5068 cv
36.1533 33.6621 36.0049 34.5898 35.479 35.0776 cv
34.8574 35.6553 34.0293 36.0488 33.6323 36.2319 cv
33.1445 36.457 32.6978 37.0742 33.4482 36.9243 cv
34.1987 36.7739 35.6621 35.9858 35.812 36.8486 cv
35.9482 37.6323 34.5742 37.6372 34.0859 37.7119 cv
33.6167 37.7847 32.6226 38.3877 33.1108 38.8755 cv
33.4556 39.2202 34.4458 38.2778 35.1367 38.3125 cv
35.8872 38.3496 36.8257 38.8003 37.5015 38.8755 cv
38.1768 38.9502 39.5444 39.0435 40.0908 38.8755 cv
40.5786 38.7256 42.5674 37.3745 43.5806 37.4497 cv
44.3325 37.5049 45.1548 38.1382 45.8315 38.4624 cv
46.6943 38.8755 47.6128 39.4565 49.5645 39.4185 cv
51.5288 39.3809 52.8408 38.6074 53.0278 39.0952 cv
53.209 39.5649 52.7886 39.6694 52.751 40.1577 cv
52.7144 40.6304 52.8374 41.0405 52.6123 41.2656 cv
52.3267 41.5513 51.5903 41.2139 51.3652 40.9883 cv
51.1406 40.7637 50.8608 40.4136 50.5605 40.4136 cv
50.2603 40.4136 49.2466 40.4888 49.3218 40.7144 cv
49.397 40.9395 49.6968 41.0894 50.3726 41.0894 cv
50.8979 41.0894 51.874 42.3276 52.1738 42.4775 cv
52.4746 42.6284 53.2998 43.2295 53.1499 43.5303 cv
53 43.8301 52.812 43.8301 52.5493 43.7173 cv
52.2041 43.5693 52.1567 43.1772 51.7808 43.2524 cv
51.4058 43.3276 51.0479 43.9419 50.5981 44.0923 cv
50.0728 44.2686 49.0376 44.3511 48.4966 44.1675 cv
47.7944 43.9297 47.2559 43.6167 46.8823 43.1543 cv
46.4395 42.605 46.0947 41.8403 45.5688 41.0142 cv
45.0435 40.1885 44.2935 39.251 43.8433 39.3262 cv
43.3926 39.4009 43.2427 40.3765 43.3179 41.2397 cv
43.3984 42.1646 43.8433 42.7412 43.6934 43.1172 cv
43.543 43.4922 42.9683 44.0371 42.9424 44.6558 cv
42.9048 45.5562 43.5151 45.1553 43.5151 45.5313 cv
43.5151 45.9063 43.4155 46.499 43.1147 46.4238 cv
42.8145 46.3486 42.2217 46.2495 42.1548 46.7197 cv
42.0796 47.2451 42.3877 47.125 42.7925 47.208 cv
43.1768 47.2861 43.1631 47.8613 43.2378 48.0864 cv
43.3125 48.312 43.3784 48.5928 43.7163 48.7422 cv
44.2773 48.9917 44.3696 48.4185 44.9619 48.5176 cv
45.5303 48.6128 45.6162 48.7446 45.978 48.856 cv
46.4653 49.0059 47.1514 48.835 47.3018 48.6099 cv
47.4521 48.3843 47.333 47.7705 47.1074 47.4702 cv
46.8823 47.1699 46.7002 46.5562 47.0703 46.4941 cv
47.5205 46.4194 47.7808 46.9995 47.8555 47.2246 cv
47.9307 47.4492 48.2256 47.917 48.5024 48.2407 cv
48.7461 48.5249 49.0239 48.5977 49.3589 48.9336 cv
49.6968 49.271 49.772 49.5342 49.8472 49.7969 cv
49.9502 50.1577 50.7856 50.2847 51.0107 50.5845 cv
51.2354 50.8848 51.2354 51.4854 51.6108 52.0107 cv
51.9863 52.5361 52.3994 52.8735 52.0239 53.3247 cv
51.6484 53.7749 50.6353 52.5742 49.9224 51.8232 cv
49.2998 51.168 48.4214 50.1348 47.896 50.1348 cv
47.3701 50.1348 47.3701 50.6973 47.5957 51.748 cv
47.8208 52.7993 47.9336 53.3994 48.0835 53.4746 cv
48.2334 53.5493 48.4907 53.4297 48.6406 53.5049 cv
48.791 53.5796 49.3218 54.6006 49.9976 55.0503 cv
50.6729 55.501 51.4287 55.8545 52.1045 55.6289 cv
52.7798 55.4038 52.5493 54.8257 52.6992 54.6758 cv
52.8496 54.5249 53.6753 54.2251 54.0503 54.2251 cv
54.4253 54.2251 54.5063 53.0376 54.5063 52.812 cv
54.5063 52.5874 54.1997 52.2354 54.2749 51.9346 cv
54.3501 51.6343 54.7368 51.2993 54.7368 51.1494 cv
54.7368 50.999 54.7959 50.1396 55.0137 49.5796 cv
55.2764 48.9038 55.7012 47.7329 55.5508 46.6826 cv
55.4663 46.083 55.4766 45.519 55.7012 44.7681 cv
55.9268 44.0171 56.0459 43.7065 55.9268 43.042 cv
55.7988 42.3281 55.6758 41.9717 55.6758 41.5889 cv
55.6758 41.25 55.1523 40.7583 55.2446 40.1108 cv
55.2876 39.814 55.5913 38.9766 55.6138 38.3867 cv
55.6606 37.1865 55.5547 36.7637 55.3369 36.2627 cv
55.0293 35.5547 54.5288 34.8477 54.2749 34.7539 cv
53.5615 34.4917 53.75 34.1094 53.4497 33.8838 cv
53.2598 33.7417 52.9619 33.2832 53.3374 33.2085 cv
53.7124 33.1333 53.9751 33.2832 54.5005 33.0962 cv
55.0659 32.894 55.0264 32.2705 55.3267 32.2705 cv
55.626 32.2705 56.584 32.4917 56.4917 32.7222 cv
56.3765 33.0093 56.1558 33.7222 57.2773 33.0918 cv
57.6035 32.9077 57.8032 32.6831 58.1782 32.9087 cv
58.5532 33.1333 58.2153 33.5088 57.9907 33.7339 cv
57.7651 33.959 56.9775 34.1846 56.9775 34.335 cv
56.9775 34.4844 56.8271 34.8604 57.2783 34.8604 cv
57.728 34.8604 58.2905 34.5225 58.4409 34.3721 cv
58.5913 34.2217 58.6953 33.8838 59.0039 33.8838 cv
59.3794 33.8838 59.229 34.1846 59.9043 34.1094 cv
60.5801 34.0342 60.8428 33.7339 61.1426 32.5332 cv
61.4434 31.3325 61.7754 28.9937 61.9258 27.6426 cv
62.0757 26.291 62.1582 25.292 62.2026 25.0254 cv
62.2646 24.6558 62.4561 24.2773 62.6069 24.1274 cv
62.7563 23.9771 63.207 22.9263 63.5073 22.7007 cv
63.8071 22.4756 64.4829 22.5508 64.1826 23.2261 cv
63.8828 23.9019 63.4312 24.2251 63.3867 24.7275 cv
63.3462 25.1826 63.6577 25.8535 63.5825 26.2285 cv
63.5073 26.604 62.7563 26.6787 62.8315 27.2793 cv
62.9067 27.8799 63.0942 29.418 63.0942 29.7939 cv
63.0942 30.1689 62.3911 30.3188 62.5415 30.8447 cv
62.6919 31.3696 62.8315 31.7075 62.6069 32.1577 cv
62.3813 32.6084 62.001 33.376 61.9258 33.6763 cv
61.8506 33.9771 61.7471 35.4307 61.4639 35.5547 cv
60.9712 35.77 60.2627 35.5547 59.9043 35.8354 cv
59.6094 36.0669 59.4546 36.5864 59.0791 36.5864 cv
58.7036 36.5864 58.4033 36.811 58.103 37.0366 cv
57.8032 37.2622 57.5781 37.9746 58.0278 37.7495 cv
58.478 37.5239 59.4917 36.811 59.8672 36.811 cv
60.2422 36.811 60.73 36.811 60.9556 36.7363 cv
61.1807 36.6616 61.9316 36.3608 62.3062 36.0605 cv
62.6816 35.7603 62.8486 35.1201 62.8486 34.9697 cv
62.8486 34.8198 63.6187 34.8848 63.6187 35.1851 cv
63.6187 35.4854 63.8447 36.4736 63.6948 36.7739 cv
63.5444 37.0742 63.0029 37.5249 63.0029 37.5249 cv
63.0029 37.5249 61.9316 37.9365 62.0068 38.3125 cv
62.0811 38.6875 62.9443 38.5 63.3945 38.3496 cv
63.8447 38.1992 64.5576 37.6372 64.708 37.7871 cv
64.8584 37.9365 64.2207 38.7627 64.4453 39.5137 cv
64.6709 40.2637 66.0967 40.4136 66.6216 40.1885 cv
67.1475 39.9634 67.2119 39.6782 67.4365 39.603 cv
67.6621 39.5283 68.4468 39.4531 68.8218 39.603 cv
69.1973 39.7534 69.7744 39.9258 69.7744 40.1509 cv
69.7744 40.3765 69.0234 40.564 69.1733 40.9395 cv
69.3242 41.3149 69.5869 41.3149 70.0371 41.2397 cv
70.4873 41.1646 71.0122 41.3149 71.6128 41.4648 cv
72.2134 41.6147 74.0869 42.1431 74.856 42.4204 cv
75.2861 42.5752 75.749 43.2173 75.749 44.2686 cv
75.749 45.3198 75.7104 46.4688 75.4106 46.4858 cv
74.856 46.5161 74.8032 45.1436 74.4277 44.3931 cv
74.0234 43.5845 73.0762 43.0044 72.9268 43.1543 cv
72.7769 43.3047 72.5142 43.5674 73.0391 44.1675 cv
73.5645 44.7681 73.8271 45.0684 73.8271 45.519 cv
73.8271 45.9692 73.8892 46.3174 73.9634 46.5161 cv
74.0562 46.7627 74.5068 47.1821 74.4277 47.5078 cv
74.3179 47.9629 73.2788 47.856 72.9785 47.5933 cv
72.7451 47.3896 72.814 45.3687 72.5894 44.9937 cv
72.3638 44.6177 71.6509 43.1919 71.0498 42.8916 cv
70.4502 42.5908 69.8115 42.8916 70.0371 43.5674 cv
70.2622 44.2427 70.4121 45.1436 70.7881 45.3687 cv
71.1626 45.5942 71.5313 46.1162 71.5313 46.1162 cv
71.4629 46.5693 li
71.4629 46.5693 71.4629 47.6201 71.6128 47.9209 cv
71.7632 48.2212 72.2134 48.4458 72.2886 48.6704 cv
72.3638 48.896 72.7393 50.022 73.1138 50.5474 cv
73.4893 51.0728 73.3457 51.2886 73.8711 51.2886 cv
74.3965 51.2886 74.5552 50.8706 74.7056 50.3452 cv
74.8555 49.8198 76.4575 49.9331 76.4575 49.9331 cv
76.4575 49.9331 75.501 54.3105 75.0405 55.4438 cv
74.8691 55.8677 72.4248 60.751 71.5376 62.1807 cv
70.6187 63.6646 67.0996 67.9648 66.3281 68.5132 cv
65.7646 68.915 63.4014 70.9497 63.3267 71.0996 cv
63.2515 71.25 57.2827 74.6152 56.9072 74.8403 cv
56.5322 75.0659 51.4448 76.7842 50.3193 76.9336 cv
49.1934 77.0845 43.9585 77.4683 43.4307 77.4175 cv
42.5913 77.3345 38.8174 76.9316 37.6499 76.687 cv
36.4648 76.4409 28.5024 73.5063 27.9521 73.1777 cv
27.1909 72.7236 20.5864 67.3999 20.2861 67.1743 cv
19.9858 66.9492 15.0469 60.0605 14.7905 59.4624 cv
14.5654 58.937 12.7412 54.8618 12.666 54.3364 cv
12.5908 53.8105 11.0786 47.4258 11.0034 46.9019 cv
10.9282 46.3765 11.0166 41.8428 11.0957 40.9429 cv
11.186 39.916 11.8691 36.3359 12.0195 35.5854 cv
12.1694 34.835 13.4453 31.3135 14.4204 29.2124 cv
15.397 27.1108 16.7856 25.4243 18.3618 23.5479 cv
19.938 21.6714 24.4517 17.7617 24.8271 17.2358 cv
25.2021 16.7104 26.0586 16.374 26.0586 16.374 cv
cp
47.6567 21.1587 mo
46.3804 24.7612 46.23 24.8735 46.3052 26 cv
46.3804 27.1255 47.0933 27.2007 47.5435 26.5254 cv
47.9946 25.8496 48.1992 25.3096 48.7822 25.249 cv
49.1807 25.2085 49.2559 25.8086 49.1807 26.5591 cv
49.1055 27.3096 49.6826 26.7881 50.0586 26.2627 cv
50.4336 25.7373 50.6104 24.0591 50.6855 23.1587 cv
50.7607 22.2583 50.9292 21.5635 50.9746 20.8242 cv
51.0215 20.0854 51.1655 19.1616 50.79 19.1616 cv
50.415 19.1616 50.0981 19.3003 50.0981 18.9771 cv
50.0981 18.4736 51.3774 17.3672 51.8066 17.0376 cv
52.4067 16.5757 51.9463 15.6392 51.2061 16.0679 cv
50.3286 16.5757 48.9321 17.5562 47.6567 21.1587 cv
cp
23.8208 18.377 mo
21.7642 20.1147 li
21.7642 20.1147 23.1123 19.6392 23.3589 20.1934 cv
23.7231 21.0127 24.3438 21.4248 25.021 21.1011 cv
25.6152 20.8179 26.1357 20.9927 26.4375 21.6094 cv
26.7837 22.3169 27.1118 22.646 27.0356 23.3291 cv
26.8979 24.5688 25.8311 28.3208 26.5537 30.9717 cv
26.918 32.3091 26.7603 32.8989 28.2402 34.7236 cv
29.0225 35.688 30.6157 36.9614 30.8223 37.2368 cv
31.0288 37.5122 31.0977 37.9937 31.373 37.856 cv
31.6484 37.7188 31.3389 36.5483 30.7881 35.9282 cv
30.2368 35.3091 27.6553 33.5879 27.3799 31.1782 cv
27.1045 28.7681 27.4487 27.2539 27.7241 26.6338 cv
27.9995 26.0142 28.0596 24.8467 28.0596 24.502 cv
28.0596 24.502 28.0547 23.7295 28.5215 23.8247 cv
28.8789 23.8979 29.0142 25.1899 29.0142 25.6719 cv
29.0142 26.1538 29.1011 27.0474 29.1011 27.0474 cv
29.1011 27.0474 29.5142 28.0107 29.5142 28.2866 cv
29.5142 28.5615 29.1011 29.5254 29.2388 29.9385 cv
29.3765 30.3516 29.9272 30.6963 30.1343 31.0405 cv
30.3408 31.3848 29.9961 31.9355 30.2715 32.2793 cv
30.5469 32.624 31.373 33.8628 31.855 34.001 cv
32.3369 34.1387 33.8188 34.6602 34.0942 34.3843 cv
34.3696 34.1094 34.9883 33.3203 33.9556 33.0454 cv
32.9229 32.77 31.3047 32.1416 30.8911 30.6963 cv
30.478 29.2505 30.5957 26.2568 28.7373 22.4702 cv
26.8784 18.6831 25.6675 19.0869 25.021 18.8384 cv
24.4209 18.6074 23.8208 18.377 23.8208 18.377 cv
cp
22.6636 49.4175 mo
22.9277 49.2524 23.0171 49.1641 23.4141 49.23 cv
23.8105 49.2964 25.812 49.8042 27.167 49.6055 cv
28.5215 49.4072 30.0127 48.7222 30.2441 48.292 cv
30.4751 47.8623 30.9033 47.4395 31.1021 47.208 cv
31.2998 46.9766 31.2222 46.2261 30.9575 46.127 cv
30.6938 46.0278 30.063 45.7246 29.7324 46.0552 cv
29.4023 46.3853 29.0874 46.3765 28.7236 46.3433 cv
28.3604 46.3101 27.5435 46.3877 26.6787 46.604 cv
25.9883 46.7759 24.2021 47.4663 23.6016 47.8042 cv
23.0107 48.1367 22.4492 48.7695 22.2505 48.9673 cv
22.0522 49.1655 22.3989 49.583 22.6636 49.4175 cv
cp
16.2778 57.5073 mo
16.6016 57.6792 16.2432 58.5835 16.6377 58.9546 cv
16.9253 59.2246 17.4185 58.5386 17.5151 57.8926 cv
17.6348 57.0903 17.2266 55.7988 17.623 55.2139 cv
18.019 54.6284 18.3604 54.2632 18.396 53.6436 cv
18.4321 53.0234 18.8809 52.5439 19.1689 52.1655 cv
19.457 51.7871 20.2329 51.1592 20.3765 50.7803 cv
20.52 50.4014 20.2529 50.0884 19.7485 50.2261 cv
19.2441 50.3633 18.2505 51.1958 17.6797 51.6265 cv
17.3892 51.8467 16.0215 53.4912 15.8843 53.7358 cv
15.5454 54.3364 16.2749 54.5386 15.8472 55.291 cv
15.688 55.5698 15.7461 55.9746 15.6006 56.2148 cv
15.2046 56.8687 15.6299 57.4043 16.2778 57.5073 cv
cp
18.9004 61.4941 mo
19.52 60.8394 19.7627 59.6074 20.3135 58.7471 cv
20.8643 57.8857 21.1396 57.6108 21.5186 57.4038 cv
21.897 57.1973 22 56.9565 21.8276 56.5776 cv
21.6968 56.2891 21.8276 56.1992 22.4478 55.855 cv
23.0674 55.5107 23.4507 55.394 23.6572 54.7056 cv
23.7949 54.2466 24.792 52.5054 24.396 52.3506 cv
24 52.1948 23.5879 51.9092 23.6572 51.5654 cv
23.7261 51.2207 24.3066 51.2075 24.6167 51.0352 cv
24.9263 50.8638 24.8228 50.6567 24.5132 50.4502 cv
24.2031 50.2437 23.377 50.2095 22.9639 50.2778 cv
22.5508 50.3467 22.3442 50.8638 21.9658 51.2075 cv
21.5869 51.5522 21.2979 51.3066 20.8296 51.9307 cv
20.4165 52.4814 20.21 53.9619 20.0034 54.4775 cv
19.7969 54.9937 19.6938 54.8564 19.4868 55.2007 cv
19.2808 55.5449 19.9004 55.4761 20.0723 55.855 cv
20.2441 56.2334 20.2451 56.522 19.9004 56.543 cv
18.7617 56.6143 19.4468 57.0796 19.3779 57.6309 cv
19.3154 58.1274 18.2373 60.2515 18.0688 60.7554 cv
17.9316 61.1685 18.4185 61.5977 18.9004 61.4941 cv
cp
19.7319 62.7871 mo
19.6284 63.5449 21.1206 63.2031 21.6719 63.2031 cv
22.2222 63.2031 22.6719 63.7627 23.3257 64.1074 cv
23.979 64.4517 24.2549 64.7612 24.5645 65.1743 cv
24.8745 65.5879 26.8813 66.8696 27.25 67.0332 cv
28.1797 67.4463 28.0415 66.9297 27.5254 66.3101 cv
26.9009 65.561 25.3979 63.3164 24.9502 62.9722 cv
24.6602 62.749 24.2417 61.2622 23.5186 61.125 cv
22.7959 60.9868 23.1494 61.3096 22.0869 60.9399 cv
21.0249 60.5703 20.4839 60.5942 20.4707 60.9858 cv
20.4561 61.417 20.8628 61.6958 20.5371 61.8354 cv
20.147 62.0024 19.9038 62.1675 19.7319 62.7871 cv
cp
27.6509 71.9253 mo
27.8706 72.0576 29.6191 73.0684 30.1011 73.3779 cv
30.583 73.6885 34.0659 75.6035 35.2021 75.8101 cv
36.3384 76.0171 35.6343 74.4287 34.9966 73.9785 cv
34.2461 73.4531 33.3726 73.271 32.1333 72.686 cv
30.894 72.1006 29.5215 71.5596 29.2144 71.4482 cv
28.1987 71.0786 27.6509 71.9253 27.6509 71.9253 cv
cp
25.7422 69.2866 mo
25.7607 68.5757 24.8164 68.1563 24.375 67.9292 cv
22.8506 67.1436 23.5645 66.4956 22.9897 66.0352 cv
22.4727 65.6221 22.0874 67.4248 22.2256 67.665 cv
22.3628 67.9063 22.3643 68.6313 22.7432 68.8374 cv
23.1221 69.0439 23.6982 69.6548 23.9746 69.8838 cv
24.1846 70.0586 25.376 70.7515 25.5142 70.9922 cv
25.5142 70.9922 25.7241 69.9976 25.7422 69.2866 cv
cp
34.5562 68.1904 mo
34.8252 68.0894 35.4336 67.9136 35.8848 67.8042 cv
36.0918 67.7539 36.4526 67.8052 36.5879 67.6362 cv
36.7227 67.4673 37.167 66.7915 37.3013 66.4546 cv
37.4365 66.1177 37.7065 65.9155 38.1113 65.7124 cv
38.5161 65.5098 38.5645 64.9805 38.7183 64.7339 cv
38.897 64.4497 39.6406 64.6206 39.5898 64.0342 cv
39.5391 63.4473 38.5381 63.585 38.0654 63.6187 cv
37.5938 63.6519 37.0034 63.8955 36.3564 64.1729 cv
35.8237 64.4014 35.3887 64.583 35.0176 64.8188 cv
34.6465 65.0552 34.2412 65.3682 34.1401 65.604 cv
34.0391 65.8403 33.9956 66.1514 33.7256 66.3535 cv
33.4561 66.5557 32.9497 66.6577 32.6797 66.3535 cv
32.4102 66.0498 32.4248 65.6777 32.1543 65.5425 cv
31.8848 65.4077 31.5693 65.3271 31.4653 65.1387 cv
31.3198 64.875 31.3232 64.6807 31.1279 64.5991 cv
30.9102 64.5083 30.6592 64.5845 30.5547 64.2617 cv
30.4302 63.8799 30.4907 63.5669 30.1689 63.249 cv
29.7876 62.8735 29.6992 62.0444 29.4297 61.9102 cv
29.1597 61.7749 28.645 61.6719 28.645 61.4019 cv
28.645 61.0908 28.834 60.7197 29.1709 60.6519 cv
29.541 60.5776 29.4751 59.9097 29.5767 59.6406 cv
29.6772 59.3701 30.521 58.7295 31.1279 58.5605 cv
31.7358 58.3921 32.0391 58.2236 32.2075 58.3247 cv
32.376 58.4258 32.1738 58.9653 32.376 59.0669 cv
32.5786 59.1675 34.1309 59.5386 34.5352 59.3701 cv
34.9404 59.2012 35.7837 58.5605 36.2896 58.5942 cv
36.7959 58.6279 37.0322 58.8306 36.8633 59.1675 cv
36.6943 59.5054 35.9189 59.8091 35.7163 60.146 cv
35.5137 60.4834 35.0752 60.8882 35.0752 60.8882 cv
35.0752 60.8882 34.7041 60.8203 34.2993 60.7871 cv
33.8945 60.7534 32.8149 60.855 32.5112 61.6646 cv
32.2075 62.4741 32.3428 63.0137 32.4102 63.25 cv
32.478 63.4858 32.6465 64.1606 32.7139 64.3296 cv
32.7813 64.498 33.2534 64.498 33.4561 64.3633 cv
33.6582 64.228 33.9312 63.7036 33.8633 63.4336 cv
33.7959 63.1636 33.4937 62.0483 33.9556 61.8174 cv
34.2886 61.6509 34.8662 61.7998 34.833 62.0024 cv
34.7993 62.2041 34.8862 62.5781 35.1567 62.5103 cv
35.4258 62.4424 35.9482 62.2793 36.2188 62.2793 cv
36.4883 62.2793 37.1777 62.5391 37.4194 62.5103 cv
38.5879 62.3687 38.6875 61.9512 38.8047 61.6333 cv
39.1274 60.7554 39.8301 59.96 40.6055 60.2471 cv
41.3438 60.5205 41.6875 60.0112 42.0244 59.8765 cv
42.3618 59.7407 42.5645 59.8428 42.8682 60.0786 cv
43.1719 60.3149 43.5762 61.4619 43.9473 62.103 cv
44.3184 62.7437 44.8276 63.2827 45.1313 63.4517 cv
45.4346 63.6201 46 63.6685 46.1006 63.8027 cv
46.2021 63.938 46.8013 64.4023 47.2061 64.5039 cv
47.6108 64.605 48.9551 64.2788 49.1572 64.2788 cv
49.3599 64.2788 49.9419 64.6162 50.2461 64.9541 cv
50.5493 65.2915 50.6143 65.3188 50.8833 65.5547 cv
51.1538 65.7905 51.5552 65.9634 51.5215 65.5923 cv
51.4878 65.2217 51.3638 64.1997 50.9585 63.8286 cv
50.5542 63.4575 50.3296 63.0645 50.0259 63.0645 cv
49.7227 63.0645 49.0186 62.79 48.8574 62.7397 cv
48.2715 62.5562 47.7607 62.2539 47.5435 62.064 cv
47.2437 61.8018 47.437 61.145 47.4561 60.8882 cv
47.4863 60.4785 47.3643 59.8071 47.1626 59.3237 cv
46.7012 58.2153 46.7012 57.7998 46.5679 57.2988 cv
46.4092 56.7002 46.5186 55.8564 46.1475 55.7207 cv
45.7764 55.5869 44.9004 55.3984 44.2998 55.4907 cv
43.6255 55.5942 43.3442 55.7056 43.0073 55.5371 cv
42.6694 55.3677 42.3887 55.0078 41.7139 55.0747 cv
41.0391 55.1426 40.9341 55.0254 40.6978 54.8901 cv
40.4619 54.7554 40.1113 54.7217 39.7744 54.8901 cv
39.437 55.0591 39.1909 55.4229 39.4951 55.4907 cv
39.7979 55.5581 40.1694 55.5244 40.3379 55.7266 cv
40.5063 55.9292 40.6079 56.2329 40.8438 56.4688 cv
41.0801 56.7056 41.417 56.9414 41.3164 57.0767 cv
41.2153 57.2109 40.7769 57.4478 40.6753 57.3799 cv
40.5742 57.3125 40.0186 56.9414 39.5806 56.7056 cv
39.1416 56.4688 38.7129 56.0811 38.2969 56.2202 cv
38.0254 56.3105 37.9785 56.9849 37.7427 57.1528 cv
37.5059 57.3218 37.1313 57.4707 36.9302 57.2456 cv
36.7266 57.0142 36.5469 56.1919 36.311 56.0913 cv
36.0747 55.9893 35.4614 55.7998 34.7866 56.1372 cv
34.1118 56.4746 33.6997 56.5327 33.4014 56.5991 cv
32.9858 56.6909 32.478 56.7373 32.0156 56.876 cv
31.6499 56.9854 31.1387 57.3843 30.2148 57.3843 cv
29.5703 57.3843 28.3306 57.3022 28.229 57.7075 cv
28.1279 58.1123 27.8892 58.3584 28.0244 58.6611 cv
28.1597 58.9653 27.6875 59.5723 27.2148 59.1675 cv
26.7427 58.7632 26.9448 57.7505 27.0464 57.4136 cv
27.147 57.0767 27.7744 54.6396 28.0444 54.3364 cv
28.314 54.0327 28.9673 52.7578 29.4761 52.4429 cv
29.8354 52.2202 30.3521 52.2524 30.4873 52.5894 cv
30.6221 52.9268 30.6558 53.9053 30.521 54.0737 cv
30.3862 54.2422 30.1162 54.1074 29.7788 54.3101 cv
29.4414 54.5122 28.8882 55.2793 28.9219 55.583 cv
28.9556 55.8867 28.834 56.064 29.3403 56.0303 cv
29.8462 55.9966 29.9873 55.8511 30.1226 55.9521 cv
30.2578 56.0537 30.7002 56.2012 31.1387 55.9985 cv
31.5767 55.7964 32.3428 55.7944 32.2754 54.6138 cv
32.2075 53.4331 32.1401 52.9268 32.3428 52.4546 cv
32.5449 51.9819 32.8823 51.4761 32.376 50.9365 cv
31.8701 50.3965 31.5024 49.8467 30.8306 49.7793 cv
29.5586 49.6523 29.9893 50.3188 29.7529 50.4878 cv
29.5166 50.6567 28.895 50.8354 28.3213 50.7339 cv
27.748 50.6328 27.1172 50.6367 26.8438 51.0571 cv
26.5122 51.5674 26.27 51.7793 26.2031 52.2183 cv
26.1357 52.6567 25.7979 53.3652 25.4941 53.7026 cv
25.1904 54.04 25.1514 54.293 24.9966 54.7979 cv
24.8472 55.2827 24.707 56.0977 24.6729 56.3682 cv
24.6396 56.6382 25.292 58.7632 25.5278 59.4038 cv
25.7646 60.0449 26.1011 61.4277 26.3716 61.6646 cv
26.6411 61.9004 26.9111 61.8667 27.2148 61.7314 cv
27.5186 61.5972 27.9233 61.5293 28.0918 61.8667 cv
28.2603 62.2041 28.1367 63.3872 28.1826 63.6646 cv
28.2383 63.9976 28.564 64.498 28.7329 64.667 cv
28.9019 64.8354 28.8003 65.0381 28.9351 65.3071 cv
29.0703 65.5776 29.2729 65.6782 29.6099 65.8135 cv
29.9478 65.9487 30.2847 66.0161 30.4194 66.3198 cv
30.5547 66.623 30.5879 66.8931 30.9932 67.1626 cv
31.3979 67.4331 31.8701 67.7705 31.8701 68.1079 cv
31.8701 68.4448 31.4316 68.6475 30.8921 68.8159 cv
30.3521 68.9849 29.5068 69.0215 29.3403 69.3218 cv
29.1709 69.6255 28.98 69.8853 29.4185 70.0205 cv
29.8574 70.1553 31.0859 70.1401 31.8955 69.8701 cv
32.7046 69.6006 33.6045 69.2754 33.7598 69.0522 cv
33.9097 68.8364 34.2861 68.292 34.5562 68.1904 cv
cp
35.4336 70.3145 mo
34.7192 70.0073 33.7002 70.6338 33.5645 70.9312 cv
33.3345 71.439 33.9341 71.9932 34.627 72.2236 cv
35.1675 72.4043 35.9663 72.4546 36.2432 71.9468 cv
36.5469 71.3906 35.9282 70.5283 35.4336 70.3145 cv
cp
58.0425 53.9512 mo
57.6382 54.6245 57.9385 54.5962 58.4771 55.0225 cv
59.0195 55.4512 58.8481 56.1006 58.8813 56.5718 cv
58.915 57.0435 59.5269 57.2075 59.7964 57.4102 cv
60.0664 57.6118 60.2876 58.021 60.625 58.1895 cv
60.9619 58.3579 61.3213 58.3203 61.6914 58.7241 cv
62.0625 59.1284 61.9204 59.6489 62.1836 60.1382 cv
62.5249 60.7715 63.061 60.5767 63.1934 61.0518 cv
63.271 61.3306 63.0586 61.7256 63.0249 61.9951 cv
62.9912 62.2646 63.2676 63.4399 63.2676 64.3159 cv
63.2676 65.1919 62.5869 65.9697 62.5195 66.4746 cv
62.4521 66.98 62.6543 66.9131 62.8896 67.3843 cv
63.1255 67.8564 61.8315 67.9604 61.6963 68.1284 cv
61.562 68.2969 60.8438 69.0547 60.6733 69.1519 cv
60.3501 69.3364 59.4727 70.4229 59.4263 70.8843 cv
59.3335 71.8081 55.4551 71.9468 55.5933 74.1172 cv
55.6357 74.7842 54.623 74.5796 53.2842 75.1792 cv
52.3765 75.5864 50.4858 74.7173 49.9131 74.7173 cv
49.3403 74.7173 45.0181 75.0874 44.4634 75.041 cv
44.0225 75.0044 43.3145 74.3179 43.0703 74.1846 cv
42.5342 73.8926 42.1582 73.6221 41.2822 73.4536 cv
40.4063 73.2852 39.9561 73.1494 39.8887 72.9478 cv
39.8213 72.7451 40.0869 72.4033 40.1538 72.1338 cv
40.2207 71.8647 40.0186 71.4937 39.8506 71.3252 cv
39.6821 71.1567 39.5879 70.2935 39.5879 69.9829 cv
39.5879 69.4946 40.0181 68.6948 40.2822 68.144 cv
40.5464 67.5933 40.8574 67.5537 41.127 67.3184 cv
41.396 67.083 42.2705 66.8652 42.1772 66.4927 cv
42.1104 66.2231 41.8071 65.8403 41.437 65.604 cv
41.0337 65.3472 40.334 65.6919 39.728 65.9272 cv
39.1221 66.1631 38.2002 67.0098 38.0654 67.313 cv
37.9312 67.6162 37.6792 68.4155 37.4336 68.9565 cv
37.1899 69.4927 37.4336 70.3213 37.7744 71.2954 cv
37.8789 71.5952 37.9644 72.1338 38.0654 72.5386 cv
38.1665 72.9419 38.5708 73.2119 38.8403 73.4814 cv
39.1094 73.7505 39.1045 74.1289 39.1392 74.3647 cv
39.1724 74.6006 38.8843 75.876 39.1875 76.3145 cv
39.4907 76.752 40.686 76.7788 40.5518 76.5083 cv
40.4419 76.2896 40.7373 74.7202 41.4771 74.7202 cv
42.9878 74.7202 43.0234 76.2295 43.6694 76.46 cv
43.8115 76.5112 44.897 76.437 46.8647 76.334 cv
49.5771 76.1924 52.5669 75.6338 52.6841 75.5947 cv
52.8857 75.5273 55.4121 74.4614 55.5474 74.394 cv
55.6816 74.3271 57.3018 73.6865 58.5483 73.1475 cv
59.7949 72.6089 61.6411 71.6846 61.4736 71.4233 cv
60.9194 70.5615 61.4272 69.6797 61.6963 69.4438 cv
62.0659 69.1211 63.6006 68.23 63.792 68.0796 cv
64.438 67.5718 64.9121 66.959 65.0317 66.6431 cv
65.1509 66.3262 65.1714 65.7793 65.2944 65.5171 cv
65.4048 65.2808 66.4087 65.2871 66.3076 65.7583 cv
66.2153 66.188 66.8613 66.4976 67.1846 66.728 cv
67.4448 66.9146 68.0532 66.0317 68.1548 65.897 cv
68.5703 65.3433 68.0571 64.4849 66.9453 64.6533 cv
66.1104 64.7798 66.5283 63.7637 66.4951 63.5283 cv
66.4614 63.2915 65.7739 63.2031 65.707 62.7026 cv
65.6841 62.5322 65.459 62.0376 65.2568 61.8018 cv
65.0547 61.5664 64.5811 61.3579 64.5811 61.0889 cv
64.5811 60.8511 64.9268 60.7842 64.9941 60.4136 cv
65.061 60.043 64.8735 59.5078 64.8062 59.1382 cv
64.7393 58.7666 64.5112 57.2798 64.8813 57.1113 cv
65.252 56.9429 65.3472 57.4155 65.4819 57.7866 cv
65.6162 58.1567 66.165 58.2476 66.2324 58.0112 cv
66.2998 57.7759 66.2925 57.0869 66.1572 56.5479 cv
66.0225 56.0093 64.9785 55.3931 64.6753 55.2915 cv
64.3721 55.1909 64.3047 55.1235 64.0015 54.9214 cv
63.6987 54.7188 61.6704 54.791 60.917 54.6328 cv
59.9912 54.4375 59.2412 54.0547 58.8711 53.853 cv
58.5 53.6509 58.5142 53.6138 58.0425 53.9512 cv
cp
57.3379 68.7817 mo
57.0659 69.0205 56.8394 69.0015 56.4302 69.2061 cv
56.0215 69.4102 55.5806 69.8052 54.8994 69.9077 cv
54.5669 69.9575 54.019 70.0469 53.8486 69.9453 cv
53.6777 69.8433 53.6021 68.8311 53.5337 68.4561 cv
53.4658 68.0811 52.9541 67.5703 52.8179 67.4341 cv
52.6821 67.2974 52.7158 67.2295 52.5112 66.8887 cv
52.3071 66.5474 51.9663 66.3091 51.7959 66.3774 cv
51.625 66.4453 51.4893 66.5474 51.251 66.582 cv
51.0117 66.6162 50.6025 66.3091 50.3979 66.0024 cv
50.1934 65.6953 49.4785 65.5938 49.1714 65.5938 cv
48.8652 65.5938 49.2061 66.1729 49.4102 66.3433 cv
49.6152 66.5137 49.8872 66.9907 49.9893 67.1616 cv
50.0918 67.3315 50.5688 67.3999 50.9097 67.4341 cv
51.251 67.4678 51.5908 67.6719 51.5908 68.0811 cv
51.5908 68.4902 51.0117 68.4902 50.8418 68.6606 cv
50.6714 68.8311 50.3877 68.8804 50.0811 68.7788 cv
49.7749 68.6758 49.856 68.1401 49.5181 67.7651 cv
49.3247 67.5503 48.3535 67.0249 47.604 66.8203 cv
46.8545 66.6162 45.4565 66.9224 45.0479 67.1953 cv
44.6392 67.4678 43.6504 67.8765 43.3784 67.8765 cv
43.1055 67.8765 42.8496 67.7529 42.4067 67.8208 cv
41.9639 67.8892 41.4683 68.8994 41.2983 69.207 cv
41.1279 69.5132 40.7749 70.0981 41.2524 70.269 cv
41.729 70.439 42.4922 70.126 42.9014 70.0234 cv
43.3096 69.9214 44.1621 69.478 44.5708 69.4102 cv
44.98 69.3418 45.4858 69.1021 46.0024 68.9673 cv
46.5679 68.8193 46.7314 68.6045 47.0039 68.3652 cv
47.2769 68.127 47.6699 68.3418 47.9419 68.478 cv
48.2148 68.6143 48.5464 68.71 48.9556 68.7788 cv
49.3647 68.8467 49.3306 69.1157 49.2183 69.2285 cv
49.0566 69.3906 48.7285 69.5127 48.3198 69.5806 cv
47.9106 69.6494 47.4653 69.9663 47.2095 70.0376 cv
46.8486 70.1382 46.0454 70.5122 45.8696 70.5918 cv
45.4868 70.7646 44.3022 71.4194 44.166 71.5215 cv
44.0303 71.624 43.5762 71.6104 43.3037 71.7466 cv
43.0308 71.8828 42.8569 72.2651 43.2661 72.5728 cv
43.6753 72.8784 44.4233 72.7905 45.1045 72.7227 cv
45.7861 72.6543 47.2446 72.4326 48.3691 72.5347 cv
49.4941 72.6362 50.8232 72.582 51.3345 72.3101 cv
51.8452 72.0366 52.2827 72.0132 52.7598 72.0469 cv
53.2373 72.0811 53.6064 72.1797 53.8105 72.0093 cv
54.0151 71.8389 54.6167 71.4668 55.1616 71.2964 cv
55.707 71.1255 56.5669 70.8418 56.9077 70.6714 cv
57.2485 70.501 57.478 70.0215 57.7388 69.7607 cv
58.0156 69.4839 58.3848 69.5293 58.8008 69.3447 cv
59.0825 69.2192 59.1567 69.2061 59.123 69.0356 cv
59.0884 68.8647 58.8569 68.6035 58.7544 68.4673 cv
58.6523 68.3311 58.7544 67.5977 58.7544 67.3594 cv
58.7544 67.1211 57.7627 66.9868 57.8311 67.4976 cv
57.8804 67.8706 57.6113 68.5435 57.3379 68.7817 cv
cp
41.5757 61.771 mo
41.2983 62.0454 40.9834 62.1401 40.6978 62.2793 cv
40.3594 62.4443 40.5996 63.4858 41.0679 63.4336 cv
41.3408 63.4028 41.8525 63.7109 42.083 64.0801 cv
42.3052 64.4355 42.6958 64.9009 42.8682 65.0034 cv
43.25 65.2324 43.6074 65.5586 44.3462 65.7891 cv
45.1577 66.043 46.8833 66.0391 47.4688 66.0049 cv
48.0542 65.9702 47.5996 65.4536 47.2554 65.4194 cv
46.9116 65.3853 45.0264 65.0854 44.5791 64.8789 cv
44.1318 64.6724 43.7764 64.2095 43.6733 63.9683 cv
43.5698 63.7275 43.0742 63.6724 42.8672 63.3286 cv
42.6611 62.9834 42.4751 62.2881 42.4067 61.9102 cv
42.3379 61.5313 41.7939 61.5547 41.5757 61.771 cv
cp
37.0806 44.022 mo
36.6187 43.9609 36.4849 43.8901 36.0024 43.6831 cv
35.521 43.4771 35.3965 44.1001 35.603 44.2383 cv
35.8096 44.3755 36.4648 44.5454 37.4497 44.6377 cv
38.0361 44.6929 38.9248 44.6548 39.2046 44.6074 cv
39.4766 44.5615 39.9746 44.4229 40.0107 45.0117 cv
40.0527 45.7026 39.3037 45.4258 39.02 45.4297 cv
38.6553 45.4341 37.7236 45.3843 37.1729 45.3154 cv
36.6221 45.2466 35.2642 44.9463 34.7715 44.6074 cv
34.4404 44.3799 34.1582 43.9438 33.6763 43.8062 cv
33.1943 43.6685 32.792 44.5581 33.1704 44.73 cv
33.3965 44.8335 33.8481 45.1001 33.4478 45.5 cv
32.8926 46.0552 33.272 46.895 33.4785 47.1016 cv
33.6855 47.3081 34.3184 48.2188 34.5254 48.4253 cv
34.7314 48.6313 35.2598 48.5225 35.4663 48.6602 cv
35.5762 48.7334 36.2251 49.1899 36.499 49.5552 cv
36.7056 49.8306 37.1187 49.4175 37.4634 49.1421 cv
37.8071 48.8667 38.1514 49.4175 38.0137 49.6924 cv
37.876 49.9683 37.8071 49.9683 37.5317 50.5879 cv
37.2568 51.2075 36.6367 51.1392 36.2236 51.1392 cv
35.8105 51.1392 35.8799 51.5522 35.8799 51.5522 cv
35.8799 51.5522 36.1548 51.9648 36.1548 52.1714 cv
36.1548 52.3779 35.6733 52.5845 35.1909 52.5845 cv
34.7095 52.5845 34.2271 52.4468 33.8828 52.3779 cv
33.5391 52.3091 33.6416 52.791 33.9517 53.0664 cv
34.229 53.3125 34.5713 53.9956 35.1909 54.168 cv
35.4302 54.2344 35.9722 54.1479 36.1548 54.0303 cv
36.5415 53.7822 37.1885 53.459 37.1875 53.0664 cv
37.1875 52.6738 36.9175 52.3218 37.5117 51.9653 cv
37.9731 51.6885 38.3232 52.2407 38.5991 52.4468 cv
38.8745 52.6533 39.3911 52.4121 39.8042 52.0679 cv
40.2173 51.7241 40.1421 50.7642 40.0449 50.3125 cv
39.9414 49.8306 39.4927 49.9473 39.1152 49.624 cv
38.6338 49.2109 39.3564 48.6602 39.3564 48.6602 cv
39.3564 48.6602 40.6299 47.937 40.561 47.2832 cv
40.4893 46.5991 40.6519 45.8389 40.8364 45.459 cv
40.958 45.2095 40.396 45.1655 40.7749 44.5454 cv
41.0981 44.0171 41.938 43.4966 42.0068 42.9458 cv
42.0757 42.394 41.6406 42.1577 41.2275 42.02 cv
40.8149 41.8818 40.7422 42.4805 40.6519 43.0059 cv
40.5547 43.5654 40.0049 43.8687 39.4814 43.9917 cv
39.0923 44.083 37.542 44.084 37.0806 44.022 cv
cp
33.9404 39.4956 mo
33.2173 40.0806 32.8721 40.3462 32.9941 40.9575 cv
33.1318 41.646 34.1646 41.8525 34.5088 41.8525 cv
34.853 41.8525 35.3003 41.0952 35.5073 40.6479 cv
35.6919 40.2471 35.9663 39.7417 35.7256 39.4956 cv
35.4229 39.186 34.5601 38.876 33.9404 39.4956 cv
cp
45.5088 53.207 mo
45.0371 52.7822 45.2676 51.313 44.6475 51.2788 cv
44.3652 51.2632 43.96 51.5542 43.7534 51.6919 cv
43.5469 51.8301 43.3403 51.6235 42.7207 51.6919 cv
42.1011 51.7612 42.4438 52.373 42.6172 52.8281 cv
42.8931 53.5513 43.6152 53.207 43.8218 53.2754 cv
44.0288 53.3442 44.063 53.5854 44.3384 53.5854 cv
44.6133 53.5854 44.8198 53.4478 45.1646 53.8608 cv
45.6294 54.4189 46.1968 53.8262 45.5088 53.207 cv
cp
37.0498 41.9468 mo
36.5679 42.4282 36.7324 42.9424 37.1113 43.2524 cv
37.4126 43.499 38.6558 43.666 39.2666 43.437 cv
39.7588 43.2524 40.1479 42.6011 40.1133 42.2217 cv
40.0889 41.9478 39.8726 41.7056 39.5283 41.5679 cv
39.1841 41.4302 39.1152 41.8428 39.2529 42.1191 cv
39.3911 42.394 39.5283 43.0142 38.6338 43.083 cv
37.7383 43.1523 37.7803 42.4414 37.9106 42.0493 cv
38.1172 41.4302 37.7725 41.3613 37.0498 41.9468 cv
cp
48.9639 41.9063 mo
49.1489 41.6909 48.6006 41.4683 48.1323 41.9063 cv
47.6406 42.3682 48.0098 43.2432 48.4092 43.4048 cv
48.8184 43.5703 49.5122 43.8032 50.2266 43.5513 cv
50.75 43.3667 51.1499 43.0986 51.1499 42.4512 cv
51.1499 42.1733 50.75 41.9771 50.4063 41.8696 cv
50.0522 41.7593 49.9927 42.0073 50.0625 42.1455 cv
50.1309 42.2832 50.4668 42.4727 50.0967 42.8867 cv
49.7339 43.2925 49.061 43.1353 48.8223 42.8867 cv
48.5024 42.5527 48.8633 42.0239 48.9639 41.9063 cv
cp
57.7168 39.8403 mo
57.4409 40.1851 57.7129 41.0112 57.9536 40.9429 cv
58.3564 40.8276 58.7437 40.584 58.8467 40.481 cv
58.9502 40.3774 59.3555 39.9775 60.0781 40.0806 cv
60.8008 40.1836 61.8818 40.8042 62.0542 40.9077 cv
62.2266 41.0107 62.6919 41.3354 62.6641 41.8657 cv
62.6372 42.397 62.0801 42.4204 61.6753 42.6636 cv
61.3613 42.8525 61.1245 43.0771 60.7461 43.043 cv
60.3672 43.0083 59.6792 42.6636 59.3003 42.8018 cv
58.9214 42.939 58.5771 43.2837 58.9214 43.5591 cv
59.2661 43.8345 59.7612 43.7021 60.1401 43.668 cv
60.5186 43.6338 60.3979 44.4844 59.9092 44.5454 cv
59.3584 44.6143 59.209 45.3848 59.5859 45.3306 cv
60.3086 45.2275 60.4116 45.7251 60.1704 45.9316 cv
59.9292 46.1382 59.354 46.2554 59.2163 46.3936 cv
59.0786 46.5308 59.4727 46.9019 59.8169 46.9019 cv
60.1611 46.9019 60.7744 46.522 60.9253 46.439 cv
61.3701 46.1953 61.7314 46.2896 62.1226 46.623 cv
62.4492 46.9019 63.1899 46.0723 64.0161 45.9346 cv
64.8423 45.7969 65.4917 45.54 65.7407 45.5703 cv
66.1099 45.6167 66.1182 46.3638 66.3247 46.3989 cv
66.5313 46.4336 67.4238 46.417 67.9404 46.4858 cv
68.457 46.5542 69.271 47.0317 69.687 46.8857 cv
70.2969 46.6724 69.7646 46.1411 69.6963 45.9346 cv
69.6274 45.7285 69.6274 45.4868 69.5239 45.2456 cv
69.4209 45.0049 69.042 44.73 69.0078 44.3857 cv
68.9731 44.041 69.3174 43.0083 68.4229 42.7329 cv
67.5278 42.4565 67.1016 42.5039 67.0674 42.2969 cv
67.0327 42.0903 67.1147 41.5962 66.9082 41.561 cv
66.7017 41.5269 64.3921 41.3677 64.1113 41.2817 cv
63.5474 41.1074 62.6738 39.7373 61.7441 39.4966 cv
60.8154 39.2554 60.1348 38.96 59.3687 39.3926 cv
58.5771 39.8403 58.1299 39.875 57.7168 39.8403 cv
cp
72.9321 52.6006 mo
72.4238 52.2583 72.2847 51.5405 72.1465 51.334 cv
72.0093 51.1274 71.1074 49.7773 70.7979 49.6401 cv
70.4634 49.4912 69.5239 48.3662 68.5259 47.8501 cv
67.5278 47.3335 66.667 47.4717 65.4966 47.5742 cv
64.3262 47.6782 62.3291 48.9854 61.9858 49.0552 cv
61.6411 49.1235 61.2627 48.6074 60.8496 48.4009 cv
60.4365 48.1938 60.1958 48.332 59.7476 48.1938 cv
59.3003 48.0562 59.1973 47.8848 58.6807 47.6094 cv
58.1641 47.3335 57.8892 47.4717 57.4756 47.644 cv
57.0625 47.8154 57.5444 48.1597 58.0259 48.332 cv
58.5088 48.5039 59.1621 48.5386 59.4727 48.917 cv
59.7817 49.2959 59.3003 49.4683 58.9556 49.5024 cv
58.6118 49.5366 58.2676 49.2959 58.0259 49.1235 cv
57.7852 48.9512 57.416 49.5347 57.5542 49.8105 cv
57.6909 50.0854 58.0259 50.123 58.3022 50.2266 cv
58.5771 50.3296 59.6099 50.0703 59.8511 50.2085 cv
60.0918 50.3462 59.9663 50.8047 59.8628 51.0112 cv
59.7593 51.2173 59.957 51.7163 60.2324 51.8882 cv
60.5078 52.0601 58.3115 51.8169 58.2329 52.1533 cv
58.0625 52.8784 58.8003 52.9004 59.2661 52.8413 cv
59.8628 52.7656 59.604 52.8022 61.3311 52.7036 cv
63.7412 52.5664 65.2212 53.6333 65.9102 54.0459 cv
66.5981 54.459 67.2661 56.0425 67.335 57.1787 cv
67.4038 58.3149 66.7847 58.7622 66.6807 59.6919 cv
66.5781 60.6211 67.2109 62.9551 67.3481 63.4028 cv
67.4863 63.8501 68.2109 63.5942 68.1768 63.3535 cv
68.1426 63.1128 68.2329 62.9238 68.4736 62.6143 cv
68.7144 62.3042 68.8306 62.2705 68.624 61.7881 cv
68.4175 61.3062 68.249 60.7729 68.249 59.9116 cv
68.249 59.0518 68.4985 59.0938 68.7744 57.5103 cv
69.0493 55.9263 68.2158 54.2876 67.8374 53.3232 cv
67.4585 52.3594 65.4277 51.5679 65.0488 51.3267 cv
64.6699 51.0859 64.292 50.707 64.1543 50.5005 cv
64.0161 50.2939 63.6719 50.397 63.3623 50.1216 cv
63.0522 49.8467 63.7588 49.5566 63.9727 49.4404 cv
64.4248 49.1968 64.9736 48.6802 65.1177 48.7793 cv
65.543 49.0713 65.0352 49.5796 65.2656 49.7183 cv
65.5518 49.8892 66.0601 49.3203 66.2822 49.4868 cv
66.5576 49.6934 67.1626 50.0928 66.4668 50.272 cv
65.8081 50.4424 66.5464 50.8081 66.856 50.7734 cv
67.0308 50.7539 67.7598 50.2261 68.0835 50.5029 cv
68.3164 50.7031 67.7954 51.2466 68.3135 51.3809 cv
68.5249 51.4351 68.8008 51.5332 69.2832 51.5679 cv
69.7646 51.6021 69.6963 52.0498 69.8687 52.0498 cv
70.041 52.0498 70.729 51.981 71.2798 52.1875 cv
71.8306 52.3936 72.688 53.2153 72.9668 53.5303 cv
73.3936 54.0127 73.9146 53.4229 74.0869 53.1812 cv
74.2588 52.9404 73.9995 52.4629 73.8271 52.4971 cv
73.6548 52.5317 73.2256 52.7983 72.9321 52.6006 cv
cp
69.0171 53.2437 mo
68.9141 53.3809 68.6772 53.6123 68.8105 53.9663 cv
68.9141 54.2422 69.4302 54.896 69.7056 55.2744 cv
69.981 55.6533 70.1108 57.1616 69.8672 57.9897 cv
69.7241 58.4766 70.2485 58.6392 70.2998 59.1484 cv
70.355 59.6987 69.7915 59.7178 69.7915 59.9238 cv
69.7915 60.1304 70.2275 60.9443 69.7461 61.4941 cv
69.4224 61.8633 69.6929 63.0083 69.9761 63.0181 cv
70.4297 63.0347 71.0864 62.4019 71.3872 62.064 cv
71.6621 61.7544 72.7427 59.8799 72.5415 59.4316 cv
72.2705 58.8267 71.8306 58.8716 71.9277 58.2383 cv
71.9756 57.9307 72.3237 57.1636 72.2207 56.9229 cv
72.1172 56.6821 71.9429 56.6514 71.5986 56.1348 cv
71.2544 55.6187 71.1172 54.999 71.0132 54.6895 cv
70.9106 54.3794 70.6006 53.9326 70.4976 53.8975 cv
70.394 53.8628 70.3247 53.7944 70.1533 53.6226 cv
69.981 53.4507 69.5679 52.9678 69.0171 53.2437 cv
cp
56.7998 64.208 mo
57.1333 64.0737 58.7026 64.0405 58.9033 64.1084 cv
59.1035 64.1748 59.4937 64.5884 59.6323 64.9111 cv
59.6792 65.022 60.2012 65.8374 60.0015 66.2046 cv
59.8008 66.5718 59.5859 66.8516 59.6323 67.313 cv
59.6685 67.6821 60.0928 67.9048 60.6021 67.6821 cv
61.1113 67.46 60.8325 67.1284 61.4746 66.8125 cv
61.7222 66.6909 61.6411 65.3433 61.6411 65.1768 cv
61.6411 65.0093 61.3745 64.208 61.207 64.0073 cv
61.04 63.8076 60.6401 63.5732 60.6064 63.3735 cv
60.5728 63.1729 60.4063 62.8057 60.0054 62.772 cv
59.605 62.7388 57.9907 62.9443 57.3691 63.1567 cv
56.7476 63.3687 56.4653 63.8076 56.3657 63.9741 cv
56.2651 64.1416 56.332 64.4087 56.7998 64.208 cv
cp
53.3052 65.9272 mo
53.3242 66.312 53.6294 66.8638 53.7666 67.0356 cv
53.9048 67.208 54.4141 67.8672 54.7832 67.9595 cv
55.0239 68.0195 55.7363 67.8657 56.0801 67.8252 cv
56.6655 67.7563 56.811 66.9307 56.1221 66.7588 cv
55.6538 66.6411 55.2446 66.5278 55.106 65.8813 cv
54.96 65.1997 55 64.9346 54.3213 64.9575 cv
53.936 64.9702 53.2588 65.0034 53.3052 65.9272 cv
cp
49.5591 58.0664 mo
48.7988 57.9014 48.9307 58.2646 48.9639 58.4956 cv
48.9971 58.7275 49.46 59.1235 49.5591 59.2559 cv
49.6577 59.3882 49.3384 60.3467 50.165 60.0166 cv
50.3813 59.9292 50.5171 60.2144 50.7153 60.5112 cv
50.9141 60.8096 50.8477 61.1729 50.8149 61.4048 cv
50.7817 61.6353 51.2441 61.7676 51.542 62.0986 cv
52.0459 62.6582 53.0288 62.7588 53.6895 62.7588 cv
54.3511 62.7588 55.3086 62.7261 56.0361 62.3296 cv
56.5962 62.0244 57.5791 61.7646 57.877 61.6333 cv
58.1743 61.5005 58.834 61.8008 59.0776 61.6787 cv
59.4077 61.5132 59.2412 61.1069 59.0767 60.875 cv
58.9111 60.6445 58.4316 60.5835 58.2002 60.6167 cv
57.9688 60.6499 57.6548 60.5776 57.2588 60.4458 cv
56.8623 60.3145 56.6641 60.1152 56.0693 60.2803 cv
55.4741 60.4458 54.0532 60.4458 53.3926 60.1812 cv
52.7314 59.9175 52.3672 59.1582 52.1699 58.6948 cv
51.9658 58.2153 51.3613 58.7451 50.9956 58.6772 cv
50.7158 58.6245 50.2344 58.2134 49.5591 58.0664 cv
cp
54.9404 54.8208 mo
54.6309 55.1641 54.1494 55.5776 53.7705 55.8184 cv
53.3916 56.0596 53.2881 56.6797 53.2539 57.1953 cv
53.2197 57.7119 54.0459 58.1592 54.2866 58.0903 cv
54.5278 58.022 54.4585 57.5396 54.3555 57.0923 cv
54.252 56.645 54.5625 56.2661 54.9404 56.1978 cv
55.3198 56.1284 55.2852 56.6104 55.5605 57.4707 cv
55.8354 58.3315 56.5586 58.7446 56.9375 58.7788 cv
57.3164 58.8135 57.7202 58.7144 58.5239 58.9077 cv
59.1602 59.061 59.7256 59.2266 59.6572 59.6396 cv
59.5879 60.0527 59.9321 60.6377 60.1729 60.5693 cv
60.4141 60.5005 60.793 59.9497 60.7236 59.6743 cv
60.6553 59.3989 59.7256 58.4351 58.8994 58.0562 cv
58.0737 57.6772 57.6606 57.6431 57.144 56.9541 cv
56.6274 56.2661 56.9033 55.0957 56.9717 54.2007 cv
57.0405 53.3057 56.6968 53.0205 56.2144 53.0889 cv
55.7329 53.1577 55.4331 53.3579 55.4756 53.8745 cv
55.5103 54.2876 55.251 54.4761 54.9404 54.8208 cv
cp
ef
88.2393 29.834 mo
88.2393 28.9512 89.9248 29.1919 89.9248 29.1919 cv
99.7568 29.1919 li
99.7568 29.1919 105.781 29.4116 108.145 32.0015 cv
112.761 37.0581 110.315 42.4653 108.787 43.8403 cv
107.583 44.9243 105.616 45.4858 105.616 45.4858 cv
105.616 45.4858 108.546 46.1279 110.553 47.9336 cv
112.815 49.9692 115.599 57.1948 112.64 61.938 cv
109.911 66.3125 106.302 67.0122 101.804 66.8345 cv
97.7505 66.6738 98.5127 66.2319 94.2988 66.3125 cv
90.8076 66.3784 88.9736 66.519 88.9736 66.519 cv
88.9736 66.519 87.5454 66.6567 87.7109 65.7456 cv
87.874 64.8501 88.6479 65.0132 89.8447 64.2261 cv
90.6768 63.6772 91.2295 62.2231 91.4497 60.9351 cv
91.7305 59.2896 91.7705 56.9219 91.7705 56.9219 cv
91.7705 36.4556 li
91.7705 36.4556 91.7305 36.0947 91.7305 35.7339 cv
91.7305 33.1899 89.6841 30.9985 88.9619 30.7573 cv
88.2793 30.5161 88.2793 30.356 88.2393 29.834 cv
cp
96.707 32.8843 mo
96.667 43.5591 li
96.667 43.5591 96.7324 44.1099 96.9077 44.4019 cv
97.1484 44.8032 97.7505 44.9243 97.7505 44.9243 cv
99.3555 44.9243 li
99.3555 44.9243 100.399 44.8833 101.202 44.6831 cv
101.779 44.5386 103.372 43.5615 104.372 42.396 cv
105.095 41.5527 105.776 39.5864 105.776 38.2622 cv
105.776 35.1714 104.653 33.9272 103.128 33.165 cv
101.071 32.1367 98.4326 32.1216 98.4326 32.1216 cv
97.4697 32.1216 li
97.4697 32.1216 96.9883 32.1216 96.8271 32.3623 cv
96.6851 32.5762 96.707 32.8843 96.707 32.8843 cv
cp
96.707 47.8936 mo
96.707 60.0522 li
96.707 62.3794 li
96.707 62.7407 97.2686 63.1021 97.6299 63.2622 cv
98.3535 63.584 99.0347 63.6636 99.0347 63.6636 cv
102.125 63.6636 li
102.125 63.6636 104.332 63.7842 106.098 62.6201 cv
108.189 61.2417 108.787 58.2861 108.707 55.9985 cv
108.598 52.9106 107.456 51.2075 105.656 49.6191 cv
103.61 47.8135 99.1953 47.8936 99.1953 47.8936 cv
96.707 47.8936 li
cp
ef
112.56 65.9561 mo
112.794 64.7686 113.547 65.7202 115.128 64.0293 cv
116.292 62.7861 117.095 61.5415 117.857 59.9365 cv
118.244 59.1216 118.82 57.5283 118.82 57.5283 cv
127.69 33.3706 li
127.69 33.3706 127.81 32.5278 127.81 31.9253 cv
127.81 31.3638 127.71 30.8022 127.71 30.8022 cv
127.71 30.8022 128.136 30.7456 128.412 30.6812 cv
128.673 30.6216 129.274 30.4609 129.274 30.4609 cv
133.188 29.1968 li
144.104 56.0835 li
144.104 56.0835 145.841 60.856 147.716 63.147 cv
148.438 64.0293 149.28 64.7524 150.244 64.7925 cv
151.808 64.8574 150.926 66.478 149.923 66.478 cv
149.119 66.478 146.151 66.4014 143.582 66.4375 cv
140.732 66.478 135.476 66.6782 135.476 66.6782 cv
135.476 66.6782 134.353 66.7656 134.593 65.9155 cv
134.904 64.8091 135.757 65.0332 136.398 64.9126 cv
138.023 64.6084 140.131 63.8296 140.492 62.1836 cv
140.745 61.0308 139.931 58.8931 139.931 58.8931 cv
136.237 49.7441 li
125.563 49.7441 li
122.513 58.4111 li
122.513 58.4111 122.111 59.6147 122.031 60.1768 cv
121.95 60.7388 121.95 62.7056 122.754 63.6685 cv
123.556 64.6313 125.723 64.9126 126.767 64.9927 cv
127.81 65.0732 127.007 66.5576 126.204 66.5576 cv
125.402 66.5576 122.111 66.4375 119.704 66.3574 cv
117.295 66.2769 113.282 66.5981 113.282 66.5981 cv
113.282 66.5981 112.56 66.7988 112.56 65.9561 cv
cp
126.606 46.7739 mo
135.194 46.7739 li
130.62 35.5776 li
126.606 46.7739 li
cp
ef
148.559 29.8794 mo
148.559 29.8794 149.602 29.9595 150.926 30.0396 cv
152.208 30.1172 154.257 30.2002 154.257 30.2002 cv
168.745 30.1597 li
168.745 30.1597 171.112 30.1597 173.48 29.9595 cv
175.321 29.8032 178.136 29.5981 178.136 29.5981 cv
178.136 29.5981 177.972 31.6245 177.533 34.0928 cv
177.093 36.5811 176.731 38.106 176.731 38.106 cv
176.731 38.106 176.53 38.9888 176.29 39.1499 cv
176.049 39.3101 174.725 39.7915 174.725 39.7915 cv
174.725 39.7915 175.026 38.1074 174.966 37.2231 cv
174.885 36.0591 174.546 34.1821 173.761 33.6514 cv
172.397 32.7285 170.751 32.7681 169.468 32.688 cv
168.183 32.6079 166.056 32.7285 165.494 33.1294 cv
164.932 33.5308 165.013 34.6548 165.013 34.6548 cv
165.013 59.0933 li
165.013 59.0933 164.932 62.1431 166.337 63.187 cv
167.591 64.1196 169.595 64.687 169.595 64.687 cv
169.595 64.687 171.021 64.687 170.711 65.7153 cv
170.503 66.4072 169.628 66.5181 169.628 66.5181 cv
169.628 66.5181 164.531 66.3442 162.043 66.3174 cv
158.392 66.2769 155.368 66.4868 154.245 66.519 cv
152.819 66.5601 153.171 64.7969 154.448 64.6465 cv
155.13 64.5659 157.117 64.4155 158.431 62.9858 cv
159.795 61.5015 159.996 58.4917 159.996 58.4917 cv
159.996 35.7388 li
159.996 35.7388 159.915 34.0591 159.394 33.4907 cv
158.512 32.5278 156.224 32.6079 154.378 32.7681 cv
152.042 32.9712 150.655 33.8423 150.044 35.3369 cv
149.401 36.9019 149.12 38.9087 148.639 39.1499 cv
148.128 39.4043 146.913 39.7114 146.913 39.7114 cv
146.913 39.7114 147.458 37.2563 147.876 34.3335 cv
148.157 32.3677 148.559 29.8794 148.559 29.8794 cv
cp
ef
181.306 29.5181 mo
180.06 29.4272 179.774 31.1782 180.508 31.3413 cv
181.401 31.5396 182.149 31.4038 182.951 32.3267 cv
183.92 33.4409 183.674 35.8589 183.674 35.8589 cv
183.674 57.9297 li
183.674 57.9297 183.675 60.4048 183.513 61.6216 cv
183.272 63.4282 182.489 64.0815 181.525 64.4829 cv
180.664 64.8428 179.979 64.8906 179.861 65.7954 cv
179.748 66.6709 180.712 66.5601 180.712 66.5601 cv
180.712 66.5601 183.036 66.397 186.086 66.3564 cv
189.14 66.3159 192.289 66.5601 193.252 66.5601 cv
194.216 66.5601 194.8 65.0132 193.375 64.8091 cv
191.808 64.5854 190.296 64.311 189.171 63.2671 cv
188.298 62.4556 188.489 60.3374 188.489 60.3374 cv
188.489 47.2563 li
205.987 47.2563 li
205.987 60.3374 li
205.987 60.3374 205.976 63.269 204.531 63.7505 cv
203.087 64.2319 202.333 64.2798 201.314 64.4429 cv
200.257 64.6123 199.296 66.5601 200.5 66.5601 cv
201.704 66.5601 205.43 66.2749 208.399 66.2749 cv
210.127 66.2749 212.922 66.46 213.326 66.4785 cv
214.222 66.519 214.591 66.127 214.751 65.5825 cv
214.955 64.8906 214.1 64.7275 213.53 64.5244 cv
212.861 64.2856 212.187 64.0356 211.616 63.1401 cv
210.932 62.064 211.124 59.7358 211.124 59.7358 cv
211.124 35.939 li
211.124 35.939 211.003 33.6514 211.766 32.5278 cv
212.604 31.2925 212.93 31.4438 213.653 31.2036 cv
214.604 30.8862 214.816 29.478 213.974 29.5581 cv
213.08 29.6431 210.122 29.8252 208.435 29.7983 cv
205.866 29.7583 203.102 29.6118 202.454 29.5903 cv
201.274 29.5493 201.042 31.3813 201.925 31.3813 cv
202.892 31.3813 204.471 31.6343 205.225 32.7285 cv
206.028 33.8921 206.022 36.019 205.987 36.0591 cv
205.987 44.126 li
188.489 44.126 li
188.489 35.939 li
188.489 35.939 188.409 33.1699 189.653 32.3267 cv
190.545 31.7231 191.38 31.6851 192.423 31.5244 cv
193.466 31.3638 194.068 29.5181 192.944 29.5981 cv
191.82 29.6782 188.891 29.6782 186.323 29.6782 cv
183.754 29.6782 182.27 29.6382 181.306 29.5181 cv
cp
ef
89.7256 13.1353 mo
89.7256 13.8276 li
90.6152 13.8979 li
90.8135 14.0957 li
90.8135 18.9829 li
90.8135 20.0708 90.8838 20.9043 91.4346 21.625 cv
92.0142 22.3599 93.0596 22.7827 94.458 22.7827 cv
97.1133 22.7827 98.187 21.6392 98.187 19.0542 cv
98.187 14.1519 li
98.3848 13.9121 li
99.2466 13.8276 li
99.2466 13.1353 li
96.04 13.1353 li
96.04 13.8276 li
96.9438 13.9121 li
97.1563 14.1519 li
97.1563 18.9126 li
97.1563 20.7915 96.5767 21.6675 95.0088 21.6675 cv
93.3135 21.6675 92.7061 20.8618 92.7061 19.04 cv
92.7061 14.0957 li
92.9038 13.8979 li
93.7798 13.8276 li
93.7798 13.1353 li
89.7256 13.1353 li
cp
ef
101.467 22.6138 mo
104.688 22.6138 li
104.688 21.9355 li
103.812 21.8228 li
103.585 21.5684 li
103.585 15.0278 li
108.473 22.6138 li
110.056 22.6138 li
110.056 14.1802 li
110.296 13.9121 li
111.13 13.7993 li
111.13 13.1353 li
107.908 13.1353 li
107.908 13.7993 li
108.77 13.9121 li
109.024 14.1802 li
109.024 20.2261 li
104.701 13.5171 li
104.701 13.1353 li
101.452 13.1353 li
101.452 13.8276 li
102.356 13.8979 li
102.555 14.0957 li
102.555 21.5684 li
102.3 21.8228 li
101.467 21.9355 li
101.467 22.6138 li
cp
ef
113.484 22.6138 mo
117.708 22.6138 li
117.708 21.9214 li
116.761 21.8511 li
116.535 21.625 li
116.535 14.0957 li
116.761 13.8979 li
117.708 13.8276 li
117.708 13.1353 li
113.484 13.1353 li
113.484 13.8276 li
114.417 13.8979 li
114.643 14.0957 li
114.643 21.625 li
114.417 21.8511 li
113.484 21.9214 li
113.484 22.6138 li
cp
ef
119.453 13.1353 mo
119.453 13.8276 li
120.386 13.9971 li
123.592 22.6421 li
125.019 22.6421 li
128.154 14.0107 li
129.072 13.8276 li
129.072 13.1353 li
125.979 13.1353 li
125.979 13.8276 li
126.827 13.8979 li
126.981 14.1099 li
124.708 20.5513 li
122.363 14.1099 li
122.519 13.8979 li
123.337 13.8276 li
123.337 13.1353 li
119.453 13.1353 li
cp
ef
130.823 22.6138 mo
138.408 22.6138 li
138.408 20.0854 li
137.447 20.0854 li
137.208 21.5825 li
137.024 21.8086 li
133.747 21.8086 li
133.747 18.1362 li
135.583 18.1362 li
135.78 18.3335 li
135.922 19.3506 li
136.755 19.3506 li
136.755 16.0737 li
135.922 16.0737 li
135.78 17.0903 li
135.583 17.2886 li
133.747 17.2886 li
133.747 13.9263 li
136.558 13.9263 li
136.741 14.1099 li
136.953 15.353 li
137.942 15.353 li
137.942 13.1353 li
130.823 13.1353 li
130.823 13.8276 li
131.685 13.8979 li
131.91 14.0957 li
131.91 21.625 li
131.685 21.8511 li
130.823 21.9214 li
130.823 22.6138 li
cp
ef
140.969 13.1353 mo
145.263 13.1353 li
147.452 13.1353 148.583 13.9829 148.583 15.5508 cv
148.583 16.8501 147.749 17.6694 146.153 17.9663 cv
146.831 18.1216 147.312 18.3901 147.636 18.8423 cv
148.074 19.4634 148.187 20.2261 148.456 20.9331 cv
148.753 21.7095 149.177 21.9214 150.122 21.9214 cv
150.306 21.9214 li
150.306 22.5996 li
149.812 22.6704 149.331 22.7129 148.894 22.7129 cv
148.286 22.7129 147.763 22.5435 147.425 22.2749 cv
146.69 21.7095 146.563 21.0742 146.337 20.396 cv
145.899 19.0542 145.531 18.4468 144.105 18.4468 cv
143.865 18.4468 li
143.865 21.625 li
144.091 21.8511 li
144.952 21.9214 li
144.952 22.6138 li
140.969 22.6138 li
140.969 21.9214 li
141.802 21.8511 li
142.028 21.625 li
142.028 14.0957 li
141.802 13.8979 li
140.969 13.8276 li
140.969 13.1353 li
cp
143.865 13.9404 mo
143.865 17.6274 li
144.048 17.6411 144.218 17.6411 144.373 17.6411 cv
145.885 17.6411 146.605 17.0483 146.605 15.7485 cv
146.605 14.5903 145.885 13.9404 144.514 13.9404 cv
143.865 13.9404 li
cp
ef
152.538 22.3032 mo
153.414 22.6138 154.36 22.769 155.265 22.769 cv
157.581 22.769 159.007 21.5542 159.007 19.8735 cv
159.007 19.04 158.556 18.2769 157.736 17.7544 cv
156.903 17.2178 156.153 17.0063 155.716 16.7373 cv
154.968 16.2847 154.572 15.8618 154.572 15.2119 cv
154.572 14.4351 155.208 13.8696 156.238 13.8696 cv
156.69 13.8696 157.017 13.9404 157.27 14.0679 cv
157.468 14.2651 li
157.708 15.7349 li
158.726 15.7349 li
158.726 13.4458 li
157.835 13.1353 156.945 12.9653 156.069 12.9653 cv
154.05 12.9653 152.735 14.1802 152.735 15.7485 cv
152.735 16.4409 153.075 17.1328 153.725 17.6841 cv
154.346 18.2065 155.01 18.4468 155.575 18.729 cv
156.578 19.2378 157.087 19.7461 157.087 20.5093 cv
157.087 21.2861 156.409 21.8511 155.265 21.8511 cv
154.826 21.8511 154.417 21.7803 154.021 21.6528 cv
153.837 21.4419 li
153.611 19.7461 li
152.538 19.7461 li
152.538 22.3032 li
cp
ef
161.842 22.6138 mo
166.065 22.6138 li
166.065 21.9214 li
165.119 21.8511 li
164.894 21.625 li
164.894 14.0957 li
165.119 13.8979 li
166.065 13.8276 li
166.065 13.1353 li
161.842 13.1353 li
161.842 13.8276 li
162.774 13.8979 li
163 14.0957 li
163 21.625 li
162.774 21.8511 li
161.842 21.9214 li
161.842 22.6138 li
cp
ef
168.334 13.1353 mo
168.334 15.6357 li
169.308 15.6357 li
169.534 14.124 li
169.76 13.9404 li
171.455 13.9404 li
171.455 21.625 li
171.215 21.8511 li
170.297 21.9214 li
170.297 22.6138 li
174.521 22.6138 li
174.521 21.9214 li
173.603 21.8511 li
173.362 21.625 li
173.362 13.9404 li
175.058 13.9404 li
175.269 14.124 li
175.51 15.6357 li
176.484 15.6357 li
176.484 13.1353 li
168.334 13.1353 li
cp
ef
178.162 13.1353 mo
178.162 13.8276 li
179.066 13.9688 li
181.778 18.8848 li
181.778 21.6392 li
181.553 21.8369 li
180.606 21.9077 li
180.606 22.6138 li
184.844 22.6138 li
184.844 21.9077 li
183.884 21.8369 li
183.657 21.6392 li
183.657 18.5454 li
186.341 13.9829 li
187.175 13.8276 li
187.175 13.1353 li
184.095 13.1353 li
184.095 13.8135 li
184.942 13.9688 li
185.056 14.1948 li
183.036 17.6558 li
181.1 14.0679 li
181.228 13.8979 li
182.019 13.8276 li
182.019 13.1353 li
178.162 13.1353 li
cp
ef
193.308 17.8252 mo
193.308 16.2847 193.802 15.0425 194.763 14.1519 cv
195.652 13.333 196.754 12.9233 198.067 12.9233 cv
199.283 12.9233 200.314 13.2905 201.176 14.0254 cv
202.264 14.9575 202.856 16.3135 202.856 17.9097 cv
202.856 19.4072 202.335 20.6782 201.345 21.5967 cv
200.483 22.4019 199.354 22.8398 198.167 22.8398 cv
195.243 22.8398 193.308 20.834 193.308 17.8252 cv
cp
198.097 13.8276 mo
196.528 13.8276 195.412 15.3247 195.412 17.853 cv
195.412 20.4526 196.557 21.978 198.067 21.978 cv
199.622 21.978 200.737 20.4526 200.737 17.9521 cv
200.737 15.3384 199.637 13.8276 198.097 13.8276 cv
cp
ef
205.464 22.6138 mo
209.631 22.6138 li
209.631 21.9214 li
208.643 21.8511 li
208.403 21.625 li
208.403 18.3335 li
210.295 18.3335 li
210.493 18.5171 li
210.634 19.5483 li
211.468 19.5483 li
211.468 16.2573 li
210.634 16.2573 li
210.493 17.2886 li
210.295 17.4722 li
208.403 17.4722 li
208.403 13.9546 li
211.129 13.9546 li
211.313 14.1382 li
211.524 15.5083 li
212.499 15.5083 li
212.499 13.1353 li
205.407 13.1353 li
205.407 13.8276 li
206.312 13.8979 li
206.538 14.0957 li
206.538 21.625 li
206.312 21.8511 li
205.464 21.9214 li
205.464 22.6138 li
cp
ef
2.86239 lw
88.2817 75.2681 mo
214.155 75.2681 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Sue Fairhurst) ()%%Title: (Logotransparentblack.eps)%%CreationDate: 10/8/09 2:03 PM%AI9_DataStream%Gb!Q;B3-k3dcgW3r!-%1O>Jt*+pUP*`>hH!ML^AnpN&R3^\q2W:M(6V?K\tFSTUN`4Zug$eWm&53ulP,k/2(dpmrT+P6nOZ(eh4l%($$5ZQt.$p&.Ve=(VQfU=,N;((:mCaMWT1"qU6lr'En>3MP=2_hCO[JoC(OTesMCW^$2mX)N6#l9JA\EFhRq9>`F4^pBSD&B_'uJ%"m$GPg1]Up5OT,oVt9A#DitEI#Z@hF^>QK(VQKT!-A[/8k1[$qR!3ldJD'8>^>\Sr4V1uin&sR(#,;BuBI8Fs]ApbU3ZEKW!72RY%;BcdMi'4R_N&G^Sc*PksOHHJL+f;n[*5(hH:Yt#^;4=4?$'G6_d/4]++V#O6s.U#?^%_MJ2JLG4UZ#.1N4.F:*Y2G\*[W*:Pi@7%%Z3^Ibrh8rfg>IDgZjRQUO!Rs<9'UJg]"PlT]tZA>P?+SGS;jBfKN=(]LCcI)R9fOd09AofQln'RV"J1\kY847r>?bRXsT@a:.F'r%!0CsaQ3T!05RROPf)I$:R]X\YD[%1:)U-T&&U,Xa?jZ/$5<ZC7/4"55mL>Y\CHPciU/QZZ!6<H\7"2BiNeJA!2"6VM8O6GlKScOm%+@F<ZAfA/+"9ej_^o;QH;1qq_^ri9DqX=AkL1[4q9u@mE+/1=-KK1NGITP\AGV"u,nAJ4fiW$4[Ikh*K`ba3F.O5+./Y)$D-n9@[%$2@02DIN0secp@RS-M4p!Z);8n)To1)aAo*k@67dr:eD!#^XBT!mJG/INlH^#'5#gR>g:gg@/qnLuu:DFt_K]bs"C_HGf/-(0'#/%T0`#P[+>,(ogi;eeK;h:iAE!=L#.GpmE]*O"tqJ9qQJ(fJ(F2qFP/rjRKW5Gq=Goa*/t0Vprnf+@4KO3(%qUq^sTqN%*sZ]dYjKW%%TZ7G2ZIo%TXQ]]Gkg/)^!IZ+qX9X!pnQ`O6X]Lj_aL(JJIH(:daR*oJ#`PA_3TSbgS7&aqQ4h6Tr$/*bkdkrn++eHf),/q<p[MN%Gr1Tl\!Dbuo`h1r@?=YcCY0*QZmK9ActJj(qSOpV#aT+oN2,hr1A&E+O4LgrLHGA]j.;T$fQba][O+;qY(9"+#P],-R9:hu2@V)7%!fGC(qN=EoS[e;"13nJ1iU"kj]S,qIE:il9rt3HXU(9NSepK/uM?VJ,Xm]RM&P-:&_-H`a/l_<k5UgmG$[u@a<1A+P:b<n,]_qq^%*5R\3B_jg3"]'^\:K4P+Xg])IAA)lmJMa(ADBP;N[.%Eb5a[Zt4O6#G=p(uk4ZnNi45f1ETHR#3$gpQ\'>UK*VdrAe;=q6i2fYsO%Q[cJVSW=nQqmlMbABODEfb79@Eq6?*q4E2fha0\&#r5$"aRJb``3=bL`JG<,L*$h=im9qDp>M"R^*EjQqm*.q"tp-B/aQEP'DVSJ%r;V!`#,]V>Ok5DhdV]q_W<;sTCpL9W\AN5ePGZDGU*pS?s._CQ+A8I3E+Q,N:KVGX>(Q09>5]DM(]DnQT[dsTrn.4p$Gl@'Y;HST%a/s5<"p,?bTn;Mk.*Z/l]/BO29siV2*KOfu?7eupU^<>N>m&$mm^Sl59t\p&)%@pgAJ_^A/XW$R7_suu.)ZG%W>::D[GVmdd3L^=%J'S@eIC4'&E2X"Teb5q!kls5*IED)7l/j=V(AS8]07/=dCBjD3(qiMC35n[Y2sktC8"J32W<Qj>@u"Zs4m4&j$CKS3qC-[<[`!pp%rqRTDiGfKhqkW,@c[+%Do`$h*28D0Cl?kkT2X)[VUG@Ar'`Bib1KG8N\ilRtr7.60G<t+m!d&BC9jRd6%H_D4e38$=2hV@^Q9si'%pg6gfFruLoZk)-r&Kulg`FSJ8OKnPKR.Rk/*0,bK6T35.0^=&Y\pie=p0?);Y;gm_FnWQ#[>u#Z+3+%[aoAT<GAu-ph\,V^9j0+>%Qg`%iY5VT"hrDVu["[:CjAUTonB6jl\m3$QrelO%s+?P2hu<U.[`8>U0piIIScA)gQkie\<LnN8M15*nmiR!H9C)DGe\SsHoln/4%qsZBhV;m&K8kDko.Bb3!j%BOTj&;("8bSUq+$W^"o:MV3(AKpbUHP&sQW*@dc,eKA5I4O@kJ+gn@pO:=RSPt-r8I*/DY(\"rMPG?%h4(g`hu^#A%XH$5Cj))6NZ[[EFN,suSFjDkq0,[8?M@t1PH3)Q:eM\b%oYdUK3)t(CeT0(hCPU\N[dK4Ej\AP!mS(.A:!jpmsHr=%UUU5qGMN(*OW7<O7^7mbcE16ah&l9%C0sT^I&>beo/<6pO+t"*"j-ml!(W,Z^f)gj7+mR.o\JqX*Cl#cE5=Jm!!lnLnlIJ(qPuOm%U\*;_+^&B&@5OScqSQWYf)')lR%0>I13K/GoN1Ue?=u0b"P^%ECY5nl*Qot(6%9m@N0%iS:N4a/LRIuYcZD&_IJ%D;dm97+Jph$g%euT[(UJH[?'-J>(Y:U5V]:JSk+'Re:VreDXjU2!&#dHFL-hpHN(8.f]AHI<=T8fOs4*Z>>=l(kF(o1U<WoPjgDR2oM3$#In-p)od%#lSX[Whgb"6,$-@W\F#Qa%4L()$>32Y02?dW+caf_.l,Idm>lj?>]g_##!eOXCW)4".(WRKR.G/5&\./JrS/[?+O=KE1PCPgZoIs%A[KXso]^%$H>I2N;WABA2J142/h4jai%>eE1JW`4k%Yfn9-\e1Ns&ralXi'R3GPIBI#.a'9%hp8%!2JMHFIQUCU`P0J(t6jree61%Sb-<IdiKEu0gUhd$[jWg)R[ue[\04$VOV=-91RFJ6H4,]Y7`4,=fBjr^'Fl,U@2GtmdP&i+hi0,+5(Me-B?aGZXc6]WI02+hM7f"%E[VNZ'`+r]FA'-DQA!LVp8W.P_B!7RO-,XmADRpA-0@T&di>hg;:FN;nNB0TATsbF45%<cGab0E1[..a]3>e?e4rN?r-S+LT&&FQ%Q\GG<6)U)B7G\hWe[p$U:FqgL)=bEr.t0\D\bfn]pH>NPF1'3E8,PX)S<o/hekQ-b&@i+#Mf7*BgD8G-.)1Vjk7<WaAg)<aN7?K5%o9A)..R.K#e'rTSQjD$]d7X-b&B;X<^V65_Mf2BM@XaCZgh,F6+1&h>GYagMn[`#md.O$thI5K"^k!Y)$d\:f,P\\F;lk+WTmTc7%gr`nL2htoP\#o'\&=,PUnP6($T1982gro+l0$J4Ro;@GsGd\0o.MmF&SV-7'c&^[UVtGamp#DmXq?Oi1;sBT-l#47IqTh[fr#gA(%8P\9+o3D67qZi*FQJF_#?ishGp\H>.)g3F_nbn[-[.sU0h\X9(oSq*i3]/ttQ(^'kS`8&h)TX6pHK#B,FYit_\cqCmTBo(3M-bWR%2SR9AmcrbITshFU;bG./'\9,S+D`*TL!ashn%/CX@G72H)!o'm$kkZ5FuIa24:!m_q%1s<+TE/iOpYu2GO#tA[!>PC\+[8RU%nQh%@1gk=B++rf$&#;O7ZG=#is4[/jk&?`l'QQG,YG6C(j!aIJ9>e0pq]6F_%[F;pD#YHqg5s2cdQO>P1kEehH?FOYX#,aOZ%_;I/nA2%rrR?.EO^u=jbkdZeA^;:O;%&9cVCWGr/;HLd`4SK<\(J@(YVsRE[,sYPrgMW)o];0r_N7N.J"SdkIJ4e$R+ZGd(M*Gd.-EaGFLZE%(I)hE$N3aD^&.LDIP2MoG%`#V_5etjF@SAUl14$73-SE\3A)+Xh.&bjQ-b3Y@J+9ne9Uu]](JE;F<F,Vlu$mQO_Z#_k)30E:t@l:%FWkWM+ViKQ8Bt@H('p8p]A[trFmlP*Pom=`Aq@YI]lF^p@j_l7O5ss>>+$gT>Zc+l#j31V9]qd80Gbt)Np;nbb7T^oAhQ@)I4[tH%N`.rQYBeI4[\!675g8:#jqi'A*8M[V$6R.(=".HOQ$#h*!Os'l%<G\;+qDkL:jm9"e2CfjpQ*a%h!J?PjMZE-`juA6lJUA!H_XJ2%-JGc]P/q"Dj$FlYCS#Y.TOA>k@_R<cAN*fJe'P:=-bb/YPSf:WE$pR61M`4bNPTMCaPSfDK?@sb&D$"JZg,2g91<12$d#_jXDh'Z%of@Yd(=TJISc%ZPqjef;Y=H.ca6aXm38W$_N(]#T.9#(uM@[7U[uUg-G.O71NhUr`(BU=RROH3gkq6#q"s""gs&?k#-^bOH=b$I5%RbNsgb%%fG1A,F4+Z4Qur(sj50Z)Enh55_hCX7pp_8AW`Z?\O\FZ*P=d&"XG@9o<lF1KfrqUno*Fg4;5VW1V%ab00Jc1^to]R$#^%1)DA^nBI!KfZr@h?GDA#noT%;gFp;M;R>0?I&gUh2bR#8jNUWn\/)[*Su,L_T%2#,k]DbX$Z"7D\JmPXGS>QB0A[ln-<:LcR1buB%0u\&\cb,!q3W+e16jkbKXF;6F0AhnnU$ZuXc/U_a@:RXO%XF0cKnKMQnWf@I9KA__i-1Ep<<NF7!Oc&]1Zdce"]O../)i0Rk>DUp%d>*K<)<"sSTG/q"%"m0gTK<ZNOc5#'#n7A36"9mGA==>Z)H?M]GDY&[0K^k;"hearOZm:`de<RU*ha$pLF@=04Z'g2'FESeINR"/%lrMCs8rULZYa&4eGg)fG,Tu_Qm0uf*-l8#9:>%nbZ;@u&]C\ElQ9iE/F'^#b70=iQ0DFK/Kh`t8OFI%u(`8hs`b[F8qmlK)&j-9e%980=WB)31I"g!Uq@lUe`C?N!BR$GrH2T3HC!/hl&n6?8G<,ri<N&o]+(%[02(b,PdMHOPNhGNcV+O$T8#Up@4KMP*qi=VmT'[9'R%/b>tTg*)9^4/.D!W$h_(?:+d%?r@DtX?LpD1o\1`"d9q4-;7.o0l>nBG;)5Qi\/rG/;ZDn6np77#^9F3SLM<-q9_%?9_WT`;W1@<%-e6Ooh+N^B9qOn/K.H@H-`734_-kLP[Bo41(4@`Vk*m!(7(:!i*E?cMZ$5c^D>sHqg+(Zg_@M;K(Zk3\/G+KefhV'#)*9+(Rc6:>%VrZTKnkB#=4*;N1+lC]d74#EbGKF[]ieG7.cG0!l(W0@Kd%).=Q:oXp<M,A_HXAGh35C\;V2KaAMd>e@YY^hBlU\B\MP#p?e]j$N%?-C\ZK]>)Ok2@af4PC<_=[Fp`_0SdSN?50h0Q@@TRQpXR(S$J4qn:Y:.:&;B75KJ>73g.70Y=?3-L="i](_JIn$Y"o,4[>/fu`=8%MT_OF*+E8UiqjBtAR?3A('&/0^-@[EMZZ"9*Ut$BVaC&VO1IJXff9Rr9cPYLBHcdrMJ0b\=8OI:2j#mRXGf*l>c.Dsoh*e#pQ$(6%$Nhg(0[%LTb=?Kl[p1h?><7'458dof^24N-gm?aEhG1=7R3\_;@t.Qa.l3`rO2^.l&-2ul[5$E7b[DflZFrR_i%`QN,,l(UH2kNS%\s:fZ."$IYr_`mW[WbcRI"cq*pn$rj\fd&sHHY*&X91n"b&2&WH7SWcI0"rLI)#1@:l)q):L4jR0#SDqQhQIMUg\.fa2R[foai18%-eRh8Rrd]eBU]XLk3W@Q5AlNJE?uJm\_<kiG@+4g;4ue,6;:V]q->t(2U5A9Q?f'r'3A*ajEsS9\i`+<jPAjlp-<,2'I,P\HE^(M%S0@6'Lk2%)G5(cL"*jhjUdRe1r#(_g3Qk]/\tA)tdf+pA?A2o&bU0dH&,Xa7e&tg^gMc/((7IjJe>.uH#c9LE*F@eYR#+dGEN^=&%+KVlEO9[b+.1Li1IX^#(/=2+_=!fJJ90-l\m*q*ekDa;1M;<TP)V3jEo^Wp,SFYV#P>u*I-CG_dC;n"@E6!5Zf.:04Q!1B[nTa<p%[]2*3AQH?;^Q-Iaj%:CFr"4'NqC/)bYe"u^1V&"-Y?h^'+Ij$agVl)&]>Qh?^bKm#i%8`1?R%7sd]6S;Lr@!f\!eih9m0jVV:RC4%9C*.s11,P,:nrC?`(GJ$]KbV3VJ"[>7nb[Q!GdqVjMQ[@:C_Kb`>%rHHq/G19iQ02P(1b`Dp;mIq=]l=5K.`49p<X?\hnslWO+*O%GLD[:oCN6a'/oL%oYt4cRN:M5`InfKcr0)7*4p"1N#(`VRl2[CC3k)f]4f2+9<Z3WL44OhI2J]`8aQFOm.L'>UkX!^leB?k]9SuX%;Wg0NO-4?3Gc.++f\Oa<@X1%`MVI\(.2"G0ViTTgEiBmcJP!2mimIB\Z27R=^Lo>]ko5kB.DG93`2E?s_,VW_7G*N1-V8RncGncH%F_O+Z*nde9HlAN<3^@sQ\L^eLZ>[_Bj!L<mApRtRgo.N>4c/=pen+YgF8Hi@0ukpk4dm0c(YrU[F8G]D0Q1X,KT5Q,T]C<^[X.N-%Ejl11G!6-P.o\IFL.A#P#-G"L?+7"^rErW8mtLN1pNDRfKc34%0Ed;41\Tki]cjJkHRHOJs(^"Oc4A?s2"EW/;(dYp)%n!f>M@/>%I-*r\*)4=%EY809&F]7Rd-R%Ol2.^pDh'VMN4Tn(KLYA\;``4lk/R\p:uR3s,*q&5\nYW2S/a,`JK+hWBfp&&K[@VS7:MaT'<EaZ%eBbTrYK?M>(n'D`l+(riaBcI3ndsFib]FI^ftG3D>_GK'[Sf(:>gp:IXc2U0qupm[Dh(UF%Y8'-]AhT"3FbEP2S5:aNJj(.YA9q@%6,T(Xj\Z6jh%+;Ti*fIZ!ipC!QE[bN#ft3^iE(3k?sEgL[O[X247.C><am!kCi4b;p"m%7N4Q"L5#/V../*=AgI:tk]e.T4hp_B"%dCnt>4ih!@;DT]C([kaj.\F93S,CA0(1<HQ#INtJq<tWlhVV!A2pVoo(#f]mU3M,_!;fZ3AA6QIW[>((a1$KD+n(K-VX-66OVWlu%%Xu,Xd,%.CT>OFMKJYI18aZ&[6.V.-MNa7&'F7dWV&e,Prr$=b9[t16HV.'cT8p[US5P!+KC-k\a^3tE0-Pg-DN9Xq7rMbbrC;mQ%ndBL[mH5Au#EPOu0'CKiii3=J<2n>,T_!f^m[(AT;XSRe:$9g_GH#PEH2thsIGkqZp-+$q1P'Zt!m9ce6fJpC*6]V[^&>,]E;uUW%Ci,uco&ig7!a4&T'\N%s%^n4KY(]iZYB''tW`m\RN:pV!Hu6?P^IXap5XL&fGct:uam[3W_B!S)WGQ'ZZd"dD\Yo1BiG_jPaJ.r(%#mTQ&JH/,AL\2=[GPQ:m\[BJ03Xs2dS,MpIb!sAp3Uq.eW;)Z/JLC!]ZG/r3c*&*oIB)BI>Fi+[;u^aa%a.F#GKINt*'e>dEgN8L%UYN)bo2FKrGG]g7e]d_h><4IPQ@('P$9C,$f,<_Y^/mFGC9lsbkaXPSQ?1q3]=k&N,0G\[/+>0QI7Xn^9eC,7hZ7/Q-B#:cm1p$T%#0#HUo1&.q-[gt<&8WO<M<;k#X.oTJ+e1Ql`i/fC0Rb<>%F&`hGROkqUA4@q]3+su[uhmO0flZK7"IJA%9bn(.0Vh7T+r#P5@#6@%5s4csf809[6NmRXm8@RaGQQP(:!EDCZ@_(3oqII2jmBd1Df8!BqC1Kcmk0B]Q.G<u8b#M-V*I,?@^`^Co+cFe9(B5Y4?jCLPA^=/%:<J:"j"8&O:>'%[T3oQcPMI1B@s74AFa6ft2ad)IaGZ<$@a]hEMl#.,&IT2ImJ48IUGD*?@VJ3t!\<m2W&2X-;Pc\Yo<XQ2f"1%N%i__O97M9"M?8lXOZrWR7G"h0enTp9cp?D=1-_"CL&2!u7pX1K,3o@;AaWA]>N_22@c?-[hB'/`r4YOQ61Z(IU6WR^kqqPb0r'h;U%b^T"q6/bk6(PU>toH%.kr9j)UnZc3AD'*?`WeH[7.\Zb"-<THD"M-6h`3V?)8?-:_5e"FdEu2adpASPV1XaB74rg3`>pHP.CZSIB%f=U-%d/4]ta0^qBT5Ebeb&g+])I,+'_nF3##]'+`m2BTPmR1R%r;>Oik^A^]H-9*G3]Qson;F;HVb05*fT$3Rqq:%c"K2rub.Z;P%"<3K8.DGE.rS6VsCe#!r1aT!`-VZ<-AYq"H$*O=e[Y9ct]q9>JObL>V:8[WF3Q!9O5I>f8lkEW1`LVIh,OVh5?KqHk<mjll\B?1C%.@9.:QC>4%;DPY2!i1_MKsPbP2IENLEcIZqhiU.L_6cU<9np1ljK6Jn?b:YV7DW+L^1R\l&9d`;)CD]O)gOVJ:7&P[,/c-I++*c3%r[Net2`Jq58?]#?mL&3V=5i'bp1;<L+tE'E,CB)]i[Gt$G8Yg##dO(9o>a&-[W>DahtAZf_@EU(?/3,P?a0j7$&o&K[Da;,*_[32%<-].*f/tUu71QeX%R57!ONsW-EjXEO",^AA\nTACjY.^'7gtV1*eiIL`U75>\Ggcs&b@'HM]!npoCDVRqloiRHA^`6L75`YUneGT%<6.!Ko@3OqGC1Kro[Uu?T[]BJ4A0<e[OJP>UYYK6i]:SdVa*Q<I^:j4I@.[R0U`4/'k7&\"O,UkZ3-4N)[hqdk\$?mZ25hD,DgUa%=&*rp8$2(jIK$*Spc1=d-fmlF>crZ_=_rYu-@n8+]\,mlO5cYA&bBD=<U-q)?'M`\<8,&F[KBsFn1Va>l@.'DG^0q.]?eSZ$6WZj%N-)PF5UTdH;6F!?_o%*OE7eiA(Bm0OEEI#)`M`GXLA6T4W)n(M:883ffAD2eS*WqM]NqLtp&.C[d'e<R#Y4i;Tp`R*B1ek.55d5&%[^P8kRgG%])U/e=H+M?54[_p4S^(#ng.Dip%QP*_6\QO!JrXc*#k+qM'pOL_e*R)SBH-.PZun!G2F\VdVnjS6`JsT*M4uC9\&TA5%?"t<Fe`/6=ARuBol>tGrO`'=;dq/l?,$WAfLh,8@EC4,`pbeGa;XbbTeJcXmK*`Lge!i5h(9*Nh;khl*Dj0&(*:8LRKgQjmmC](=%fGSTdoF#p=5#BQ*8C<#jpMOn/2==XjlV/h'k*0FW:A,mpOi?ZGGoCCmn#Z7K7/q#<3'Y?W;uLFnqiA%FPiFnm)p%9)3fK\>Ybkh_%*p^"r2m=?"oq#JPeJShrl:q1r'tl:Y5D3GC%"tnp,ULfDcqQ&a9.>n_AC'd!]o;S]Jnu0Y]A?pLqV+pqR,qn2F5A?_ltg'_Pj"eE%kQNQr\mP_ZUs8Y0p"gXVC3uIIknBpmSm$7SmDLWrV"?D\Qnh76QXj;HbI+[-Qm/*\"l>IAc)g9S"O"kGCF4kGZ@tNFU$&^ZrqVpa%7SPX2&>&Hpr+I>*3A6@QBoNQ*"l9lO:A&n%%m0dA++`%a/[-[Yj#t>GZ8rqVO:h]46^S]0(WG4oQq$4UGShs!Hqf:&%a!IZ=GF>M%AI@iTP?N.+C!0o>NB"U&G\X4gd[%GTE-5eM=*\/TNi<K&K'7_96Xbq/a)+=>":BPS(UZ*"2Aj[.JSCkcWfMbB(0Y3G-.Q(tMf:hL%,:%Z&>&j3/O;sp%X^,ue`5u[Pl?l8ph`^r:j8Q9p:ap%+fk8j*)s5;=ouBlkGs602ARW"KTtYdFp4`o2@Ec:(m-i?_/!!>m>qpY+%-T\o\OG1PoS+m+o1t9NYd-pmIUs7<>RI:oX`'>Al9ql$,Y(h@(3b9ZVlCc8qTL6ch\]AFcVafG$ad0K_ACPMAaGIB`kVBfkK'H$_%O%%@%7t8'_'bgU.nU`i#$gV$%0"3qZqCrZO!b\+)Q0Xc?Tu(K!KRPbZJJ1!.^\'J5YQVdamdS'mcLni?l_G,"3`Fb+jP-48(p6d4%%F7VsA$POXNd;$=OQ0r<8ON$P<GVCY,[QLBd")P\K67_pj.JgG0)&M]bu.k@B@ZQ2"k:ihc4>67Y!G2*OHj7=2n_+10&)jN`SM:[%*aT-t27s0hWDZe:K?2W4opQuon+O!9+"3'hD12J_"jukPZ]AFs99.^7:6cL$K7ACCL;@Ti0>t3!@F/DUK4sY(XXS#9drfE9Gq+%r%`?=,H1U'*=H#O2X'a0Q_&M&o>'6*EBr\2t`+\Dk<RJ,nWAfR>#&;X(7fUnk_Xl,lF#F2a,`abY]iTBC;o7;Wt6Q_?cmmA*(_);Fj%c=(gi2][<r)Oq>QcloeGJ!pa1G:*:YCuNS?]?WYR>ZKP^LINf_G?H`(DV,2l&]n])MX8#`_MTSqdVKijVJ)*d8*Ao>)@m7!S14qX%4RR@jZEQW=\4WrR+pC/l_V'q"Vmp^"KcBsPV#PkkRXFpMKe@#?@CJ*sc4s2O"TIHGJ%2+biD!.D,NukEQjJ-lXPsoddHRch859%2%1Z-'DC,f#4VQCoFla_kaA[1bnId&.n5)9_AJCR/&"/n49`\oVhjfBE=!FD@XT\X_FL'6jSi*J'N?H-b9Lh^9[;^)!FZj)8k]NqIq%%XI8\bT$U;,sWh!:I0>F4\A#K*f;[i%=82ZQ[X&HE29*AK8]p'mmbe*bhY?:I8\5<4:^=)T)__RDIc%Q,;5!nUo5@L6Fmeb.t(.i%QFuJ/)<4"9Uc5AQ[uY-[NgM1(S(5@KEP)iDahq[NVDDTchE"OnkQV'@(EZ^f'@'dA'6,A9@UIl"6]AArh0]loFSDYuH)fpWn%&EA%Z-iABI=hYNCNPiQ9Ei6C"S.'JedXf405o,SO0RVMN/+cfVoHYFG.)M>#AI^M04?u7Ur[hcc9dQf.,LSj5(FGc'H67L33c8D*IA[M%.eHQSW4PP`\77hkgrYB(NZ,D@5*!_9f[)?-6W\Wj),(I^D*P6r2`7&:Vd'J1o_H\g$/,'AG$9Ni$Hod5?S3SDS]6<-+(rS9I6,9F%)bHaLbi%%*1?&-)=)*UfmJ#hn7V9Z8:M8Z&oXmKfd2eU?`4!u+grYtjBT8ph616JWaOlMaRVLlhHsF8lHgfnbr8fj*.JiTj_l%Rf%oGQ!rm*E8?,ba,fUXea+$jf)O?HC#(K)KnM])NYGX9YNRog*j;kCH!UdC;"'kV..I3pt@cs#.OlYIb23UcSTtBSgd@Kn+NZL-tV`%#5c%qmU]A/VX%!CFHPqR5+N-^KfpbX\ZaDUf9H7q;>e'_mNR3#%"/Y$m*>]&Y7Na/DqOY=B^IuU[=M/g\HP<Ga-iqQ>\k;B3RLQU%Ma\k=gP4A'`Dhh9K$;\G=h<:X;V&enN0\fqJe(@=$en_-&,#:&n17iA[AN?jm(;@'ii"Bl1Khqug"K*\6SnRJjYBfb;fh*UACD+@%etS?C)GQ;$kWp]JnI9Tka(Y$n8M<0eLO.q#_*'N/Z,.=_Xg,?\=8KIpA8L+K6Zg>Y5PZJr&.=T6SpoOI7@Ws_qUR=s!#Bb^O[]hm%g&82u3]`n:YD:(lh'RlgOh>Kn$AI5<R`\t!29,aYa\tKm3bq@)8)K0FZh3O"<"udOFPQg67I9/6qrk,^2XeA7;>]Qo;/ZrieTgXC%)S1bXG%hp+KXJBA]p[OiYts>2)4t$]MuC[FkkXX:&L#b[kb6\HiJmR0aHod8:VnBj[b_g?30]eXlD=PY"A$6n]'jAgF<&OhljpGH%WSPh>=mA;^^LKd9!O.$<Re\Qe"HqQ&Ku.Tt=TG@`N%ML$@)``P=##/Kh+go5prQ;/n70J4?OXDfSmf#3kLqTe@$a#mcLSq5\akGh%_ct)=lL$oab/F$-KTArgXmUt-l,Z:9*/Yhcm=iD?qDa`7pq0"EQ;_U*L*-<Q0K3RPc7rr!nEfguWkKMpU2`cc&@L@?5;0uOl8SLn%0_K/M/!Z^s<IW:Ir=n_DHkcoajYPlT@Jo./s*DgmMT=Df"T6qE6MI6nGd1,]=SP]92MSZ_i'=G_I:?UFBd($._+g?/i&#EX.#'((%#/@RuWBQkHG,NU,j*dXkV7FdJEE4a+_Gi#2Y*nJ#f/D18VMAh-B0+!Y:XjIs+A6d_/sXdA$tXaZc;gl`da.>/*]L`[=#;.MS33?)%T%bKlLsLIGp7/E2<TZ&^hE%cK[!"uorc'6#O*!#hSP8;;`#`WFIcNDSbYB9s2qMahEKYE/b'uf`Oh6c>;D.Y[hdbNF1Bf<Hm7-o>%gUnF8l?5^tErJ&aJ5k1V)GXc=%S6&[WUeg.-"+!IlUE2-[nRsX1i8@UW_Cm(]Zg=?o+`LHGB3'`7Z+DuX*QRIS0-5mdb*QZ7dnub%!?D9<gh;8(l;V(Ug5&-J89t43AK1t[ctZ*Y-;P`$V?>7_9+]9NZn9_h_q,8(;N-=&X_tDkh+)gfH_IA%k""mW*pIqnG4;j2?+30>%h]668oc<2;J*\03B@#q,Ed)_,=f+r2O`$E@`N>&:k"J8`#THq2l)F$"<7hV/%8R=+86]%>nTo&5ZpNjUiCGUOhUrNd[[B*SOPV:Y%k#JN)SoX]8GtX3*AJ<Mh4fU+]BnV`7G^KRuL:5eT#oB]h"%^D9Q%/*1pFQWG_P[+Y/O)<?/HR;llo`BN=sMJL:F>s!3PDXcHFXu'%*K_E;/m1e:$9VogqiIU+?XauJ8<9gbdtdg&e/%:kAGGSK1_@D!3.Gd,bk7Yr>p#.%m#flPn5VK\[r7=LI'fRlKlo,F]mcqsbaacd%;)a9N7=1gX#GmdMo;<rtUp)IIB4!O:\UNE*h6I.27u;P\%[-NV:HunWB<oHbUptlq1tS'tEp/=$'#'<[*0B#_;5O9dOWDk8GUf72%2aZ2qA-pUpI]PjlIh?$%Uhr#%&Xq@#]sWKT16I3&eND;Aot$@/+f*1X18>#WT0K@(hk+#5:.O(9$I[U9gbR@*A*Y:-OQQ#qRZ939%7]J-sR9gne&DGX.<iRIrR20BBWj'&X&>Y*RERLQe'4^Hp=IMLBh9$Flc2)X"124.O#Us>Ukp4k"WVh)WZ5Rc_1S\'@_p!Bu7g_9p%&U7g8HYjCrg2"A-k!<"N[\$&-a/=.Eo_5cBdgpEN_K3\Rff]Sj>MOCH$>Zjd0<">gp-d)&6)%`9;,=s&"fW2j*uh]cF/r2Te2!)F%:F0W9immHGVAMGqBK\j*hp*t2pDq;Pp%\$<EIQV*He[(![eTc:UXQA,4I)r$e\/"4H28<POY-$.`VZZVqF5C6(+=@V5.Va!c`LBR%)#p$a5.q93dil?$$H6m(Mj]"6[pR&!ig/WRcWOa_FaX%.c/d2NMV1,lr[K!P4$A;Lc?FQSVah/>E9g3&E+dh;X?4,/*SRYZmPmB^%j\FMmB8UOJ0o$^Te(_DEZPCYC4QWVCBn&XDF!eJ6GoCUm:Cf=?'iKCEkKVW$:<rX!93`U)E_`>oLqj?s2tBdA6c&8BKPMhe/\gdC%p#JWl;q2sGkV6\XKn@K7.![)qTieXXr^l(!1R':o'[T''k3.fg#R+T$,-PaqaT`F3D^<j]#t6lZh06*F7W;UhAHP@^#)PmC8Ab^u%hS5V6C>IMHHuF?M^<LbL^E!FDZr*:9?W0OS5Gk)")BD7-%S2:J'^%U2,N\@]m>qOh(bM,;:YMW+NC\&bj+nD;]T*ZR/k2l:A)-13%5$+u:q+Ch<me6@ONYHj?)H,-Q?KD'#1T_'>;A:Dh[';^Q>YRb?_#''8;XF?D+GG%O]`2VM.M]>E>b<!u!dU]61K*<4>EE<>;:$NU%s2,oB?7=oiZlX3TMEM<!5A$H:ngU$)<UImXHMgE=LfiWMqsE69Z2:fhq=i5LU9OIb>e3)im)OT(I&CY94Qb_F*.DNdFC1g#LcQ?,%"O05X5#IQfp1;f!n`g$b-DCH\0TL=G3*6\.E`35'f\T__(lb$V7gF(rTa6OV<C3'UP@?lB%n^9lT>\iB6%E6K!,qQ_@6?6OrA!PI%c9<DZQVW,'MIGnE$_tbD,e)(+c:*D_U3M*`ll$r9<<N6U7]DUIN_1<)/1Bf90S@BRR=Ic<;b)3pN;j3;&PLu*%I-Th):uYZUmH?0%=SF)W6k1Y5*_dN=SlNQoB:e8]@kXROJ!@d5W7kj4OcX.')T>B+`;`q?E,kh/2n[a\'@2a#P]eT61b]Y(Y?*?po!a((@ZBc;0+KiN%bF'5;oM5ClC]T5G='k7-8?CXC&'iW!$=r%^ZRV##IOX_\GF/cJ2tnh$*YXIRhoeN5F:X%Q&Bh/$@Z.8L\R]#Kf!;L\s/T"CXA+WV%e:qc`i&4Fq:/^mmdKjYN*Z.Es62j_p8(+8m[(Atc/8EpD.WIYtG%u4?I]'(,j@.(50!U2`bnHGCiI<>tgWJ+NgOU(!GZHd_^0ls0%Zg'DGgWJe70RF,1>`X8+-kNgk/HbH,3-T-TK-l=B5(AQ/_r,Ej%a1(RK2f:f,1T["6TJB8O&:9hT^e&^aZ-80%ubZ:jp4R^IC%_r%/BV8!ln3MM;J5'$]!ZN>G?rBd3cRS9cp&%\_afRf[K*uX/KO0+eToBET]dJ":d#E(a;ZftM[hRq3]krJPX%0*W$?r*bUU%G4/fNa%:6Wn"^"HD3_$`'$DBNb%P5+%"F=UZUc;XCL<pWJJ3Z9>8T@&Z8_4,_;=j3$I]e6q2'h"7c?gl,3`G0C@]+qZD[NX5D82n2A6UF[2%4$7O#eCfO2*]KG20I/$$/mqpH5K;^kU3p%__TV+$Xl(o"l<#UBI[.os@"#gCLQ8$`k$J=[fqA*ZQbc^kJ_djA1!>OAnRmgqH^Ust%@V1V.1r[J3N=Y#Z+`Ntm3%H.6mo]=D:#B;c4B4N]oQFnb%5a9`r<R]40nY*q09rl]NO;>hrq9u?\NlR1O'Pl0.f*[R=7VZlVU"#;%[ZB>k&9aho_,N56SnS=Sa0:GdJqq!`0@Rbe0#Y(),iCg"%kZ^P+BICjG;O:OHT[C?,rU]DR&Ka/8mOY4&K-amP38i`WGF@g+>QaA%Fp]V([IM`Xc^0q_Y`R@2I2MGWX_A4Tp#.#92*897O8+)38fQ4@;@5\D%:pc):U@89551`NC.K_)$<W#GgAE.To*^5<,Wb]-bN(Hg%#0h)Kg<U]6W->S.q%[Oakm;W`rc=V?0feb&#OBYDJRsZ!-/s*d_NQg*I3Z[6;T);J1(-(R-%Dac?``2[O]B>:K/E&`'(G7B^C5s'%0&am?P-p<^0dZ.Q+o+;WHghM2Z$/eUVA9Jk*CG)/;`i3nT=>Oqi0E4[UlXYMZi#aR#248Es"LKLaD+XJ\Uo@7nSGORqD+b*]6D$6%qe5[,#ih39Z`!q\Hjug0i/<d.Wkaj50Y>cd\^crL5-Q@I[Cr?,cEqj+NifIk2siF4ei4]]me3,W?k9HZLh\HrEe-C_iN^oAr^pKP%kHS%_r#"1:Zh[fL)m'TqHu-3;jp;4.m[UHO%Q8XJ;ud8d_*WkOPmOd)kZ"hf`>hRBP:m<nYo#MT4-]Qg]Sf3WLH\a-N;GQ\XJ!fK%1K^Hu2QKZ)nYH*D]\PR,p/8ACWeU&PGL""Jq,U"2nW@`Y^c[=s;^Wf`=ns9G?8Xg.BCh,/'95)7oJ;qiDrLoF$5.$&U;`;6+8[W0%^NND4`18G$!G;0p\==/MMF-2(I0(%kSVW_%ao^Fs](-XAU1"CRql.%AqCji6'U)_s)kS?(5C5K+84dh<2Y$Tp7[nkG(,Xb;/+-K6%WHAsdSjWSbPPnWaUKo#obBiZ<^`53ME:T0!O:\X-2;4e&K_!Q,ctKXu\jfmip&U1\NM^96SD^KOd/_<-^:du8/mj5Dq'aBi.c56o%[ZY-,0Xh>Aq!$/bUM/M<ZIMV(Ka9EZ6>ddNrU'dSU4%<Fr)hLrd[jSBV#8H0(JPd1A\V1e@+QPD8iGTtbq?F$_+pB&m,).HLo.jD%$_UM+Che"=0]$d(>^Jsh#$\(B=a^Y\L11Lg*P]76_c^I/&]WfYL'ZH#F4IiR<&2.#L2j7OKXTt4rk0>9,!EASiOD=lY;Nt4[tV=m%e@.<Jn_rB[fg<:j/->Nls'B![`uj+Qrn`O+<V)^.EjK3\cLUtJ*>GlaDcLS/8)n=l"2<a(>=3U=B[JMp5JOR[%^tk\Hmc@1J^tRE%,8k-dM&Q(rRD4V_2c&\m0H?A)bJ[s`<)RJfKh'/Bp3%0Hf95;%@)%nCgMpr5m?CUie[9"Hq/CN[c4Qaq/Q9CEgu7Ru'(GukYLAM8%hL.JVh2j0-@HM)rnZi@5+C*"lZW'Iu#OIjSFtu`brjM.&4jU]\bqn43OZ@mpn1.ai[\l8of5=dqb5CYH]IlioW!?_sf'[O+*>oK_%R(/ZE@C$29jlH@,M]Y`e!-8_F43,UT"H/*ag]jSaaX9S,_M)NM0aD6nB*\@Vco/1+ec8dp:#A=[iV?+pEW',L-$/E/WgbO''m,#r%H>;[!/*N4TTp9EWm#^KIFR$?e<GUgR/*N44_3Jg"1o@R\T[W;OC,L,$'m*'Ui6!p!mM0gReUgHGd)B9@kd5*@'l3"QOl?^/UN`t8%%@qhL*Q7hjWM+C:THh"*eSFC(/*KgB^JkZ5Bg]1!*DdtY2FZW6@B\(^F05X$7jZGJo#UG=]f0itpi+N`<0i$=l-slI(@P<Dddig_%LSEJUqcPu7DgXuhMWo>,6?Qjo%#NG.Zi,'s7kkkWY&Nd"7'V4$Es(R=&'Jg=VOA+cauSAN>KC(JT'0n'6h7=+oZ1:J%8#//`)$A$%d@=!<;o2a)9JQ+A$E.Q#[XnY!4uS&g9cH/@N=EML8o)LLh'G#IVRE_p`j==b2d8R!nNO&MmkVoF[2N6^<DHDS=0\695]'",>A[M`%g^LK1(fJ4*RsEodP/,:GYis%Z2JqTsX7FZ1c>&Vm"MJQhO@RsXB!#8c]fnZM[^00&peH3;*I9*YJ6;ZWCn",%0hpX\EVLi>/SPiB%pM+1:@^SgFNQLR.X9)<M+Pc:u4Pd.dlM0Mb=.D6LJ[N2V?T(VM/*G>;k9:a)=5%L%Ht<7ee&`WSlBu3*lfYqdhY25XDT/-^[&\KH%?,n<e]P:mk6()nq=b*VX+f^/]hRIopbS%]23W:rOo;\0\MIN/gU<?BWnLt)1^aulLq:iNWH)":QDle/bjRVKW0'%Brocj3DO^>%o%c:M5"!VkC<WdJ>`R:dH:oBIg]<QALnZ4GMVYkMJs*UK0pkS6Gb_F[&'K?sWY*fZm_YPLl'Q-0&GKbP%5-#Y6I0os"MTNXEqg%QbI%AO!pcgH0iFnPLUAl"g/,9ZTuOc$Mt*iK]<CR@,[Djc:0iN[-P_$q9PuI4UXIIa^BE:rumHCKhqEU32tVU1Tm1o#GM5'!KK*^g#e_%CWiPuD"]"a*igl\hJoM7Zct<Dj%@';Y[g3-L?)0l%"i#TaiLt##mp2Y<m67mS6(E8s$86%Og.;Gk59.40dH:<ZuSWjnCZ.ZjZ,6<%B3UC9S>K_BQKN'q;VTB-A8L<)UX_.U!$LR4]46[Q2#eF2QYO@e1GYm7c!$8+Mp4Vf!fcf6#RGYg`]5:(]/U&m0W7N\g%$+QB,P"/%6(+9T;IeflL[*2gAe2*)RuVR`>E_$1?=bL:.16AM-F-6Aa#(1te72:XT;aEMJ_f1sT^ji#m*ZO.A(TEeJm[uP7$V9]2U*`.KtZ]E%]"1o9Xs:4X^++iMPG#t!LK#-Ofg1(h>P/nmB9AoHch%!\I=,.r*_qd8N"p?Un#:B3LKim<1&pocDEPAAH8pPL]NPK-l[Dud4&f:`%LK".^F%+k6Za/'9Xs\h(XWGbr2jF0aRd/ic-eju&XK`fV@p,ado<MZFf#-1BMd]99]'A7E@kjn-3k&2VW2rJnDJa_E!>O6$l0V^O%fb8WoEo.Pp;td+rlmcn'Z4g-n,-b%j'0o-6XhIRjId0HT:onpZ$tg$7>iqRcmX*m*2&[sIF&%(OpV?[\nJqAX=kN6aq6=32M\$f@%^,_)0ou[k'N\'V<CD0&8ATOr3],l#-_n31WXi^"f323mSGgWj.E#khW@lSqUa!5oLE)mbsHq*jnq\u%pj*W,V_eE:LgT23P"SOqe%%=rO^XYH,Db[I4)ZX3mc2AN4``Yo+r5$3'KMU^4sMiT&[T,"?-NOEoN^ir64brR=P++Mj?Oc&(uUEUH'Mlg<JMP.&G+r.raG7:ie%?_:j,erB!hWP1;/l1\?!Ou?co]:QYN\HTe/;"BlEiA<(I@n4l69B"[PJmMM-*0JBJ?\/+C9At=7="[bcB7C-5\kD!e:N'?>.@aIg%b\)<HkN3VQSWe-QXW*;U$D0L%pSp9H#k-i8'iH)]Ol%fM#Scarlp:(C1'2&Ng$[HUbebO@r]Vse<hnRJr.O*R3\RFPh;m8>]m:JR%>DMk7GT74PLd9UJH-dQUFDG-u%\L$2pkm7IZ]E8e](JtVm*878Gq8b3#a_"cND_YtM\O=Y6h.=(?bU:kmn8j\Xsu8h$MdZ!:roPq%d3Sp^A(;EM#Nd0[)(0JWQ<n^2jC$6AHp'I@SOr"4L690n`GW;YZP-j>fi2D#J*_j_66iD>ZWjnJ[r0n3.919Jh(%d.BDn$['@Kqu%Um7`l5cW@DC%q./i_s]sem^T+p7neH9PCt)D'S=h>o]CjGo,TUYk[)C[o8!OYdsQSbTEC5h&]fNm!un/DA@>iB%%@VG.mXtF[Ff'%^Q7j]eer2doV(88hQ7s5qr2iBhqe+FWe.`1kj^<[cSIc^mHXY+h08))4k>$IjC/SH:GJD__;^96r0StFjnZ],:u-045.96M4kTOK%i>YX(HaKBm*q(,LeuX`"4]XejmC@6dWUni6CB*hIRd42V-96KFH?RDNYNXEfV8\qbI[Pn:./MdEl+S7:k^AK$H!d2e<G$EDVqn[u%93rh*3'[.ahn1Q\nN/u(]*A2!T_c02`:'?][nQ[bQV,SM&Wr.AY3m+QiJ;ESeT@kS@Jj-Sfu3uMGB'ch9kTi^^[kl_<D@+m'@_3\%fhm%fK9_^*]%&;QXjqN:MDqd5C-"G^?n?)qVH`;<&Du#[Y'Ul7<_[6$S]9gHl\a57L,ILrl0Q0DXAVc*QY/%CDn2`[3r>A.F][&f%39P#ceT>uBF@u3%b9W!O24^9mddo0YWi!*AP$6,8^1o^@=uu873U<W@ZWfXF05I\eF8EbchJ,+?4,)9`:%oTa/RM686ErCKe+orJ%=[P';SJ&6-Z!+E$cHc#<elJuPRa)CniSK5F<R]WL/TKPJs6FD\!s$N$T^/\VZR[-(rA(ZV24\#)SWeKtI5RQ91$ir@X&[X%e^E,P%Eii56B/_",$mGqS[(;P'0WAG7I<#4e/U)<#o.=9`!3#)$ITcI<@k6o+hSm(oX)mkbeotJl+7I&gSS%E5&ucO^jA74aC,.pm$_JtH%\K6#s4du]<3$`]JYdi0=APhM";bIP@>aYYG>3agQ[ilV69HP1mKhdZ[/h^rVa,&r@5+5Y!,'HU#HX(B)QNXY*/SjmN]AM,>RI\<T%qdFlajSl?no@>VfZ*.=Wf;YHd=`ksRpGI0/p*[%kc(.nSl#tJ1b1GE#O\oBBR_+94U>87^bLA#p??9b]IC$WNDV:(@j5W"eF2]2,%d>g^h/Ql_+]XH;#a2dC%`[/%n4%sKUk0BS"Ii$TploeT_Y;Ir.>P/h^<(Q2bUY3.U`O!G.GnYu%W\d[`ke-;%M+qN:2O;jb'.:EJ%Ybf#F!R.#FCHW7j1t=?opTpQ`^@tSFhb+]-3UDJ%VXi@MmX$l,JF_J[k'K$$!;![pgO3QfepV>5HsHVK#_oX(*4U.aIDT.8jOrtf%\m.Z*9i.&cetZ-qqk?Xjbb_PpTIkR-em9tHRXhj>SI11'X`0E-AOe\<erMRBg+Gln2K_nMESmgT'+ru%N9=%aSsoLs^*V6(l48:i%>YAXcp"\S7'f,!\Dfm/e_cJ#!:9J%(7/RGG^KTKD\$(0afpts4\F&Qd!mV]Z#p=29Ip9;jL$[uH\m0$]]rG.oKab`o_AeEfLuGaO%+iBH\pg;ls[od!O^>j+-H6R3I`Tm1uqmk\2LGur%)t&s5a*!33b7/[=hN[cHH6SiJnl?REKcBHMcKFq#+6*<T4+I"<rpGM&^SdNq%lDIXCVF%GV@JA][Ksct+Nc%T7m).5U!*_Xe[]Op^q3H,%?[-$.L]6[$<u?s9^$32m$H$">4m*.50,F/4j'2tM\(1[=0(LW)6J(=E%f=0L_m8A?LWu,HCM$5WX6p2=&0sA!0n!e)1drIlNOo=IRZP@O6@reRTo>mI,Q7-7c7"&(6gP"rP;ONC<O\.i,9Tf9^GYN2>XcEHG%i*F@p13'AMp#R#/Z3n')b*\K7$k7t<)R/#!VoBJ):[=uh`dJZHf!r/d53j)GkJ4]0KWTJUQ&/sc]C,47nc@=@[b?cQe"6CsT??=k%H0M/?>j^ScS^D:;e9HZc<u@+hWb8dZ=![s%(8<G8j&95J<:<lDD\g+O5e)nO+5IViHUjFA_t[eaJ+OWqi)ca@CAVljb?ZH8YYc[#%#H)_S\RX`fW<htbnA:"RA[6m]Nb\<m?/IMuW@IL&Cmi/XSO5PFbde!t14RQqAt<`e_kVBkC]DI=CuRnMaf,R7d=RUQ#HQDSNEKni%Q-K1V8#28N48&#<KGTLL_CcY\20e;1\7n@df'a2-Q_s9pZ0:/a5Y$_#8i%%RamJZ.<lu"'<Bf8T3$8rd@U\]3q!(h5pYpe3Z6_IT%Xdj=dlU[-Z1U3+B[*jj(_X/D\j(h/\+I/eO<S>$b>Ng?!qk[PR2rE:aqs)3;-qccK0@l`ElV8ei"(FAKR[%tN$$3i@XA5[r@3RU4%Q%D[(U_u4cgEpnT-Qb-o%k9VXS6X2p"6BEcfi.Iu1?;]'AG1:cL1J"sfQg;IAPS(hps>jOrl4YRjfMPJOQtEaV7&Bd+.8q!pE_5B%V*br<VUMB6/SMkud[&Wkj\hB+Z:!)[\u@oCZ@)<82a<e52(Ac7l54u:+XqlLZb6(:](=dT(%?3iFOBcsRjI0-jK_QS+jn0`=L5Sj%@34d&PuVPgcBR4?&cfQ+EV-Z"*:.`\jlD^sZ+HgP<Z'`E82f_ojhL@KQ^0jmeug@)BRAUu;T3Mhl2B_Sf$C1h1<WF:%&#/d<=beR%c\h<k0BO"W/=mTc!6QfVB&5@Ro80kTp/*X38&LSC(aHN4X*jRuG")XZAiVc!9j$hf.j1/$;>A-6%B6S<9A5f?.br@e#(eLBin#:"%,&uf2[ThoncMSH@OY;P+DpQ[P+dlU^dk>L<A3]5skX0BlJ*C"hElXd.\7nL'QJD7R8cdK8qqCV@htLIbk]Q'JmJ>N'mHIZa$[$hQ%"2<C>j-H)ZJ@XL1'*p5rb[ORQUR5[GcP#9\7.8_s1"S(F92hq;4ZWRI-l4diiE`,ad'%Ylhj*o).R8Vc]%-jb:XrRM$IE]#TY]sk%72;K5qCU1sg?_XAU'f6lL3!,C[U^,GNN0=e!Hd0'l_b*:h6]0/<EQ[:d#O]@HGc`%b$PmVh\nbL(jUrf5hE2XL)N>3(cb7/ZT,#C%?HW#3)qgOlPg?c^FmYOd\RZH+GU["8Vp\]7;Ef_4rem-6)8@HrH^F:HWH9$-RP*\h]*J:8"aeY=q,4pQn#uZNV0iYR"Z.XD`HT=s%nL>!VhWh#q@^_<'Tq$&o>H3k0j^,\Jc\D;X]mdCg>Jo,jk'R'^ZU2t7Pa8r5c[dU3>Q%Sb)bR`ocTN0)FZ,KAHi6(m/(\gFhgt*q%IV)@SrOm[J4$s).p"\lr^QNA,]+o1#oinXR^V&1EI;4eQM^@ibF/lfm46LASHi;_IUu'DT1niI'*^BmQY,@`c-]CQlCr#M21QQn]%gnbg4j6O5,ceZqcr3;OToi'Jbr`6d@Sj9]&YFk^C.Io?)om?YmG!S($"6&q.laMV;G9?SU/TDli$MXB7TXaC"=p!"?L%!;%WQX,`%k?`k#[H/=polDZ[U!Toj!VbSrhrQ;Ol`GW5]%7\bolL"*PPHq]IC!b"mO`F^TDO@YgPXKfh!8TS^SUNGd?^ijlf[Y>qPei2]%>9+%m&tZ;T3@7gJ#hH[mc3oK:<rT^I)!2CcN]7mI"#GI@D:@>)WdDP&UWrSmJ4BGc[B<(0aG>5]mfD4H'!Au<km84rDl/-<j$\NTDS@p%Vd0GKhWs?(-HWCXN>MM1ddV<"hs02gmc.Nh[@",[/GhZF@I[Yg?WZbXBUI]5lfXA^<c7Rto!4:&r>+&/FK=:K<GAo`kA'7!Ne56\%%bKmWIdV*6>$8W*]m^3h\,%\)+5a9%E#8!'F/]XQjrQZaBYD92HqRGt3bljWHi8D#%$,IXlaYPB'1:MYr@jPFLnWS*IOIRhNdL`[%2``t]Pa8u6cS]N/'O+edPOko*rpl@eMYXB"nr,)c^=U\+#O8epX^UrH*g/TT(f$Q-l!?UC>1%KJlfVRc]3pbNH*<i=q&&GZO81Gb%/YkLD=9H8NaR8g!/a:1Nnm4QXPuL!+po:K>OAFoMIU;n'f5n-f]5]NSI=$sMD9To2RrLF"ZJY1\9'g$anhFKFm6[:`C=dmo]qoNW%\B1\i#Yjq2f"q@<(_77G9gKLOOWZO0XX9;slNnIm:G"YalI3k.R=9h)X;lrR&#WW2qY!Q-h,-=8B^=`PQD1+k:qH6Pk1Ier;>FVh%,bJH27$HN58H'u4<SpSnRm6MW&://8=nqZY%J/"c2%\V.3W$AFJ%k=l6pAS4Um(@dl8UX-nb!7`R_SX/3p^1E#WEjMhC8JG*UUOW%h;i$MnT1INEVu(>m+m\JLXG),MtdsWA;A$9kiVLkZGf9`6MTrA<f>3e2Sk%-7ZY4k?<UUgH#V<H]FLdtce/m$rc9+;@j>-VS3P:t%jgWMI<=uYm-BhLk3giT![HZh[d%9gqLPAh8fSo9sP;ar!/oN-ShN^:RJad4H3'u6Aad_ub`)L*THXD8bF.MnWEj)l$+OPV#o2duc%PKVO</B#E$$A:,o@)B8;ab8IW=lsIjksr)qkqtB&n!aPd_b%GPc#E.Cbs=;<7?sZ=C2mp#SeuOHBYW9C:oR"pjiYh[R+ghJTsZU1%]Bj$cpqYAt"[0>0aL<(b#&;CL#BI.]ofrd!k/I4<mhT9'=a6rOg^9s5mRB)tgH3QTVqp17]_U)+h.52O+PZCY1:Y&HbZ0?n)rP!$%W*ma?R8H$E-)+;W]BANu4Z("FbK2I44fV;!a#>q1n^@)I(&`^j2[1^1[$r1Hr;hC,_3#CrSjh%EKU3S(`+_CM;1HtjS2ge2LdUr9%gqd"*k_mt\D%$mN$/>M]lsTsF(/jFUj`J&OS4EXg9#Z^Fn@TaCenT:No'q;:$4i/,`Wu(9V*0Xp#D',MW#kD@O-7M,T#I;p+DlK[%0"bs1BZ#HprWcF>SF5TX0UKp^[&nL99c1LWF'\0!$K#bm=1>IL1'q0,2-FP=!ua#Dk_lSb?D'O/%C#*jHQ5oV*1s$^3d%mLN2"!N%'dE@oe",P`NB3n5e^?D43NOC0SL\)0k>rKOWheJ*7+@6lg1"la[[:0[6f*;KBquRZ43[+:/A(+upI0OmHJch%3cF]NE@l:3Z_UW\%=YL)`G#;nDM,h`G(b#6HZpq:_omL\YH%+>sl;aGDV>!57G<+RGQgVHp$I+[`3LP/]5A(B&<goo6GL*A5BMD7"4B"?V25[oU@T"u#%o)c4O2ec7lDUA25#ONm\:YQ>\\A%kM[L=DQM^?-^2UH:2[S7)oP>@AD:qe29.Y,alfdL%8ae'R7@tP)f[MPt>&s[2a.KJf5\Il]:%4#naApVLdee7ga/MCdV5`<im3DkEq,qJ.=@mVaqjfe*#H7T%R_[++pJOg3R!*R-Q`#_-kL]TRC$0oQ%T`.@YI&+Ei($#MO@iLObk%6Iccn:s^8H'Fq,,b&[oDbgj'fEhl<A>dA5)%?O^l!HBeTpn8ANn5Y\5*?l)P6<FoQj+Pj(73b)[:)UITqgQ,$Zo=_XoKf%Bq"F6O%73<Z*ci5,+i;JV5KnHuLeraY2O#c7;.pbia(g4Wmk`,gYkCp:3^A?DVE5\:q4nGn:(Gk,qQu@U'Y"02ZUcI\Ph3!^,c7j,Dc(\,F%!%]mID_-FsFt+rDRertniF-^]fcTSuXYdc?GqXH;]*h;3^12;p$<tSJ358J3!"bIpcLq<qI+eRP0&K]Cc'q'W8UVfs'udU1h*8D!%@K&sp':AsHdq[Y1%rT9!]:5VnB>Z^@[C>m6IYg4\m3AOL-LOB7j'q4O#!&Jd4,g>I%]O)/J9sU8HlcO`)L!KX.S!>KU'\=L8Acpt%,4%EcfJ`5H]M.`Q7KZpY01"-/jMZ\`E+XTJEVq)ZA/)Gh,u2uH'](:&]7_i>,85A]:5F0[2i\j7Up`8J5hL*g25s:m+H"W@c'u$Z%@?K'Q-Nr@-FcuG9eNX,EWkEQF#R6p%_!5_05-*`#T@o8E,?5N=c?UQC1Q@f66L#TH4r6Q]*_Sb/BZ!GSDg#;6J5jqu^uekLn!QI%%$ZC"nYV*)R=?+?:fkD;tO"$KX<Mjc$8_X;s0oV)+6iNN;`QW.SP]banU9WSjSQ%ES\OBdgOlbSlGrG@9(FUYe/O+iVgoAbZlq]Pi%e\$nLdHS]u'9#:Pku[k[omWbo9FqH;?3K;\T0:T7/p2'h8EK%$TlED]&(1/"23a&Lf&OB^5G,oCj.Gf;#KiVgm&`)>41^.Ol5h<(%+!mTY0[%HBb=;l-cbDl<Y^D\.@9FdL=?]>"]*F[\':+[l[)c^53+;V262=ut<1L1?PS!UYS?RC*!-;:(:@K2K+Hsi]q(VjR@ZfM:%WtA?=4;fX(J(E?tM\FdYgegHLGR%4b,S>/I%"LLR.CHD[K@C=hP%k];!4$qXif+Vl(k45NMTLW5(-,*pP*h03gnEfcXYQs"Z+>8l%`6eJc#@F6&ZLBuLINqcUP^u?L7?NLjU:S`c7\TB=##?I9Q_$![C0MIs55M@%nH49,;ju9_Jsj'^nq2p1)(YAF=S:7kBW]`>i>=o9%b5Mm26'*qBYn*TkkPoT7&4M]gMNZ0edhhUADfRc#^\<N"6sqs8cIHV)C=jPl-bWimpWop#lHI"i_c\Z,9]n#9[@5#MH_"$C(F1hc%'b0=<&F@P03b(A&o_"5`B(8TuHrW*Yp05KplL)IWD%HO00t+Y88u<gLJM9\OmY/M@qDa`7pq0"EQAGi817P]Y[9$I.@:uq!S)ib/%pdtG(,$*=sk6LD&&&ai_'r'nAT*Z;Eiu\g-f2Lg04O+upi6P.2>6uUDjdPI45-NIIVhlX)a-58'.aQLIDF99Hk>E^JEcW1W-<hE]%3q_EH2jDOk%@I1hF"#T]*/'Kmo>a\?PEO>3_hOg&Itd@9Z4\3*Ad=\2@L.V?Ci+Sb@aP2D]&V<`pB>VC;AJ'/.Jbj&MI/68rJG'0%6ZTQ/9+e..8rt0^LfGU`,4Vf3@TnhA+Xe5k<F4j_3ceL.6[sW_,7rGf_]TMQ_tnr\^apqG/q[8,IpbZOai&/^WaeLV]980>_ISnT%8i`k8^t1;.><T):Vofm2FASK<$.>(h#/LN>DTu\q!3c[mP/*uA+g^()-.SB%XpRmuT#.&f+V4)*"bibDL4?eucW^Gd,R7cf@]?e6%0dSDs=2QNp=:4]'7^9S3'ZS#P-!&ae4icCd+%#cS5EIcLK='U67BnlSB&,8CIbP!M(MOmr+M82?=-O1l\D#7CE`_#-YD!MWGarR3%L,[bKY00N<@HX'JDle$7=3XR*eW#r9IG8n8<E`!kh7b#W)VWgW,JRD$f1GlJIlC@Y$^8><X69Z.*O*suc!%:8-MA<IYua]:ZPEAi%l$X913=u(5VL`9m)G7pXRl4`jAJKR/JbsXgi]i\LF&A+Tg/00cEia@tr?PAZQ&Fo;Wb2,P3/rSREcbeV2+B,EKR<L?\<cT?0Tg28%$2d,+BL1VkpbY--XE=JcQ6JLa5EUf_cVWuZDX#5[,;N"l&-gP]5nC*uM[0r=+G)7X:^0=.%eeq;2W?S9'U$CTk3oJ`<S=RP[6,57%#NBm6nG8F9>-n9=^(\@n,4LFW'0:^I/!3ethg?bZkCrl'N&cZfkJM6gBKuHpVh1l(#+mebPP?VbT$Gl.e0MbqN]Og0!2r%-;T?ck%LNEc&00:I3Dg#]U2qp1Oc0guE9AYUWm@BLnM)WUZ^psb>Fh;DdL<*Xi<;VM-Y)-']*>XAlX_JjS8ni-VXUQ$sEVVu]W!USV;UO"-%L&:i2@MUaSd;M/]K?js32A_!W6O@tm,&ho\RW8J,>OH:I0Hls;d#M`rN>nKBjHB=:X*q2tH`%jFI7`ZG9F%"9T.o<;S[0!jJ8_A#%0s85gR_(OsN)WpcPZ2mJ=9s<'TRBE@XhKjM5e"8)OPWt*eQ=+PLGuoWNWJ6nh34r(XRML\[$C>!f12quN=UfpJ2*E?ep-hRJo/.[%0WYR)o]o6%IWtOrTAh5fO2saQ7j1BYrWIGNTqV<@b!&fg\a()ZhE>VDF_=ehWr,i0:jiB*(s`]PaF4DT0"JfUrJN;=)Fa\</ihYW%D$jGG'pi1s@/j5nS=HjRpm59,KE[n:J(Z+YK\$FU`?baa7S`com#i"m2W<VX,Q$KqJ_.s*?)0&Rr4j9Grk,;mK3%f`lf7RhcGQaW%J_.s*?$4Kfk^O'D&7hLtd7\3+2<K\ri@qWDp1ABa.lI;Phg=f&l`ECb8Uq;Fs&&Q@keEi3U_tW&n2tHY:ij;jLuqp4YP6.P54$:@%ojK!@P0Qd6`I;IN*t;G<5J[bC\im$"eV_1:d+!J&(kk7Q0CT$*NM6:"$OlYR5Qu5us4b9jPW"-J5Oc]*r:krB^Ooe\,l$js"hU_j%73IF#A4]8K;[c#L_=)n"d&`q7*f-E-JieO0T$.j[NG"YQ3m=)eRWi?"n+NWmk,`b!T'uN1<ut(^9.Z"+]D"#D?u?rl!EX0uB8L</%7''([GX7'Q@4<7H;*:om92d9B?tD]8h9a4s>Y=-=)Du95gGTsV+$qcU@Q@1Oc#S^(Go!*J`"XeEXJ)n:BETqZ;&%2^W9W]WNJ?&?%0]@q?.O)n6#,]YB,_6]ki(3puEJbPMKafJfU<t[e7Yse.Z7#o[O\1Hm!_fFM>*adl:T#%qi=&GO!6`e>OX?l%qpBd`P%h`<95d^J%_Q.u-LWDmT5ogl]a=35T)X:G4-?rN.S)-d[^BSInSt3Y2EQ]3u3Rd3`'i<O,_"(r,U*MQ<=@&>gn,i,XMIe)o1l=P7(m9ir=!UKS%,>,J&AOQGG$k5uCRQ-U5RTPuOEA*HPH.'V;N/X5O#*74-U*MP;M_YeVAHaPP;`m@eb:JQU(f$_qP=4pbH4q3"8]1^@;A:\g6$!^a%9-OB`ne,YG"AVdT.bkJm5[Q9MNo=-;T?NJG;Bi5"nJ%$e!%9,@OoeFT0fc$D:kM]8A->S"aYM&$(0Qag1.%a,;]$sQU,e7SrA[sB%PpV&/YL8qKBL-PD!1#M8K&u,4OYj>M.,uXT<*j*\Q<.Aq-=rE2$.4A1N^<$*]ZJ:*M316[d"G^/2UVf(oE,;a'OVnR0t;pK3Sr,9%hW01f7F'Bn,a&t.-Ho2_(JV0WWt_HS"aE.('=pbe6r3joW:VG&_PJMTi0>W1(5%R4k%08-+:/+;.OQ_3,1%O%]u\A(1le=kj],HZ%70AGj_GR&+%"nhF]d'R#E=)o;ThH5[("FY&@=it4aJ)RI,N_X4!l8<)I(:YSKtpmm.0,B<d?m@11lfWQ$5u@)QV!s2\<Q)`pcOiJ%&`aTjOsZT/8/"K-(:<T?-9SYlJ.Qq"GoAP3<(c's!G`^<_(%okl<pD=`JVZa*6:9uf)hW84G!c3!auFLU1fj3!6C[hAI6@L@@[Zu%TG3V>E#^5/D5Q"f$LGu&ZE]uk5[gl*9iR=l_=D*P6SmZ)U>T!f$*\qO8<^jL+[Qi5!M0Y6UM6eFTTLE:"k]<]apCNa;F!h'`"4Cc%'1YoingXm'8/d$kGhc'tej8"+F;N.<[0WMBOqn%k+r)LW<RAfX,/HMN$pr*.ABjXDJY>Z!+L8*1<=+Wf3)'C-PXn"NAdI^XRM_GL%:e:0)MZPFl?8E(?0cWM&K$[s=jk(9O-#"".(6Kpd&`scn;ct)r*fXunWJM4kJsF[nr$m[c&W7\e!m(VoaQ$8#_U+\;=Ps\rW;mMb%&PlSTQLK_:/10j1B`nouYsFRIA)a530U^i@kf4nHa--`d&hu@B*uq?>`#9U@%iSkq8u#(RFU$E+JRMN8a:)r!,qRe93Ej3s5g7DZ%]`;n3O/=CXV'1Hnm7#DHC1>]GK*pTd#/:M)*%g]V;.`)o;3NQj8V#+E.'sBqBPs6TX9uOh,%_*!)*oTdfFFPi8]LI*!9oT\rr0_N%GQo*T!B?^:#R6#7+nT9[R%W\2,>G$g+J+;gTLjs&J=;SUU.!c\n73XS;>Y#LY\l903)E9#:-]KF=b/D,*!dT9+Tj<Y=U>_#QOqjr%T'&Zi$f$`R!>FC*nS"-gD?:8#&fO=S&M7[,BiZAsLD2FG#**>1,3'XFEf?GP$@!c,&h%.1\N"E?Od8nr)<T$P3CSlrQ5NnF,gMoN%>U^4>NZ_0;=VR!f6=^O!"&7XJYj(204!^jT+e2t4,:,,YGuMN0)gI:<C!m.UP"?>L..eu+CC2RQE7[>j$2\`_d29YU11DlSj:kY3%*"&&YCqrJM6*X1?7^0`lmK`Gl<1r3\,MS5!BJ^3n]qGlD,=gHi6oJ'KY`tdh=(H<'5Z%Ss!4>*HngS$cO`5i>%AMeh&g7La.4$H<%ZlkMY)6K8]9o2n!$0"VS0`o`F5^3hfnuBbZ$BJjm+<%)h-kh;pRKT$UPp_>((RfT:aJ6%_jAfaTLgm8Antnr_7Ec[k9#Gu'*1j'j%Kg;t:KS@2F"<ER#JLTW9`7#QjVCHgY:SK;#%Haq\JOZ%pieVl9fHunDH$Hh3<e3C(T1BNDf`V,dJ<[,U/;6?oA8GW_C"rigN&=]f%6<m,ZQs#Yb$*PD;)J,WWqLo`M&J]Z6b/=HKNNrmdjKS1X%'lV\BGo8<L4Q`XZj<2=n\>,Kd1i6i-'?7_,I*+G$\[OdUb<T0m5-JR%$Ag$_N"(^lKq\U0+##+;U*q:<8@oM@+P2KJp^d9:i_1T1,9Xup$:U0n<@!-Pa%]rB0Jq\uJQP-M'T&hTnH+\l4_QQH]/%ct["MF1%NIhs8Fn4JM-jgMU.(BjiS0fXp8L."cZDn*d##-:dPR:FuX%m?GZB(n+iRemb+X8?J2dn"b+r!KZe<uJE!9V(L\K]0kRlkjnZ,WM;%"Y2)!)O<j%Li270f75/u"COddnhb7#HAWOd;,p'-3eK@[nH.hjOlfWo"TsFI^k+'FcH*p](D.'^+KR(c=AOOX/ujjV;`q>-Ju$I4%9du50;Bg(MU50\L_&<\.XfsSac(p3Y)9$T*-q[HFV0H04+]1Y\;4O_tJY4=2X&pVQ5E!IZLS8,M!DaG71=QHm,:KlG$4>QML/E2#%,&Dp#N>3/iV.c=]0if"]?DrF"@u1+T?Riq;dYcT<aa;)b,'Hs1NZhP$U1@ed7kmYgXKhoP&p4GNK1)/9XMe"&kensjS6(jU+pgAf%4f9\`>+hZ8<t\,Yi!D)J+NQtce;;T^V$raRH(n7\0NKMIZ8AKC),:cKMIKS^!lddi9$FT.OXS2:_-o-7O]^UQ,JC!'Hb^a90*8bZ%KEW5-8E2.L#o(KZ&V>WY&-Q<F;-$NC!;p1J*(^!$1bG0'd$1K95^^\P*69h>\m,;F,>O=7$">lqGC_2'>1$jlZJmeTY7lW1,@r/5%##qslJ>-%Q\f!qkJDd`U\e+K^UP3([;$brDRT>j[U/6tfa"(,!AOTulhaitu>ZjB2*t^r3`)f8UUj1$+a!eje<32b5.%2s^/u?SE%3nI:uJoMG`Q(j^YU/e6:'#C;?`%E:F@PN/Ee-KSu@)-;U*A@3fWn3!";XE)CXO<.r5r`Ug"C<e7+n@*MEJb@ge9Oo%>0+%hF9=*E%91l:?3Jn5H8`;oZBN-ccBG+1b!msAs'rQTaLJ0u`&@Vm$0S=0CRXn$-'P'rmfk<7#7t(g9`0GjA<Wb,to&8QMP2\"o"-Y'_j-26Y%Af*hm,d9L*]S7^420"9kO@q$3(Bc$@=N*A=4Jc^W=`llIIY;YsERV_QEid.R`'%1kLs,jgS,35qn@X>fHtK)V)%n6gJT*`L#V&3k%4,6]K*0Ei^!hi2*.M2bk`I\.='LO;>7PYQZY_qM$=(\W=KUTbJDC)2S<M.$h>/A^!A]7<=313d49?ht/[,QP_aNKl@,Ie;j;/3ni%#"bY2PJ@aE)!MN6os-le8u*%=BUKF!`g.$ebr@;3bRBKu(c5qW_pd7bK-nfKGQp"uRSXtUo88W.AF^/VV.?GSKhWKnY%a1mLrb_o%6l[J7-C,g82N"sm=_3!oEPec`bRtN(+c[^F(K'1U;jphJ/jim(;ZO=e,KTqMpVaX9O8DegK!;U*5CbNWN&"BbO!%r;7gjs/)epNf%<"rdia]?n^YmM^amQsXP<([FVe#B9;ajVFT'SsL4NCri<j[&N\L."!32+bHZa:,+[:lsVWSE3I&S"V-8&9ea&"<5PUAs>'>!J(bV%MlLK97Q(_la-OYETLmP<&q],Y&EdOO=cH%9F,ZPiP4q<m0o9Qh!QC,$io^TS6uknoJsBC.iX9HTPVV%)_M]Y#C^:C^(F985bX@W`%^o8$<e]1$f==#UFJOr=F"$eJJ=.4d+Yp?LuZ3gi#fF*\"@24g?C78\4A.cl1cmZsp-&!m6UEl="9O_ag!(Y:nl&?;_Nc:2V=ukqG%UDBG'D%>5SM,mQ#S/N[eY?V'7JJ4<E(Ji4"#q2jSMc_n=\V#L.\LICTeb*LURV^)g^S(Qn]enAn>O6W[PcnUO/e?#*Xs_[<2mT,M%1+g&TrV+Sp`6S9USP.F.2brM%R<s`1_ho15TgF(^=sFH9i5S[]M.XNgV;^-eE$)1L3j+g@`DM:d&X+9?6&1HTO`W9DW72.:]'6fk%GR9D-Y$W]Yq[?_(%`uN]am/G%f26(-;07f"7-1M4lii>(30$tKiV9\4_+)KRU<@EJ:0lW/X^XYE%f3+BUm/8JnE*rM4#]k]7,rHO%H-o!_"ZR`+kYOg@Z6"JlBVGE.1#Mp)DtrUa,%Q)s=q.];Z&GkP;$7F'lJP.Q-P#O2"4B<`n6:"ZdW1)`OXO>R6]%V^@;h<6p7Lbh%9bHaXQ/M2scDE9@63*G&Pd))Gl-?%4MV<(Z51p<oB37b/`!`tY%Q+?<T]rqsS/;IOS^5Fj'>h@YrStpZUX-1CV,H_966K-&\4c&\%h=Ofj),(74n8#R,1p=sbW=8l#0/Q*]iLt>8&T-X0Jqo4SrAEX5;.gJ5M&iFX0cBB/b1OiSdC4g`%Q0Q_=>&!4rFW+Bg7.[CM:&n-%Znot%FgTN\b,Zl.luXHoIgH_Y(t-^?0WKiJB&d'^#W;B,)XYtu,Os]!2AC7^;,&aM=`s&mLZ5"+_$lheD>R%TBV)\%`);GITd?@W%^N0Bd/2&4P/?#\\ru$\6g1&@<c7)JkC#LOjc?rPCKhFOF.TcE"6i2R\[.RGL/71W3GT!6uh#E`)q>fcRQ5JG.kcuMJN-=0qd?3To%Q3\quf7oQNSQ0rLgUB4UMHAKBP:%S$>`'Wiml0CA7MpOj\oB=Amn1ae\44+_0k#`6W9Z2K.jZS?'Ib]r4EI=2Wid8RH(K)FT-$kI%C9o8shlThX,;P6`4k$KtBi[W]H;]4c;M/:G:3^)'am@<;?14kJhosbT'kN51#&XB@pYg-Q]_SX$7&qJ.3!mu[H5M_h7P^'?81U9W%SR#C8;419d>)F";H-'<6V+*cI!F[tL^9,F.+k%`2Y8<ekQY9\Q+@U'c3JU-DW],Yqmd"98;HZ7QB+!g)V2okX_B,b8&5abc!KIb[%)0fF^-h:b>\FZK8oH(ThOt!(`/n4.if.@jJ0NpSTA!PCV,8H8:(I6n6aD1GdA_?7Y1OB<G*/;/%TGs.'K#l$T&Z1*3>=4Rb>?k.U%Ytmj^cX"S<[=,?%gmYWhS``8rZ0bAdW=M3[3IP`!*m5ekV6dgnl=InAXENJ<X$;&/a42._U80a"YH8`N;7]aK4Ud,P.a`_($:,)8%1op.^LDJd98">Bh<]n9)I@dd?;e3pmDWsD>h]0+3$:_Su<n<4:)sd)#MLkU*LU0ej$[IZr(Vf:;ca9_h/9mbuf,?7[W_8'+7$*g%%ULYse+Bm>qV\GGeI:R\3?;C&b3p\NegEkRKK\@q;hA/k5q?BCWUg&WIn"hPpf,XeOghsla@_GkE8c.fl+!q(t0.OiHk.M;/<A27"%9naLaD.sqq&fPqTe3r3d)Psk&YX/Fr'jf'I<U"58YEi'Ngub":!_A'9:;kI/rRs]P?YUfd0d;6,.t=!+bnpK`1oFC+#V2Te'[c24%>M'7dUr?BdTsqURCtbHbX?\b3p:oT,Q_\O<5d1?Gn(_?q?c#tEI^[N5Gj?,Nk-ob9Ki/\&XEZ(/?&^Oikd!Z7_NTcOo9i8Ck%>0m%Ig\_2=(],oYCs<JQL#GM&93ujfUBC$Y9>S-;,Yj;'%tc%oQYZP<u+Qq&me(1pDV_l3j6LMXMOS+QR=]KM=T)?p**0m0Tk?Zj6J;&%,1MFjb1bI_#?7htp1;no>Cm+]+#j!l`08W4W#d2LqHK7Zk8l35`p&R"QQ_!<d/pigPhBPokMADa(_WY\?JPk?DE_t%dHCVK?])VH%iSg7?D7J!dM"lQ/=JK5_.R83dY(b.t\1SHEk*!+<hg2cuM=El4<5ub]Du!\TG\J-7>"Ig3IQhHI"5&^I6Mi3cEOU^U^A"acAU!5`%7cC<+7hDS0b$n!Sj2@FLZcH'7)N:Jc`5B"F_B0]=4!^@%0ZCK*)^Br20YN_IDCsXud9m,4454RKA[plKU_>Q*f-rX<+t!@&YemRf%)Pqn[L!W<>:DL$GA^<39C<;3!gF&u\N&=9576R=[AM^]LQ(O9g6mY?`H'FCj!sHb=2NCu+e[a][#0rTu@s7&V-B9hsqo]IGePZTr%8(8(;7?oro0ss*$5YY,X23m=o<UsNB\f;QkVK=)SdiDOF-'XNj$83Ydo@gKu_d*u%Jbtd$-oH_9'"e[JhNX$7'TnEQli86@Q5pXY%:C+T&O($!CjjK(V%EqA0aJB:0M4ET5:rPUK]FJEPE_'(hX(]Iq+nC8[\;Z8B/nIJ+Y^srA\)NkY--F'IAZn?#CAGQtU>3<O+/i/B%.nASR7UX=.h9I$W3'<9:q"mYif>\PX\8Ro=.CkJs+lRRR$EA&>2QocnlX>[ZhC^7%i\fE^AN4\![_+cjZ'E(89!6O`Jk@sK'VhE'%"\tEL@!?#O&K'_lP<3c5XmG:HPRe<3B,"X,CMbMpLtM9-,^8Q"iObq(CZh3:dlnTi`M3ksTq$4b):aA41gj8UgM=)K,H@XTRgOFW%U$$Y]99I7pDaqXl-QP8Me3fgu7V"O+\n6=gG-CrQ5f'[6N!QJerAd?'(2Bo/f&hVD=t^69i!Ba-,O`Xi'/);EZ%ehfItF7Q;tYA-%1_j]&dNB+Sd2Bj>G+%Z9!nnO)#.NMAI!e!k#f0M[C'9j56igr?f;ITLl3cLYOn[%;SX9$)kqffc96cMX"c2,6jo[h:7>WZ6,(ll5%ju\pf/P)G7[9ju:[DDVV>G2Ko0k5I*FG`@kYcQn:j/6LSD3<nRikCobgW0esmVL0JA0h7(&EQR)`FWgrD9$`;N!B/Q`*/?G@/qm#%4^4ZH_"77Hbhjb,geT3bL7tBf"Q?qT1q:db(F6qZcg+#QXgt_=C"j;Yr(E</gP,q1\uN.lUuEo_UW\=6]G?jMS>8/H]'l.<o"SD3%0sXtm7tOX5-@_PbZ4r#sZZ/Tic!;l:UF7c4n&?6uarZjc<,f:,%cNEbl=J3i<@HlK-faF5YHJ%(hYfQXQK*BPThfnMbN^;`Pph`'%X,dNb4k&=4R!>/E^j^/a'd8nRR+Z(YAAKCi_ZjVr4Ef!Qii.O=F;X)%&9k9=[fUH'MBmgFI%g]K3dFJBk_u__Fq.%aYuVRiABf#Y%1_?70^BbGBK5p'+9>15YKWKf>qfTB,HWW#5L/D)Woq?ij@'GT\G/sB^#&<i4b=&1^fAZ/`91N.1\e]4d/oV):98`2s6qi`\>n/Y5%Fh<n>D/36Z0XJotBNs?*4V0'pmO:'nSk=kY'1u@pP,S+O.gRJ:iKlI(.Mm_be+$hFZB58BOT!7"X0_+_f'UhrM-9448?kpt<L)!6%6?+]&*m*<=gcCJ:akSpU3EDDs&KoV99;(?e?OK<KZ5Gs-R^I#b<I;*tp`P/*]O,te&UP?We%(d$@2R//O--OmMuB\ZA\i't>8IKU%2T>[%PK!kQpD!3U7tATOl2JB>!3WtP.oV*k#^t+^O*Ek%8c)(4A,u8pLop.H#"pm]a(/:PX2U&SD_EZ\k-;_`]4:ZeTtT%lc&!0L%s!"g+6$I@<P-s_S+H!k+qN/c<.lHt`\SRVtV+geXNNA%;rO*krS+ZH4coIG<09@T:0,o2-7g/=.XT:QN98X>lp^l6XZD;:=2]27R%;8V[,MkD.YJmR@(J8pqf.9X?"Ku@DM43*2>;YO*1c%HW./&EL$%D`(/rPC4BZGJk$.3QJMM+1>ZBN2!<68VudYnL.&n4DuZY5t*9%hE0uSBiQBL=L/DdI0G4)W'XqrW>Y-WN8pT\`)H#Q2D:1kEek=]*[j'X&0Q(&GfEA8b>)6QQSLN!F&B-%"'N[V7a;B$$e_f_VS_ZM%)ZIraBaO/4p`d^:G2-gP*O@X4>477q6:@LE@'joE1e*..*0+U;d90V;Y9DQ.P!L&XQQ^)g51D=F&^Kne47`QG"u\&k&n@EkR@D"$%gN%phXAYG_.Kj@ZM/S"N7O#+l[(dH9*._4Gq6,SeQB'pq0Xe7e]N@s.&[f?J,kCM%*S=<<)=uB/,($Jh6]=5KUsT<JJH<L99<\r$%H3Qs_%n%\65Eo0)bKEe^mon%9U2BXr8P?`%b5Lo#qNLd\FQ9ZTQh>-XWkkB)_*[Y\qW\Y8_pmcj)2StM4k%K)kB/u`nRIH2?D^l^%IO8K]?:HF$@/t2eJoo]HYIar`Wd4Ba7Mu4dEk_Q9'ZZH<(%@YYH_.R5@h_J<,chlcr1jF7/5%V)>0&0'WC4'6jJ<IA6[9Q,PWFcY%Yb53L>:+K@7[>);?\Na2F&*H6aj+o>';Dnpcl)B\0Tt8C*Ut.l"GoNH`$tT40@)#k%[ZQkgh(a5X7'.2mH#=6N6m@p0c"!<K)+7I%T)?p=!%b^0JmmI[PgWGM6;a`oS$c9#%#b$"\ARjF`aGaj\2@P^[.?Xbcsi7AY=_*p"s.a##Wq8=XS-iE-d5U49OEGf+iJh0P.a>"%RsMC/X^B6Q<^VQ%WYo)Gbsb`a`\:AY!MrGb5O:s1fnUa4Z3k6f(1tN5[VA]??R9+0;V`Kb&[G1]c4TO*CX'C.@LHMeh6,-pW]@9b%Td5%G1(5>U2FPJfrd9Cul4gfCiCH0Vc2=-Lg8)]F;ZK(*/%S2t86/<`+bk"&)[gXeW;8Q]MJ8(",p6qn1osF+SX=TC5`2*r3RW.%%4G$a4/r5M9YT67[P(HDsTg_uT$HUt8b$[G&Lr#]GqCTp438a.2/&G4PjGX.8f,7TA[f-;9(e(:3H$KiSZ,)><e3RZmg:l%4Kui^7%J!TKb5oX'R!R3bn(b+a\G?OnpD?5QN8fS/G=W4^oFN="(0'ceiL'SW$Vb0*]H*E9W?4O?W=qfCkip5gF.VUc7T7b*pW:P]f)\:W/%pjn`*EF,tFp5QgGdYM%:PSZ2k4aEHS!=u@'<;0Cp.:gsuGZaK_'q"!Xo9qRIQRKhNd?DAJM!!4^\;kM[J>Hb#=ec<)^OI[OYNi@\%UD-J(+4W+\V9fd?F^4RQ_U;o!%GqAs:_b(I\fBc#Lunb9I!o-XX=K]:W:6k,-B-(u+IZ^uW>bWE<KV5Es5YN4jtHIqpI3e+;c@4/%Hn_U!#pl=&F<_L$#+2XW#lN$n"D6Nl^S760,n;ZaY:@P=Tq8jaLkHB"LE`?3m^c.V!$,:RA.bm,e>7?1(-uQ2ql.iS*-Y]CN*<mL%#e8m^&Sbfe4poSNK\J"j!$GH*r04,j!8`2/E/>J;,1lk5Lu8[)3Cu&%-'/3=K4Cd`Hp+7a`*QDUd$"(`ANiMnF_S\Kf@er'_?%gp%'o+s-1^6)!3&O/U6r=S1'C*DNXg0fgmq,Q]4!15N)0g&c']fMl?QcnfM5uOL#JEOt\L<>?ImYJ)*#"V?iW4L>lk?IiQ;=kk'&;\[%O2k8^\-PNW&eJ?[h,SR(RWN3;65XHNlW,5ubMs?MpJq?>kKhYK@;@-Tpu0a;'*5_do_ZB5d'',SViJYI3.M^;NO5S"2+YaBf%5gO%.D22DE)U>K?A2KYBf[:q5l>Q2W*R+BYM'njIaWD@+/jXP91`t`<K%^PXAIk6hasoEP_A!r,DqsmNkB5>Oe.,MDD2#Rdk+I46T&(m%_IuiaY2EetR_L`_T+#Kihb%"LBYqf0dQqg>YWZ-'hhGmp-)riZf5O=hWC`RVQh7_`FIFAC&7t6%:<`4R'ocbibFcLGR>H4GUT\n!%M%Yt`@:e#TlabXpfhhEFogJZ/9T`>0Xg"+Vr8ha$6WB33$<(*o41NF.SulY]H;D5sn?/Z9KqjJYX1EG\&hZj=\#'nS'N8]#c!uFq%Ye?T_I6j],Fm$0j/`Yf@LNZm4T^i+I!ZOP8?49I4o,N]!'QUiC^b%<>Kr6c#B$!WPl\/g*c^C:4]'TC7e_BYTKHH+OYb63""Ha@M%R+*-ZWQ!%WR,cgINC5DrPO2o:U"5>D4CFN)>/Y]cSDns4-\06G:[qHCcC+S51;>r#lk[ECM51aBp,^Br_K?-id(<;3Sg_b"4n.4X%6P:?Nm<=nnfh*6Vf8G.=Fk-">;[5HS0Q+(Nq=3]L=:$"%%TS?CX8f)0bI-CSnjKA]p%c0-(kq@/"ri/0FjB.P[(No]--Sdcpi7)h%rO[0RQ#6+9B\8oJ:jmrHh"B$nMEjRQpZq/=;osq4GH`XM$+YF?%#^L3H]A>o&iI%rYn_4AFW`OB%<NRG=%,tmn)!dS6Mi!<JE!dQ%,+AL9,\c&?($j%,1/41<A_?Tr**MC#W)DBX5DED]3B7gQNQ8R]:L&Zs*0"SG7'[Z[;`!IDLTOOQc0%,-\Y"Ki.O*Et@JX`?(i/MJ%he3N%:1qCS;U226N1Eq$@(>T0,X=ngJCep;f)">E+0b+Q/d31;18bL6A+6(=n2_mjW8q&-c!/rl8[.+p<)iA:'IV.%N!cDIW_^Ok%J5@A+AQc^Rm8t"gnT(MletVd_Xah[\1=tNL>lW&P$[Y:!Kg6KK$@)d?p6l/W7qIh@8bC8B]W)"gY`c6Iq-J23L_m]<cOXs*?8H/>%V$W7(\_G._+bYiqHFI`("ZeW$<T?Xr_pGue-g!d+q#c7?k2lFpNLcLD4+F0l)@#@\`=ISMR+!7boC*uJ0bCNJqaHC5lK]?C>PP@,%SQBB!NO'hD'I*#/V3JlgcG_')()bf)-&?i77^Nf8TudXPC*uuHDM)=B!/Qf7#>TmWRKCkd:SP7LRB<:=9$23O,UXSYpuFN)%$sOm%>u<9j=XQ5`S0LF(iLnUQA:,jF-U6KK"9<-B[mg,$a(Q#F",Zh%+=STre.a`G,:MH.>gQQ+o+L!YY&';l(RtB(3tg5g[q$&PFqq_s%V[VOG11+2SfK:l<\k&dI0JDG]1#iP%;6R6[bTDN)q&6+E)r"?sAS5kpOg:,If24YXlfEX7o1s#)Z;`mm""jsK47HhG7Ns="h5YU!%,-$HVAZ)JiBf\j38hT&nBsa#oh15bV#FhY%1VqIdhNiskD_0g&Q!Lum6=^]X((R49Z3l3&\CcuP`_uE/m<36o>_Rt]#gSnLLj0;N%99I$1>DQ;83<\+BC45o`g]HuJYh^V:<*k]cR3%.oeM%?EVBe&jA,-.tYNC+@Y""6.I0rc]Cb-^-]5P*88'l]^\\M8%rA'_&_L!eO%,HZe[KZH[&rG*o5NZ_NJ?BZ+6"BI^)([(.i?_2Ra7GNOo"Sfo%EU=]c_6B.p-9!hHd1_>AMC0rCNe/`_o":!n4$LNH4[X3A]gu)I%%V80lB^lg_.Ya<kN#WGKMG`[1L!k)l;_TTC:"<lNnLn;X8VkBDU\8S'mt!i`RN[QbI3CTHm.Eg.<MNc:+h?d-,Q87B;Is9XX&'79%4s%49XI+b(+(P,/QkOh)SQ]KEI>[(Ji0eYB"@$#CB+Ml)\bK+dOLrnqdlpmr^!:#BN04a:'hQlW!;;`t+`SQEc\5?6V<3J"hheqQ%`MSK,;FH4,9Q?,3&n:/C'predeioj(J0HGn,&Wn5FbWJnE5[N>kf4ElFgPR>R`f(NYZA8kM+dn1[!ds%TB-b&8j,;=WgpXPV[\_R%euuL$(s'upQ0VK2*d0I1$/TQVY;<41TALbH09XJ<pf9115g'm`6lQ(2`<l_kO06n%6eCV!2;&#oB1]@_aUnr(-WP6<IY'KQI,j)[%M171adk4rC2,RRON'(*a/5=]jBh<8%[HMARq/-<KY1&:O@5q_SXM[&5AcOsQE0CW.K;D=4LjgJ9YH-R!?[,uo-%bY7%NC.OW,?YF%lB[m62R:9J<R*rBAfONeep^H.&u$+ZCI[/+C_r'HPtCJtg9sK3<anh;a'5'<fm.I38r7q3]?CPT1jn(a-WKVhP%%6U`%(K)!=8pR%.r28k49QK$6a*hc%,WsM7o+j$M;f1ZJupdt=qJNqL_q)4ZlP+d1)9g'G\a!>Gb6'\;9ol.VoE'0^h]+S@@EnA]X8jt(3ORrCdB.X%ZCbDs&V5M_2F'UK7(+>MEf$mJ>Rj2?EFYh/>094r3ZNZ$a=HdSdOj`0:,Q?:M;u.7m^<=2m1,X%7,=pI8Jr]Y_f0QL&'0T-;4f)_%_-\]ih+h`WUJ!ghACCop50<)HS4<7s;=2&r-s:[^UuGZ,>8XV)7&Use6&N[([9JQP'W`k6"#>a8_R:r=<U7&==3uh)2E"70[\e#T%I;Xr[p_P4MCo=_9kd8Rm*E>]djbHuuD),"RVtJcC6QC-/['>B`-XM>Q6jBB(<Eh_Z=G\3<fS5)[L>RF8dcp6N+u3*+hSMr//OlP^%0K5.[nk"@?S=?G+Q-_rA9cDfPi^>0M`Wqg<$ueUTL-mSHO37M^.u8uios'i*mYZ#Gq+8#q:_cXuJj?/g8fb,D_9kck>#FkL9&HF*%mHG7t2ja@j::]FW''`E$/"dU;A+cJ@M!H$A5e`0g&l:k:\/7&UlVi5*D-)tN\F'M$>6+`FMjRM8kGh12#ioNU_PsCi5pCojb!cDC%VZOXcW_SF@2m#lH1MV?-&a;BMO[KYB+=fn;RDm8P^P:EG"<)_6*5ZA)@$")C<(%B#f;eVTr:<>X.c$In3-_IWkANf>*V%6I&TXIu%pHF6tK[Tc"-"l9SB8LYn^,D7a&U"l-O.-_5"Gp@4#B//#V(\adQX?h,?B5VD97/*kbNp#[rmEH)!QX08T7[>nC/2#=M-(tmB6i[<%DH*=cB,oJ#@'b/p<X6&#og!Z9N+*htBI5Ni0>B0'#%dWN1OYI.Fs<RIeuNlV@-HPH)cj&A/>J;VQ:@0Dl2i+rj%l4$-kIt-1Z#$O%5(\u&G'[7p/35PF,/oU?AE-+(htsu/Si?XPg<#,J!r``gJMtUT2uM0iV@N.>o3;(!8o>]i*Emij"+4<\]M$h3#9oABdQ\\9@9p]2%US`6FGX[`E"%IGI-Pk`Zi_SE*"D1%D//no6,O!FKh2J\3L%*#4KJCjeA%P\&L(;Njj&QoX*=dJP.<+<Z7:Xn)>I,^p77$$VM"+X.%8s"WA;dcBhZ!TmjR4R0?$XjnJU%Z-$o$98D&CJU_5%7&<lJ4+c=(.K^eFFsOI4>Y(`E9_HY6_d%5RZ1:1!*AhaI<&R?pI^0/2m9h%f`Y_u5,1^fRT&Bg=NFe0gl*0:@\ame9du+YOeRs=8b5L^@1O2a(GY,ZaNbXt.E6!%Jgi(25V2H_1Zd+RKgZM4EWW*73dHdgSQ^-"%@kK.?b-\kN"CqnM,U\>'eoTA2`6K22,<<5mbfFio(Q,BNHWU)qHbhjO(Ik0*7rW@!;7@JLU`[&R^]TWpnm4f4<n95$"P(BBWtnsm%]j5&h?6tYWPMROI+4WEU'/[u^Lhh'm8E>iQbNp[D$n&>\n%G8m@,uTIT2$tTXjl=1#[-d8QZokIA7[;UO&/^(I^<jN&BX-K(";2(%-m(13ilC<jQWB#H_CnoT<!UE%Bo444/aY6GP+qOn7h;6WU/=<9";BR&.:BO-k3t(uR:3[<S]V!a=msJ75G3^o.%uBDYHEl*ZU2Gt%9[0.p.X'*u>*Gub\/M20f9W[">FD0';cmY-0U8,jb6ng]]WlSr%'8@/LuU>TE$kfa^h"hHV_rhQ3JmLTndZ>t6ulke!mW7Qir[92%D%>b!):+Jf!Mhuc7M<lHd^:M^r>m;+/`jnbS*=XFr-\b?#hFRjKEbTV_kNa1,'-RYgtGIf!Z.N?&gta^MR\q&OY-PaF&+#*BMP6M%eg&`(K^l3SVC"P7-04]H;it,:--RP&Jd,Z-%(pVAS19br4(=ks7L/9gOdK[LNnhc\!qKs6R)gS`XAR&TB+lUrB+T)hS4t+."@%>%%@#V&I91SI5N$'KjNVp:SWXq5*,,cWIad#NcKiQY9KLkZ?>q*ia$()MTp.6]DUUPVjI9qbfa=Q$ORDH8b?UV`+oak^h7I/cMal`M`%\OB9G6ecZS]P`@,3?pfJa)oF0cWQ/]V%aV,2XeI$/.-?ZW9_tJL)4jADmU%^j>?(g2tNQ<0j2%.S.@ZN0PK`l65"ec>1`54$V7qN%gRLFd+g7e'G+Z?L#koLpS(j1OC:-B+4Hk1pOheeClT%f<[KBBaQ+a6(_XaM2+/8CM8-V'I+>JWu)>5)mH6]"ghl5MU62lJAZ!sG/%PhT35$]&7n]hL:h:UgY0XDIY5:DMRVG(<\SBlDEN<5:!)/O8=1#G4:(;%PoZc,6!mVD,r"Gt1GDT(:.`q9m-gQ)BmtKCZXI+1^*\%&@NJO%9YB@SB)sHdEVa*M9OWZ3)^+s_gu*HF'!T)HO(@"ApSWH;NJ$$]jc%L*@,NA+%4q8TfR&'m_D3>5`W_*h84FKPH/2e&ukKO%QNedWp14&X[;FfT:s@Z\[ILbFLOYYgJN6"%76IJSjj($-Q4\YE'*)Hu&+@+Sr'-/,#Fmg[M%=l$S%80eP,Z]V/D?4ACHX@"k!"<A%03P_*.57Q\AMj*J&ql4a_)Rj;)!=TFV4L]J]7hs>1K(KDAjr_Y.9e"Ck+kG!@o9Ac"dqBaY`N=<pE?s[WFeb:6B0o9K04j@*Dc:Z%CodD11Qk,XBjDqB5(28@7RS/!6Ja):/lgu:HJN,a>$q8Z0"7R2%"KP1TR5]#=X)rm?<enjI/)ZT$Qjm51kF&lLWD4pT"[Z(Shj%U%a\op8RR7c8j?W,*a9+2Z:CqEMK_5G_(^dqR\.Pj-::<tfV@_iKTG]D<aMlPopt"KV=O9SHn-R0m<Nd=/FI+DSO-"S4bg[Bl!/qn5%:ac\1Y-FFEbm>VNP#=Sg"]k]dJV?C4Wo2`4K+MB!8.,t56XZ0?,KYtV-Xa:+0_*70PpEB)L&oYT"0*S*Cr%"n<E"Z,]0>TWbRp('%2k6P(PZ4rFAo3laEio1TO`I*JU?9V0(Lc#Ohs/H_#X2AWTuoL&K5\YYT8G4ALYoD?$i!(%\N-j^VGS6`51A:`+KL/7aak0&R$9pV%543+c#ETF\MNXg/hBVV0QA8Ntc>4orb(a.5aK.f?7,8c,$3ft%>OEG!F?q!MJRMq9F&7)-=i4WEM+3O%)43;+YZ0/ga%,C`0QJ+;%SZ)o]0$W=Xin:#;5*5+Ki'/Fm5g_qo4M[H/Y_<d!;]!cuHg/g%d-l"*M8tVn\krHuNBZ2gg*">F"0AHBfZLL3W-Zr>$DnrU6,#q`%m)/_B?nYL*%UqqkAcCV1"RJ\3LQkEXJS#W)F)VSt+;(CSg_0sT'h[:B0f:rA;YDr&:;I^/G7*:;V(FA:oMI]=G;S,JjuSAno*O(Y%k!4M]Lg*nGaAWckYfl'n>$Qs+5nC3k#gJ:qQd`KjRZ]ff@Hdb]Rb4b3qoeUNN'do5\o#QmE_t_370$QC's%MF\"FPQ;mWF"9#"tK%8979D$H[&%lW17?OU@%ZO7GIGR9,$l7^B7Pj[2<&0*`aM"E?-$*o%_TUNb=X[SDl+S.%kS%d)@6e:-bIC8*dt2cm5@Lr"k2l7jEY%?U_Ur-)FjtL)_tV+UuD:7cO0NY@@<^_g@8i6b*e*"bbro?W1Nc1O#d@Q=1<jUH#=oVXUngQnQRH=qA+ap.;&hX%5IrU:O[:^JNYF%>jkFFr$#b.&Q'DJj[g^gj@sVM&o8(:)$-V<oGL+nO!O-ACPPV_")H8232pj>\gclC926L/3@klE=VTd!4*K"oa=QN*A';)Up.[uE%@d<!I]+/5af<K@s7[KQJj=ktB;r-'M"&nDB:o^q@q.XGU@#A,)%e@R,?DaqQE8WDbD4KVt'(=(FR`f<!F5gm3GmHdX&<(B39LnH6%,4U>5PmEN!Y9__9(k1I"m43L?/ERSkqlZRl,/=[BUCq6=]%4e;Q-^]hBp<GDT?B\li`?kB>>VN9@b(7ILo0jtKVTYV'<WCHPUn.+%cD]%8<$i&bp4%c'l=tkh;=#KkT&:D6c4:R`opaP].h0Vg\UBGs[Z]RGVL?9(CC^j`H:<F3;u,:EAR0OJA]ReO@KF(J(t<u5$IE3:%#560m>5Qi-&]h,`K7+<B'K+tDp_a9Q(@_A<mR*\"TmpdG0BMGCX'<fZ%4N?\'RMF31rDa6"VB;e=a'J\;D%GUOATV;V6)`4-:?-?%&dL=Y`Y[mB'b2p=d8l8s4Hk'>:fYm8%0m)t'"-?2LdIGp'g,0N>=V@N>6'uW&9s:[\jgI'bj7&R//'H2#T"u<A<((KL0cr/5M6h#%.@h1E,!pAE!%Ojt,ZB5$p]CI?0;R-K0bQ2I=+aKOE);3&fh0Ej\'I)Edb1R1>Nf7B.69p%Tq]so_E(>d>^g$gNQF9H@Ua9*ql(eO%\UHE.DDaICn/HTXVBEPd`hi@W=W(tk'*Ep/2OZo)8j?1O.3,X.Ij<[u8(8*pP[YFt)2Slhi!?(Sl`-9d]FCsc:?M7l`UO7rbip*-%]O\9<ZNFSCgHhpWPDd:T'1Gm*8S.3u2tXq)\ICBsF;"d,^$^E5"MG<@YAVTFkOJOR=dj`5fEZ<3E]Ro*f>CBpIRamjC=16lP`f%+%I6?amNhl2do1n/o&Y\Id\fSr&BeEtQU(V1>"/C7RgJ]:P%7FfU'LlS0A6WUXa#`52DWf+_:ch]Q;JQ8g!q1@1)7@KLfP[-U))h5%%.=5*bRd`9LWt.X)EitH4"OX>6fIqkq>=1eXJ_mgc>Ko4.+nsE5K;X9#F@'V:$T?HceTk>P<,D_nH5jRnAc-Z"j4F,Ca9[6ENpGnX%.MRtLa\6H^V[%!,E8B5Z=<D]r3<"[k<nn[;6o-$7X)W%PMAeNV=@5(1lL?op[c6K5&Sf`_qt2;ZFFTg9:JV<O!1rIA1I1#q1CTI>%6+g%#LLW:W^t1f?Z)_sb$bFAZ+G1n/8<MTiT$`UY!18*&G&`r,E+dhXc^Sei8oIOSn:I+j`C30D*6O?+c7@OicdVi.2$/t\3*erW%pgSGaq&D$N=1aM`\,]suI6pfj&t85cbIEaD\VG^=Y/?-_%VoAkV_Lo/maC<"oD-N!`(CSh"%2s;A)LD\>"+1,M$gD=mG^,!_W'E+%"=p*`-oP*6qE"oS\c$P&OcJSk(Pe]48F:=/T9*TDlP.i-/Jnr(r`hYLD<2dE7>aX0?auWd]Es/uOYNN8SU=Kb(S8*a,#;)gV_An1%N<ks%&tO#NCa>iX.dHd"fc=$%3DsUFd:J0cL_Gq;;V[]Y:m&16d^PO[gj%=Q#mqf`dd](DAijJ=Mh/>UZk%-.fM]D7PI-*`l4?HK%4S?[XW6h.cqKo.hpn;uL\u:h"[]iTuF,A:?W02\E$/et`$2OJMUd,5?I/*\#!U??ch>Xf#78iZeW&ooFHV.2_o+"_U2H"n/i*d'q%$=uVS7LII>2')$%RPUrpot5nnk'HMX!Y2WX*FN\n#24b^cLhb5,+P2EDk7:;b;FoiU6:t*B<-kmSL<-AXLGj74/?X=0M3=7J5W.U%WN#MCWaH\VCu1;'58qZ?!biI6Ucq1N$+C_a!]1@uE^R#uYlj;KW)hKKO#"rK5/Ys[f`lS]U*rY_iEOh7U/uZ>'utCs80Bf.ZZ%B+%(e*L?PY2#:99%?,gB_J?kB3Sc5A5>6Y<XFNQ]*Ld6kP@kQNNhJUjT'P2G#_P%#Z"<SV.911$>>D_Ok%pZ*kiJ`_H1nhMg\UCf?Ut%iYfreEp%UI+qPbh%?dKB+X<HVc#EKJSlC"LpkBLX29\6,9_BYOQ^YKQP#mRYa=<-Qfu?HinIi?5d&us#f>+EiOVoV";J.!*g&'TI%"0Y2AMBtU3K0k0=Im%;5H<UKd0UQZh>>;o58Kc&Cc,#seWOI&oJ\Jq\&*\'UM`[s_)tfr2\k'=Tp@G=S2ht6+inY=Hi4Lm4i0?5)%Qc"%4RPYKWhaZJFeVM7&ZOTd3g"fDW5Ba&aB7]AGnTmB<RUHag6CWj9D?$bd$o?o0)0OFtrGI9AW^Rm[5'V6LWlD<r(9#C!``&,3%MplB!q386]9%5fHhj)JXl3+>lE8G_*!"$0EU&F=qB:ClA)0WW4qR\G-pq]dU_[)U&-4(1Y>i54F_Gqf07-;Kmi-\"A:On\8Jq>sM%>)4b#aNrK*a*$!:RCU*W[[56KJd"'uainq!`GFs1OVj6r4r\47+PS:@34L1kO+bV1""D/,#99#3FC&E`oJ"N<(aR-/rJG9L_pSj^%VZB1Hju5?EFe:-ojQ"t'Jo:]odh!*-.k6'^5Lr45iC%FA?Ws#\?mBB#N,se2%\pk"F?k$>!d=#=WA+o/Q/N_*DG#8?Fl;T=-*RQ3%N%7;T1-lWA#.N8-+mZ&d#[&@p$6"()(b!bO<E%[WYU6@UUWO!@0%(+=-+Vuj9f%Opo*YEG$e)qtk]EPQkr-Kd%5o=KE-q5T;lbU-%%s.<-[atMT*aoc2;fYH2(IsG>[)aK#[uLbrG!H7D1ncQains7b#6cK*6pj@<N5gNL*"4KePuMk#)04q,BprfEU.E^.2GLLuMd\dR%k\.khH:3-q$9TM0CGKj1&3;>pLD*=jA-.irlofho<@K'BT8X\3Ft_n;M+%OVIUl$Yq+GGU[e>-%7]&X0'T#V.emW?Ye"hN$V*&+_%=_[4=!9H**NO3#%",0[9`RI;0U@*?g>:i$Ih*9:Dd@*b7D98]M4,.g^Y*TqRGOmbCK'(PD)8Ttg;;3frQ*#M?c4k^TJ#e0dfL%YZ%\3M`&6nJT?Bes[+Aq32JVG^M3X4u#^(rc8L.-Iuh;?4:e-n$@EBo?3Kb!W4#8pif)d.Chk']7`i!lW9=q,7;kD5pX3jf7Nd+2;D<%'=T0R1;)mPqh_dtfl/n`ZBc(ccE[&B38u&SdB$=g@nMfF4D*H=7)`0`4pppY,CP*-bIYo0.=IkjEI4T[Uh?]:UVE`nJ/[hjBVKB5%^q:qrPO4#[4I[U^qF+YK#`^?Y:g-[(,G@p3eDa3"]:9SFZTF<\Jl*8'i5HOq#.Cn3&S2BWkY@JKY_S9eG`7Fq'aW$9nPd#$!Mp%b%SO2CSh[&SsS\mkX9ng_0,ZEqPk6b_'N'O+&3=Mt^&Y-XUonhYH$?<D5iZ>t``'OkTk2:]K3%C`Aft!c$ELj=',%;>rh]91"V=,_t%Fd\M"k7VJ\po&9M2<0V9^8T+H!CEhJ>+mWD3P6,`&@'JVW<(+2aJ&G1KP)=a-.OYW/Z;tqYrBsBI0LLrE%Ih*Z?n>dj15kNj9Uei%if'Me&\2Ph7GVZI43!:h>2mRj1Sh?kIf<a>C.4n<H9.;/-1maS3r3Qe#\Ks_#:d:[1l`Gt>>**D8_jT_QOEL!SOdW4OA$'i&+"6*%7j@M?CDF%9PN&(kCI)fAEQ$>43p``c<&[^2=O\r>dd7[pV5P76<5](ugtbjtZZBktK$:93PG5(>D&M9)+,Xl8[l]\`Je1#kR)7U8%)cNQq$Gi,pG+K1?E1hFEPh0l5mC>MNEWa6;ZL82kN-_qtY]36];jgQ^UGJuK^SmPVWM>\NX]75o'FJEqK2E`%'GKRgDBA'^mYR>j%lQL#6HjU(G\^=)-jgDM9bpWSXnh_$mmh?8Y>s7e2,lYFZj^r.F/H/Q*m4?Yn?74kNd:$N,f^ej=SC5?rLdP#$8+0Ed\.17D+#6&9%[5,S%%dFq"!JWhMbdFCLLEaV/A:U&*,]LGX^a)3"6R+hF*h6K*-%^2!W'SYI:.JFbas7QX$SX5S)giq,J8V8N_QFQ64%[E3W;7u<%iP<QD8)sJ\clgUKhV!ON%POMX*AA4Eh9@@<7*)u$a"RQmNiIEV;(uLrmf\b0.q>fo7*#doPBOh3-B%7AEX_"BP=5*Mi`_!2[^3"+%c?&O*"6+m!Ea2[+J":h.3U'`gl[_O(q'6?t<!MOrI;0-n:#u5i_<^(s"?jcqXY#F8!2u;g[k_B6M3a81[70G5ohc31oOniRlGfeW%BB_87K)#.A`'gD=<B-V@@mq?mC(GH+!#Y]3TMlS@`&VHjo0o>bYaU_FnjPrOVPc,e)s9C"iHK[%"c:hSqb<IY?anjHj$gnjb,\(P%8,'30,N0M@&9@hcNtoffT$r6cne)*jZc\S1f=JGs6</";!$9i#$(BZY+<u'#^oa)=+g;SZkqs\YqMbnn^fB]oRe#ICjJ"paJr/d*%fb&aP!VYir(P(SA0g_((a[d!mr"oK=bI]+LXc7I+^,$^#Dg`"X8\c788.,J>kD$t/$`M.JH=(#[ePDHM*K@Nubt"?\aM;t@%g]RV%Ru1,6#a%Oa']#jqm$#M5WnD'agf0Phg_J3a[h9tE0h9a4h%FIE.f<F@1Jiae(>uCD]OPI'%[ms#?7d?X*>L<R3f[oh8An8YX^r:#%a.:Dt(S1M'L:8W_QYm@sb#lVcLYCpn*C>@oc=#7cKZ?!L?W>7-qFmZ^Th_J/('4$fO\spPIOZ:52Z9Z'\HTJkiVua<S&K4j&ck<$%ZcJ\2(r3*h5m$0-$c"Qelc*"`!>FIhcX=-a/7OjRe^<OqNAlFg;I:0'!$HSYOb0l$_Ig._Y[&1J>@Q(2NZ3mtkb7@tF<l<@YsgdX%13k-9J5`"7&ZLB2+m1mQP-#;22RrgMen('8c5L:dJjSX>4$c(baPODa)4,%3j9LC*!.m`mQkGWC2idZ]l\NPS:_3Y$Had`uLnr@H%_aE3X#)+o^N=ePbebYYigTA9U=?KQNF(rQFisZNm#ENV(>I,_$b#JBTUr'3PN'+SrU#]XY:^ibWNGnH!/E'+eV+kmOq]%QNAgIP4%9[QTK':YLHC$8MNKjLK_k7VN0@Dg+A*]f8'A9JG*S)c=0pS`!hp_.!^O,.>a6eH(_6T>n'$V('kp8JU/IY!L0$AQF$k/?q5-.'"+%c9,*+N*gXY%P5BOI#J_s7dP9f[]/D4G69@IM,HIbE<X;C<On8:=jTi[`7J#C&:_n/_scA<%LoQ],'p-LR)!Iq_M_K<A2"rALMj:!%V$;J)hVJg1VVf_+,*__h!D)HKf?CDGWRgQl"RmrT8q``b=r^AUKYYM;P<t,$R/IfE3F%f%IFp&,Mn-?d'<Sj+rZ$a>8O\B7(;7UT%S6Qc?$.B0]h't#j;aV/6$Cck,IDj!uXXb;Y1j+KP7ZitD0S>$U#M*$8$pD1MZP>fdEj)4cCGOEI<:8T_c2J8/?o?[o,CVt_bEh!g%dO[>nB.4:?"16%6>/\il[%603W#7Gk`Ng*R6QDrL[WM*.dOW\K]+PtP+Bol84'eO+BL"F$\PW";>%Q"pbJEl?>Y.T,m5jU$cq6nK%0?%F7.Ea;Q&JW.@Fd`c-mP7.%ckGKXP@CO)oc&PENTqu:W[$1"?-&2dW!G@)QOr7pY-26@"@X>jBn*(qK'-?TJc@e33k@Q-)uZXC%$H5;mbp/+)$=c]F^+;KJ32+b/HIt[Ip+1'FhA<HcfcN=3:9f]TD^9U!k(tfoFV&q5;@,WbkjX;F'T<E"5YDI+kU<HR.JFa/:0dZj%&K(h\<h7urj%'@VJm=4(NkC2/=](`CI$#POSkJ\*R3j&f<'^FTL(/`[NFmfRot)0ap/mL>!C[%gp>J200u;Ill)#He0/TP#0&u&a%eG\BrITlu3//:#!S4TPbLOdkCL\N(%e,\f(:$!cm>S_>_$`'a$6_lYtm;fAA78A:D.(uL[RKLl*^qSID<?2WuAsL+sc'(5C?HBG2%RuESdf@]*[CW_BEb?McnB=U3T:!mc(<,J+5pG4L-UGlcIi+u+9EO)Upi&>&sS%fdIEQ+AL1Vh'%`F4j%9tQ=`Z2B2%*j_(WUBs>[%NCn70#UihX3Hu-e:GSNDkMSisK!M?!_`feqo7Zl3&hKW15.EUf5Ll[ao36FMd4a!HEPE<A>:F$XO[_9YDTS'8_6<F)C/^^#HEhlu%K<jB&nQ^J*MI[,-&&j-6>o'sb=aQ2FNO3=_5tTWb26ddWQA!HPZ89G?j=5-h)-u)J*[0`,,<B&38']@_]T@0*c=T:UHj#l1aJ!lj%ci[.9/0XZL<CC=sGMYY9?4^UNrss*lO>sSb<fT-P%,E@2&2Z8IE#D/%L]Ru3\7d?g`+e41R+Ejk'>Z.8Y67oMH8pcA\9SmAe]&@`%\;E,lbq+Wh5\M0=2i=:fUCmU)c+O7.:e<WO\^T&<*@c#0M%iI:MtEjc#iQ(8bpW="o6MGXUA^r%)A,dW=]4?P\@<>02?]%iLaGSc%S[$r!EjNn(jWfS\,[7]Z2SJV;aB.;O4m[L7T^I!a[*>d1q6q_U+*90)f9"UWe2X'#L\d]nZ*HDEqi-7d/NQ,O,%R6JIYciO=>Tfc%>EK2.IKV\/a_mt0GVr!ck0O9,N>-U-[tH5aECY*T6@3l>J]1[6'>ZgHA?i@fBn7Ra@6gF'ZmK%cZKK+\e#g'I>8S`TS/MmKBO:GN%1Cg_q7%LWH;#*UZ.Pql>M%Au`p@V,,]aMGrRJJWAGr)Ne`kp+][l0/oC]#?UV`j$,fYiAt?eal;7[C#'p:.7pUlBOrY`HE;P)TIQ%k!9^oNS_5_k&QueRhC3VME"%l:+,auZD34D(%e.hR)c8>/Jl"MCjSfi-9>&WS*U5R9R/*+C`H,_h<t$G"YPD?q[kepL1eM;cj]d<%Gj;LdQdmpJ"-Ok,e\r%*gFq;;9IZ?tN'$9DBTM6*:LH^<Glu(@2Ye*q>4^`Bc;Mh8RT4-12Fc=3)%MZLn7j\Sf/E-]pE_.P]AY$D%lInX)@13tqdCM)gqp/FthO;EAkh'sC86IO73'!P]Pnf#U(Kc)L<:Dl;?pu=$_i96G*#uD!T]!XC'R*Ds@4tIj2BoLo?LAQndM"L)%$'32Xi!J$cb]>'N)]S-'480"F>jY.qZfH/Qk*./,:(`(BLQZlgjb**[>Gd7jaXqo2M^5ploIV<*M#&SP[BaYp%+$J0e?KV^Q5MO`%OC=-4]-t0@0HpY5]<@($A&tclLr8&QO\jE!?5XNPgn;9__BN#E$9;XJjW)!j<%QZiKW[b>-V3H=5A@MC(!:Dl5o44F"A1QG7"=CG%%uqK"m(a+MW:$^De/CHDiEgOW_T-Z#GPEip9^ng51mQ\JD3QLB$8R,QU?/N5%aH&s.66fLOfO9'NrD,L6_@m*fZSII$*g)a+teuo%e!\C"hd,EbDG;DqTK*h,7,)\BR'MOjjQT*f5Wo[<;fq/d/3EE><OJZPno:F>`2PO@,)ejtH8CX[@>MMAM%:"_G=9>k7JKqYn^JU8%FaoGL&!nTSpb8AGoOAYN3I$NGY?Pa-GV@rYe4uh47EF0C+r!g$rAHUVam-%L^u2`E$[9P^Hd9r-d(Ned&8\@h^q+O"o+&t!5'I[r%Lj-`eW==FS;Co0t<fSb04dn6;"JYk8aD"MHmE15kHL<Tn)jD_/i`b2W%"1;VG6gs961NUW[A-3bXbunS^PfJnClK-K4#6GAQb/XI%*i10K'DWC(VR`mn%id3j979tYX"MRd:Tu:EB[X9SV!KC"?ac&bIKG_@HoV45aU9h&*bp3>7&e,+;A!uMQ-)7C7^n*k&ZorJ6[6<9%XRjp9Ydpkj+0)K1cS4:AC:fb:Le"N=F:h;`AZ,n[TD*&>UmO;^TreoqdSi+/'PH/tJ^b);OP\j2!lkVaBL31Za.7r``4V2c/GXBX%lH'7HRc_N\Mi^ig1Sl'0m@t[j`bqXT;l-u6eu'O:I`3jTnAhNoAZnjF9Qpuo?5QOr4Jm!Z9Gkid3tfeMD]E"?:[7?`W]jOu$Z!Qc%=2C`t,3:d:>^+T_BJ?tGhh,3&M?7fk9sKhi0a&1_]ZQh8GF[Hk>S%t+!+Q9o:en%?=S$EX4i;#0T:-s&4T]oa_aWou8;A2g%NJ1g%2U5MMC+0e&ZC7):..tHoP]gtO^9:->@BgG(_mG]7c6Ni^,ZQE7XfBmW\^ZVjQ"W/@\gRDZ1m=ufX9M!A]bJ5RHrLSQlocHD<K417%l.sUPV[?Pb+HW(`,g&?bm0n"Y=G=1bD#GK[2]Z[Tq)>s@?6`4q<>UWc!.gJ=N%MWKT:Qd0!2n:aL]*;;`LD[F6VUDk45>Ii[DrM+%1M&d?C&j"UC2udANNZ6;q=[VRa"7]7IO1tg4/sNk=uSE.0\d01iQ&_@+31F)=:3W*Xm>Srd2rQ9aMWsSkg>]MC-j+';T<`l^6'7*%O`@>#/#)_t837OE@Zr=?4NT!I;9L`KXk^qT^r5pZD!,%\7%GaJG''O\FYeJ0cS4e!JEV4einrYr#\20Z>=E)arNlr.q`+$K*o5Eg%7h5V3XRq:Ca$tKt7<Hj\,G?00"iNt<Gemp_<qb@W_J$QhUZK0MA()580;:NP1"smJNX`(VCMFhWOk^t18QO8=D'>DkIG:GQ;D`+^%GHL(5`1RJ]"#F1FFF"36(8UB+`4J@@#Y?JG1qJ'^25uYN_GTY0rY%$D7`,[5SHrGM[N$Sbj>(1&9:sV+a2T5`__20UM_Y;Xd[4^-%4eaSliCSp4('=_kL^QBYKupU?H>Chd0kREOi-0>iT%hQh!Bgth&['^dMldQW01gldD?RLV*WY8)'3Ff=6=R=>aU][DP@0agP%b#`%0k)&);Y0Nc2+V"9U7L;j\NWJnp/@W_dH,smh2@(9VOr0fWf66m_B.o8OR-T53$*f/ql-m&!Q8O4]Wo+@OqQWH<@VCDV$;R!RFS7Z%,)6$_p0Y_M.PtkX$2X_+i^IreY]ZnZoNI[g$L;Tu/3"k2P6"S-9H(od?72%5,[!"gEP0OHAS/Ef>);.4U<RLR0)NB(4)^9Y]/+"B%LOD^/C'dX(9$rrV?<]Y,\U8qer)pf^1o`5rYh(".SEZ&-\<7f_<HA2/M4;7eK,_rR0^tdZD2#QgbXPR[in)]#&n"g/V&ii[WSU<R%5gANNK,S`<0il2`EU1hc`=aVG6n"]SM]D"*\Pp#:p_E!o<!+f%Mjb]tL(c^[=]@i''!oV2]"6@);@`L8p4t,:N<h$R89cHB^]I:R%(/]LE>[b_!EWOn^Fc$;P@-^Ch6`E?fX\BnBJd[!M--`_f9i4Co]pJ3Gn'"*r5=Hn(Iftq^i&<mK&g@CVb$+:JhU0GJPJ#r)5n[!(%n!9*5_!I9>&dDt$_9t(:TfE@1"0Gpi;33FGF_#r3F7AShLbYYdQl[[(@d&U3_:Lh=b\!j+Spl-3L\?%elgRoRW&L18,:GrfU7R47%)79c,<`(C4J.:KgheCrol(A2JY&eR+_Q.>Rs)RiXZ@+I`NM'(<+=p2W]uGU?A-g(9VO2%:8HU-mS/$TmVit/iaQDHh8uD"M6'&UR%@]YpL9CWp!\pg.bJ1.QKDU]<;8;O'%#4#B1L`EJ?5@#(I:JGZh%gh5\EdqDKltd2pLekil;:g]HEn&#6S:Y!3$dK,lUEJ8JqP[Ij%nV`2SDS#KV-6>N!+'MH@a_-?e:QouM$Ut`YZM$?b(P[MIc(P)-@DuOXh$9-*7#nmqrH(sNLo0MVY\'1"nmbsUPW-%%29#H,,`U*R%/PI-d^lN7bfH/`K_NCPV#L$]\LDoebeBKiM+s_dg];V\HR$u2JW35dp.k%k_6t4<Xg<$\3:Cr/iF=[")[)0`8c;)/rV1Z6FH)u"m%@k9thDeN8C%JI^Zg<hf-+;^=%o3JWt`tC^J\'O8#2nN<KUkC`J-i\2Ua!XF[:Ws";0]#3N!*.KqVb_$dBnm?XnqA4/o$m/^1b>HA%`Opq?DXL^0:KB1O_)noZ>Vj^4F)"/biJ-mFo61n\<[%"sQFPD1<G?<-r:0H<,61_`C+[1cSi7>C@l^O8'HbYGp1RmTFOt0?1"//u%k<kPf"OZQV55ba5Y$p87''0h<7+-:ZDo=e04fI-QZRI)tcVhZt.p"rX$V:[UJ]-QPKpB+8C>\Y5$)lX;OOcO@2&F4P\etG=W=6n(%a:D9`TDQ4&e?!+LN(UskY2,#::8*L5WSS]P,a;uT\"`5@99(%Se11+$$AV6r?`u6rg%j,H:]FbKDsSQ"`MhB_[B?rIo/W0LeN,gD%h51#4QQd36K.hp1FY\Fr:-j;lOB)K_7AmZTfO[oqK@;NT\IO4cm0$?CmX27\oOfBWR:>&N)il-"8nqEt_BC4_X8BgXk`ZFWALO2L%haBUqi]FXr@"T)e@pj?7f[[ftT*Y5Lm,9Y\FD?GB/Vl4tjFC:h*B/j;lf9EiQmW/,MrTqTMX]#aGg\PEK5eGHj:RL','?n*>^.Fh%cBk(&_2K/2O"UcDk2Xpg=AIP<:(\iVNEtXsC,-sK:Mpu'X6VMbqYDDI2KeVn+j=s`nC2pP.n#p3B10ZJ9N\lAcrMr%/YZC?0*g)u%r=RA?_NAiZ#u;,j&fN#cVo%8lH'o7k/3in\;c.MDCr4s!=:JBC/N[92^^&K#*6's6[-7,.nMFKT!bXpiEK6T:ViAU50S\SNM?B&O%*^07$KRD>7NX\1?r<\TC_m98(f6&C5(!Op?a]WeOJYc1RTk0R)/YJ"*gLfqE5NPui,&c9h,l9$E=`Wm([VNN<E<a347+*JX1c!DC%[OP0md5ltC;q8Q">if>)BJ;8iIUjHnMl<[6%7\a)9X`\G@7nmhJ8;)D1s_>ELSTjN:WrIQ<al"HQms8QqfGJc]'8Fm,EkWOX^8I=%n1)2g7;KNfN\Pft:PG<75Te`ucPcn6S\s>K4hc9"g5[X]S5Bk,s'\'j9stcMj3Q83)`',o%C76.hkPg#]^Rfk`lu^.SuD\5WbU&#%fVb3<l=E0:%9;I$Or&S(>^"j606Wc81C`2nlO_=.<-'.D=?-Lm8o?/e(@8a<!?pGk5A`AZ/XEYeg6k4eV%N*4oHNYb63>=M@<@Y5%OdL@RGIN1e,PrEJN^"&./ma2O$6CB&D9;L"&Lrqk\c@Xj3l_K(=(apbFfV3-Yd6nT%[ohg[p([X@fI&WS;/#('ZC5IQ_H1Y\T=;e%!n-i29=@jH:>nG=E*YI`CuA26el18*2-G%S(0""9EY-,)m6dCDTZ_-$TjufP:QaYJ\hdkaghmh&'At$@0$,=X)JUV;H+XFZgAu.V%2BG:PLBtZA#".MGUT5^\GNL[hbmd"T&g@*pR!@up#nGMG6q*=W$km(X7T>jb)3EUON0?!eUg$RQr.n(N_`\dl*+$SG,hiO`n9P\o%%FbdC65JKUU]:L+U9)@"LBoaoN</RYp)#i-9+Z8;M$tW!T>S$hVUMXZG$^&.i>\5c?&!-R3D@SR%CbKl0SuV/arEuE>aL-"^dOAY%!@,(R6d2nNFfQD3EVQa[&QYq\ZS3'R+!t@"EZ_(gO-Qnn)&=B"Ul`F"n,'ERT(-X]:9":GbXUDGUM4-fV0Rroira8`$5DP,MXY=V%%nE-8,i<k&kgPb#$jD-/&M>m95;qZPC&*D5OVhFK8VDA]HZb7:M]sP5:b\`*q%uiEGVEQrS"MQKbrb'baob-JZ"m/OgE2kr.%prq%AIfL^W:mG$a&CttZdX66b4PSXrQoiNPM[]%@4*5eB16WVBM&p\2P!QL5ZYJRGhq"<i(MEZaLZ,-b_uZO5P0$^B0Y(h7dDWe)3GV/%MK%/1?p]+(Q@k%+`2ead_^-2ecFhXaNk85sKVk'*LLkQHRQF<m%7p6Gk6`DUoE5E9BgUX-9[<0n-4<.g8l=9<p@HZfPj'Ulj&=cG%2X;6G-?\'3FsV:`Q!HF!\g,[A_7`\L4^INMecpKCJS1!44cEGR820Qc(NhC]>7g^so6ES[c:b^h%;p(8kZ,00mQfK*YN^T7D?ACN%"@.eI2#1CRf58>pO)E!+W.;`sWFO.Md[Ck.k*fP1Qk#'MU'V'm*$bIe-Y>8d;'K(2%NNbd-NRSY:kB+4.=c3AhugUB+&*W/eju\;%#nlU;"8E;r"7%e=fJ?L'=rU`kA$o\b]@R^L,oB']3+Ot)s$`p.Tj,\MZXLe3<W-S9]7T9a]a\@3=,R,.1Lq0aD-_G'a>Jp0P/;U!%;jL!JKYVI]B!o.KTTmNQ':MJo\#MOoWYiiS9dZZE.!ILN`3e#B0,dM]Taj8$I+\joA7R!$nVXl-lCirC.32(RIju]BN?gXNoStCf%Spcs0#Er'EElcYuQNV/2hs/ePZ\mo;NH[F:LIjqYSEjcTSG\hIWF8s?Ig=G>abNQ=\4ij^djYW/(F0)VLC"h^A+_Y4$53;'?m0.*%K__VNKu?EX%uM`.IL/1cOkO&5KH/94Jn\r@i^_Vq/;"&1]kgp#e&?6.Ktmn$1-A'"M_P?5d3Io0;5f(YllgND^bO.TG:CC5aqe/0%aHkTc*cA*i&Z_!u1:O^f^[+BU+.?cRZtRm?F.V;j14T[hJk7:P)sk(P'=tXbN)[jGB"eE]f4;2f+aH44d\"9Vo9QE'MTgG0;*\]X%_RaC-6)h].5I/RAh.cLAmIk-m.=3JY!H!fnYCSmi,KD8XCe8r'/Bq:5W]1pIc$^Y-)j'S6'K-$i?r^!Tjso&@_tgXW.1M\q\28ko%(3iaEO!-WMeFW'+AfucO+&?'Dr06b%X@OJI)U.2USJ=k=8r>d^<QE7S)?HS\3JS%nog(Kklh>mWDDRG!/2;L^#mE)fKJ-j68KGY'%G(QONkhunC%U2MiX<(Af&#M]e3PkNnDITkmBAgqJ0?U2]5%qQZ'c)E/Fl>0h8M/$$KG6^kVO1]8N9g"W>btFtMCh!pY<^j'Q`An2%97.4$<7kqi,]kJiHoU4f:+<Zbg+#G('i6:.9C]$LdMO8!o7Tqr_U;G]W\(RfIGKohQ'=63CL$</h\(]"6<)3VLeK@qU"Y(@.`:W`%;NR)Ps%O00G"%sX2-](mg("?u77H+TX:c!SqU1fLEuC,0&<VXc)r,9ZZNBe\:.7f[PY]bC-']GU1rW3B?so("\SjR(/ZX_\f!Lu\%H',+UH_P6=l;m3c/;UiZ.Q51TVlHL`("sZ&S*iTH@aJ;+euPLt4\EfAB@G*_jT,B=XNERhBW[_VSg3XTkTLk-(uq`e5-<^bfE6[!%(n/=2M/&KdfI0uaTiUn\W_"p-\nbkHC+Yl]Pge<;Ufg=dK*bEBT7OQ'Y+/?FN9gm[L8=1+cMEZN;7F+a@ZNua=K@4qW3Y"u<qM8k%'/TMhq+W_caH<^.$<o#BJ?5on2l@ohrm8Y+eOidQq$TWa=q'Oo6:m"lSH-tOqU;N\&8nJ`-$F$N'I2^!?H[@aWZ/uU=<jXS&n\nS%UUO@]$<ISL[M9S(p9ehNR-:V<QBcJ/FgiBg2o6ir22C7<UM'g*;UG%P:bXQWK'^?L'r%@>F(]i+21gO<`Iq--9;WYjj&W1?560`W%=+*s-<=Yg)\TTqfUKL*."KBd.Ckt6;VuV]-#;R@SD"7oD"D-@&l@3KsbH5t'<F7pr]A!'0_c9>&U9%4[aG'hjGu^Su!-TYX6-h"C%M/AQ:(i<i\Td#+MTUb)4P"XXu9R3SJL1SmX!He9?<?tNp]$gc^Te!p9S<mSNSJc.%=5391AI>#AFf]'X`=[F/\k6Enq14O0U:a4*%=mh9J\uV];5&F&@E<kWHLk1rC&OWSqDa('&>PM1WBo#N8Dg.*>ShT/0mU!/E?.7$i+>JE(-s.U-cDH>_S;/S;=?Y<J?%.c"KiBps%B(85/7PRR+:eqM0441_gZ3hH*;5JKG:ekDm.!*.".3c+'U\R0>jDMAZj*R^AW&#J9gu$j252Gl>$VA\mQ9T+)AVIC8<F/sYfZE0i%G1h>CRQ#HFWT9(]:<p+6nl<8EPND`=:@nLJ:SsSjC^$(J@E(E_[g.,9'("#s!m=GTG*$EX=UrGBDhK_@ok'fk\O.C*TA'8`foXFJ%mI32XO*?ckqk6/>5jZ+e>U"2Zhh1$q*'=p+hd&3=L#RPf#8/!1+MH=P1Z^=8]6^'Ya!lYYmHPi-$Y)B>"#ucL8P2@eQS$c*OPW0!%qGiKUXQct\cKO7,H*pfcKl:;G-;$J`^Ij\<C-'F7*CP&rf%*,\XMWfiWs9^L"#i4KQ0m.0,Fg,.Z:q+9Z&q$hRdb<WZ$eChCpgrm%Qmd@%1:Lb2\M(JkJ1ssZ7#E3)jDbI8Q<I,,_?JeU9rprHEPW+.P-[\Lahk5n]i,u*E5[O1b"1-d\'SDj<qP#`m.D^.T-_cAGdSb%%DVYd7mVhb@\a5o3<`)=UnH!6E#K(CU="L/"$Rlnh.?!E+PnopAJ3#DN7PIBSg$A&/a(dtu(^^KAJkSml_LqG:):mMAahgeE;AZ)u%(_:3,c/*ejMS7a:QI!)^c_7>6le9dEG!dtGKm#-o\f*QtkG$1]494+3HuhrZi?q/RZJ!-C8:EO+eGHl$(h%H$TrN7bSl)/"*DP]9%FF;N)hYPf8mU<nsP0%0m9!0Wpn]9B,_6Oqn@c8^^1MTpri+6%jiiYALBRu8<,?c.4c4Gj&QfP30`X>`_9/i=\3>RgBO*7D!>"BEg%*e'V:*109?Ug;eTaUC;e7]X/ePcLQK;Pg`A\l(MPG&D%s2(Cm)?*t%ST`%ceWQ/n7(,SUBK+SOF>Q%$+M*tm2-4<gbEPoFb4EOY^%D7W06>h),o(rdG*;ch\)g!=9!o?hq+Wt]:1e,VX$,FHo3)%8g!P[sYZG_E27A`8f7mhXUTc0OJsM.1Vb8a\=)f:l"KO_qK@V(',r%TA5q]4D_"TQlU"C)Le7B`NaQBl[gBNOKE^!^+dj&R(@HMZTZGqBGQK`5'CJ'XbLDup-Te@KV!3q&FZZIh4fdn?PlS'i<Nl:&]RIT%L=s:Ri;H6Q_ar,dOi8?814r32)'Of<Uj><?_h2&^hPW]]bW:gK,f!$_7-K!.EEt>h?:eM2-BSg;X+YT+O(98X^G8LEf#%6Chd2=Q%!;WI<(^96N@_'<HM1chsE_2:XBqu!%?p'V/#>8j'EtDG_Q<%cihP&X9N@p*U+9;K/mLnTP,YTabFf:-;7#p;=1M;Ss(fB,KY#tth%o;O$:OWPM/[`C\)>l2?$PA9.k;ip*KJr$EeF'0`R3_e[pR2SF>\u>j)7UP7=eK,G]_';es44$N1pIX"mo:0`G\"(5BmhlV)M1d#$%l[loV1&<0!O&M]\6D/MW33e^s\N*+EO(X(ZWLg1dU09:k6Y")k;2"<dB7C+og!k&`=+?RD!*e_qrO5RPp&@5;c[YPcV&F%LjP`%D%ANXMEBYf)nqB@aBc_')$)(3"=4Zj`3^W\_>OW,=6K@HQ*fFjo/e(9_5TV_1T`1<Plq0$$IE71num!=l>.bH'cUFRotHNhL^,5qK#%\u`qc+KGkq2+6jL]N'eW8Q&3ABMf,).g_?@5u=cHe%e*"a'?eRVjM)+E8b.#-or#N1m+uX7o_im4i#r=)"b#`UcbG(et"N392-7R%1-fHgF(),CMf])3lp)+^Db&q._Q$3H-rj6h6F>PMTW?ogmkYZ=\:o1KN+sB-L9Iks4J+;"R"rIZiu(,\<=?'s0F6HZIcZ=#b"%-Y%Tle"&Jp1';I49sr4-B_?I#)1gHgs4OCgadJLa@XY?nfDTKbn`qA73+$<tFcC?W!0j-/r$a,GI+f>CGPQ%0tN3qat#<KhDVAJ@MX"%W#qH_OfFNU)lr>gRJdnk`G@A4NIP56SAhrKY\/\i2A%'7f+GQfH.tJKC_V?kf^o0s?>mlT?m^E(`ZNhS4".q4#2s][NWPLoI'e7@%^_2`d`Fa)8]iZlA%(6<Z3;KG"jC49$LB11)qAs9bj`hLU$Q?-585`q&'qUL[i,lX!P$q.R=4RGAVg[hEL(T<YeV32nL].K_T_s*-%NN:R]O'R:-T>4cC&SOTb;^bmD,Jr4*o9\1eb;g-T&1=tG`#",IeeF5+ng/I;%Q!m.p:]2"CpUh1j;_R!?*TAaWA(\/!?&kCZ$ukQ%hUp!$O,LWJTI<]s/=n2k640nG*=U>Ok%_8qoEAI@R$C&l$AhGW+Hm/aejIOTp'mD:I;=&Y\#3mFh#HEr]&kUNBY<Pn(e^V\DD#_H%8i?RIPqR!+C/mUj?:9b'J$<X9I6H,r`L2n*&6u<'.W%V6>]/N.>NuVYY.N`\f8jhLlMZToaC((`b\hN(jBb`h38,9[2;rX8-tJ,`%YgILAbb?kEVL2n!m^1-sOb=jle06sN_UrZ5A4D>t\#+'8()X/$^@9jk0MZXFPUF!!g4en]*cln+_Y549=&8VqG320QAs,AB]a?:T%"rh:)RqHT36iArMB*Y=JTuEW[kcL=k9g@h#6RE,B2eI-gLoc`@qt`0HI%1II_-4BU\`]XZR8^(N#\suK!!e7Td@gD+'En"0BD2"+%<)ng[2ho%$7\rkt?+!k<T<:W+mcuaQUpr)7Tl;h-=o8$"CPks#YnhJJLBr)6!@=>heL62Z;iS($Gs5c_9T_eL[t7MVKMKps^pOUD%Lc$_",F&ErTFb6u8>aJYYWT`hr.>C7jTG8`/etYr`VO-6b_Fi8*J:`PI\i/5B3N:X6"<B]H[pYtBe0?`P=ZnSApf/;Rm>;NHEiSV%\]abW:M"o=NHT9FM/b:YFd=/4I0ee*a?eN($^Ifj]2L!##mAc^R086ZnWY-./p_\MGns\0\+'U&(6[L>^M?MT:`I%EqWlOI[ulSj%hI?[g@2_^.2Cf"SqZ`f'#X`*8-@:T"pT:]_qJ*M#NM#XA;fU@J)neGhSU&-kUu2KbL(b=^^CZ0S%VfaHJL-MeA01S_WX%>b.dauD%Rl4;(#-$%&c2X@#g9DY$aC4?u[KH[0KUQB11kYb5#U:6#i\jk'Y#tKdk^oauK'U5<G0MSRYi\chY[NEKK(*9RLHn5hY]XL7Y$2^=%o@<%s4.N6W_PG"j.+>_%+p.7T/Z8tY(NZ^>L+]YUaF?`\L7bN_O[(s+%,t_88-b/H-i/JI&PTCD'pM#%5qMkV7$H"FmMeA8C+ZnC%#pF?,8qK(CnE6YdAKc^U26Q0(nl%lZ0iDH52211qo`=jUN]\Y>WXX`s#t1h';%9b6&LF$-9tYJ#>aEFAW,#t<bbDlM<&loO^e9P+%=eb,UM1$*OIqDb2e@/5_C_<($fAkYs>V"05N<3Caoe!Q]H@U.L%[Y?42rjc"6Ag6P@O__`L6/$V)e2Esi9((mS_c]/r5A%UT@m00%A,*_WY\`Yj&:69&(2DVs%/ojGn:t'%cRfGn8*I8?%NaC>es%suq@0,o60+sLY]-gu7XQbD*H8'i]C96'AcXA;ltglg12dFaMgc+p%R'HK+&b/nOmL.giLq!r'(#4I#:.$D->t!MPn%XQQ"]2+(,tsFGdaCO*86L=\I^JH-0l$3F*cO#HASQW*pf3n9;^ZRaOYpVo&*NB:%7?!A<7KTsY/6$K)9f2Dl72CaoYLC%maG@gONH!GEfYMLUJ2Z-&We7k%$9)-A.8kYT$$TR;2A+Yp>D!g%/)`*RU`-gC718^<P(du0%0)m5j!a'Z5il*BFX"ojW^r'HU0IV7Ei@;0TOrB:I#QC(q!&is3rG+oiBd@r>3,gH>['C$W[^(4nm2Vqdh<hXjS^A.M7KdqR2#t)s%2$R&qSAKfu2oN6LZC=k(!e9^>2Iu23R0.[q<t)lP>>T)#[-[39RGTtJCiHF<!A$#p/g>iP(?(^>@;2o`<rR-tKHHiha:Xi&Q&Rr)%cRNCDVSrbqZ"rD\Z.BSn_`&!JSu/QE9t,=Wg>h@B!]^5A$#cFs]ZcngbB5i9qr%Y:<po)(KYuS-Cf@(3gHL%:<nI31RuOZ(=IFh(%HaGfQ\HV"0[/h=gkIA9TH3f:-p")u&f)S]s.#cn4[*@=SgSa4=GCgs%XX8?hVn[MDn(lG&p)f*@2!J_RhmHL8E9]U20I`<5?@!N&%%*jAiZa]Z2^E.!OY00q2Q8&&\)&Ekf$dj*0Srl?#f)ZPM7sG#!1dK"16".]!4*R?snouR08E(2%hbo8X0V];p:dH+)Nj`H"Dd=-d%,c^LV,AicT722Uc+H6!Nj]V<$2K6BoZ%^B5N!Kn'fLBbTcLM"._aLq!;?cb[&R&b=k993K<aU!QlVMGP5d\R!o4.'p[\P#Z0Io/J%Ja?eO%O<AKm4oG6OE"bGVZB78je0Gef7^3[.+@BKNJE'`0G%YuE'j0#BVElu-@V0o=uijs*Yu,ni(:;(3<EHt`u8RM4fmJeQ@H#p%<<fKU4P_9c+,JoA.nXU:eqim"oZ$9\<YVe(\t$O6X["g6%@1nT&`]@\hT,MZ;M)mh=_imW,QM?hM#nQ/X7Fl/>n5V(1N)^/#9O9@%fr$OS0F5M;"[s-3ki2hmF(uH[93?Ymp3Q?3V,[gjB*\^%0<a\7,n=/#%Sf9/(.WCnCuVIn?a`%(`Ml*oGI9*\:8O;d"Bjp`]]b@<%J\B!Ch#d'rNb*D.H%1"DL\$6bY.d:uYOqdaE)fB"(tqn-gZl5A?QF>)'lt14hQ)a^F7iN=;IPM075K8hCj)7:A5MS2ObG"Gf&!;T%BiU)\lc;0d;-cJ=\>X88&1O>WP?L,@l]?Y=;3V/ModNMMk5G/@+U#$F.uKmDi'Q'mW@J%"GW"sKH51I.Pp%=/n+VP!p*R5Of*A]S%&3aIc(2c250/>q%i6L:11ROfV_fWG%n91EJ$lE.Cf0bAQhs-*O>h]/k&I-l*,X'"k/`?BONn-C#2%U\BnbhCEcsu[`nl/?k-p*Q9%<:.Nj9YdcQ^nMBhI1`LRX(3iOD+.%pYKW->[ih'H;6'O<AH/.#9Et@(cMm5l;nhE",'M>5_kQA5F3c>].ChnK13kO3Q'+F+Y2B-t%iOKu%bZIg,6"KUlmp>5aal'gYN1/*]5iBF_GV;1;G6LFpmg7><DH5Q-Y(UZ;X65WPfjc3=r&ch;\>S\u$I7H+]J@!)b39*#=>3#+%VU-/7CCaiN]&5+!iR+U$W:-1./oCr#oced2d=(oPe*dN)#3ePn_g0#pmg7>-=iA@a%lt!%k:7S3oB"<ccd07ZmP,hKNMhLK9J?"J%)SWs"Si9(`9ARZ#Q.-..>Z2q0D!n0#bBCa6^CtdU<U4hX"@+qG#4_8W(L[^n+E'')B7)*i\"?pj@mo!sXiEmtU)Us:,D,\L.%V.]%m_X97Y!gW=?hF9@'VV>ce"=K5o03[>a.A:@j/@k^%L/p)?84TrDVPV.M]RDP_KIg>9n!C9@h^gWrlX;XH%eGFTn+FDoNrL.GF%r&%BFGT$+]N#M5hRdI"dt_6/.6Lt%qKM147hd_:Z;6hcrAWimY0/1rq4N#Ou;cCkqRBDM-K-5l,T$`o7?'5[6::1*m?nIZ1,"TceSMk%n>r!')YM^iKc"fVVj))X6Nc,Q5;^/cA_e9_kN.Fu(n",%h"rfA&^gFR,$ZVRE!B%,fl`/.U8bb4IOB0T<J]LrB<s=9Y,d'd/Pe*a%P>BTaD!B6,fopmaR,8_kSO](dAao;HSK'1b:"6'AK5WBiCt,aT.k::>Ahr*&<S1h;5=HgD?r,`\C7_ED(6);7?*Aof1__98h622U%&^]6W7<`q.6#<rfCbQhaV(&E1K6h3.\T`*gMugg2h2Q)*0Upb59I,sYDV]/5JPbSc`&Z/C?'oIkNc'Yllho1<QX!'2$dU((6`u:Y%KJ?JTARcUB@]E;6AW^<C1^`u"+At$H*qP_g./CR?EeK7kY?X07>i2/qqF`$1$']&f-SrQ@'ta:mUp*Sg)3+W,\*>3!]5l&@4[cL>%cGHb\iF<8Up=#'T[P5=TNq_RZ$Qk/A=iDHjn(U]0,Z)\E5q&LkDuY'Y>PQQ0p[&Jcos0?>Vu=95^.'F\>^OGrc.(NmAgrI]48TC&%\aM*e%k#g+,tJe'6)pWX-0b$,&ID@*J=Np#.$6/d8W$_ALPRC5Y5*+(`;hT356);n.j(1&CfNAS7H3:_]u2&PAIT^]*CNQL.@%!9%(j`!0/\@.F<lWFHX7e"ml=of')QppH\BWFc"@t-)QJfchps2ql5gr5AU9n7##PMEJeK=&r?F;ii8n"+!lr(]+%JZ6;^(5olHpA=-%9&QC6;>oEZUfBtl]JIa4DimN)r(?-5A6_MG*q%ESFIsS_bR?.,ER>V?iUe`:3M?e^N*;6Kq9VsRaR#".\`N#2#7'aSIdUIp)K^$<%U6fKP)JKeQAm\a*hhNV\M4.Ie3Pc269A09;p;aUilig%h\ru'kpLRKa0PN^IE,ZY8O)P,=;u02>.^S0G_A"E%&7Qd=q!6-&rD;]P%:&>]BQ?Bk3q3gg0msP+inCCX5aNcH2/R]V.\$il%%rHIHrm4^?K-&b372WJerUR]NN8)0YWeg$56)VWBo9G@*nacGAO3`1^h)ulF%O!f]C\BnTaR"oX:HO8"'<I=O5k#uVF&f7\Y4Ft1/9rkHkIub@>IX`+sk@4\U`H11=>3N]GnL_CT"/#qBZ[XO=Db'5'O*AV4@R9+f%1\MSJ?64'Bisa]u_p0@aZ&4?I?:JhC_"m_XpTjU?L,a0DXbgKJ0l\k`=CQ'EfrX%P.T6i:Y8NlI8IG;<N**'4;$[Z3-CJ=rm6p/g%gt/aHHg!DM="F<Rn@j>6'-Fq1K]K75eW3eCKb]k,Mdqf=Gs)h80_Dc_:l"sdcb0ToR!0%Uj6m;2Ut<fI/mF8^M9\6P>GHIVD->2q%@u-[.Mo/FZ[R,7:!c(:Kj>iQ&@D(^J9B"j!>pd>>8E4?s?a;0LJm3J:mD)?24%0gAVeCq4#76G9C]I?B>Z\\aLmDmi]^STR;RHdS%%Lccm\IJVQLdLmWNi96hoPfC>KL;i?r&+.E]0G9QQbM-SA)]Q&l""Dnqbq*J$Bd)?LJ")("RfbDoNjZ^X2Y"g3Z:N($(:(QLrU'[%8412<`6[a],a>?4q2gc?o*!7T&rrbmM\m/5Ia#kn_E,YKp(T*d.sL,N6MPUe'Ig<#D*0M'`5K+Rh9C)#)YYta%;FC7FB3*,Dt;Fn%jel-ZLP/3njL2DhFYVlH/-#hNo=VRcLcOu(/qA<9q!4[RWpcRsUY:hh]u-CAmE20L='t&4]OOg[`#?Yj.\pK#V5#.nKW@XViJbj(%q?l!O6Qt#"o^U,lYJPN\KVP,WZrGWUqX,F4iS__^=b?TIk,qHi-d9KFl'0"\[Hgn+a2b@MGD/QME7Vtkpj5?n0dLoe(3)/PKXM#%%Zf`KZcJ#i-3PX\'_tU6cT,*Rk3.H/N+90NVs8Ai^r6YH@0:u,(K^&IHXoY1NfUr3ep^*Ad.]?DS^OH#4T<:QMo3_OZd^K2H\Qu\A%ci<%of_R(k_<D(piqr]3^T>F_lbE:Ws8)=oIJWeY55jHDs'>YsJ,9cVlg#XBqpSo$q;p'IrpZQ[q"K:7YCHB.s7u8Yrpo=Bs65S/%rq-#Is6pR!ps4Hfk<Jq&lS"n1r\&ctVgn]d^\m?f5Q1&#r"ho,>N53<r8DSoe%bkRrrM1"d.R~>%AI9_PrivateDataEnd